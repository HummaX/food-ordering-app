{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\nlet cpuInfo;\ntry {\n  cpuInfo = require('cpu-features')();\n} catch {}\nconst {\n  bindingAvailable,\n  CIPHER_INFO,\n  MAC_INFO\n} = require('./crypto.js');\nconst eddsaSupported = (() => {\n  if (typeof crypto.sign === 'function' && typeof crypto.verify === 'function') {\n    const key = '-----BEGIN PRIVATE KEY-----\\r\\nMC4CAQAwBQYDK2VwBCIEIHKj+sVa9WcD' + '/q2DJUJaf43Kptc8xYuUQA4bOFj9vC8T\\r\\n-----END PRIVATE KEY-----';\n    const data = Buffer.from('a');\n    let sig;\n    let verified;\n    try {\n      sig = crypto.sign(null, data, key);\n      verified = crypto.verify(null, data, key, sig);\n    } catch {}\n    return Buffer.isBuffer(sig) && sig.length === 64 && verified === true;\n  }\n  return false;\n})();\nconst curve25519Supported = typeof crypto.diffieHellman === 'function' && typeof crypto.generateKeyPairSync === 'function' && typeof crypto.createPublicKey === 'function';\nconst DEFAULT_KEX = [\n// https://tools.ietf.org/html/rfc5656#section-10.1\n'ecdh-sha2-nistp256', 'ecdh-sha2-nistp384', 'ecdh-sha2-nistp521',\n// https://tools.ietf.org/html/rfc4419#section-4\n'diffie-hellman-group-exchange-sha256',\n// https://tools.ietf.org/html/rfc8268\n'diffie-hellman-group14-sha256', 'diffie-hellman-group15-sha512', 'diffie-hellman-group16-sha512', 'diffie-hellman-group17-sha512', 'diffie-hellman-group18-sha512'];\nif (curve25519Supported) {\n  DEFAULT_KEX.unshift('curve25519-sha256');\n  DEFAULT_KEX.unshift('curve25519-sha256@libssh.org');\n}\nconst SUPPORTED_KEX = DEFAULT_KEX.concat([\n// https://tools.ietf.org/html/rfc4419#section-4\n'diffie-hellman-group-exchange-sha1', 'diffie-hellman-group14-sha1',\n// REQUIRED\n'diffie-hellman-group1-sha1' // REQUIRED\n]);\n\nconst DEFAULT_SERVER_HOST_KEY = ['ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', 'ecdsa-sha2-nistp521', 'rsa-sha2-512',\n// RFC 8332\n'rsa-sha2-256',\n// RFC 8332\n'ssh-rsa'];\nif (eddsaSupported) DEFAULT_SERVER_HOST_KEY.unshift('ssh-ed25519');\nconst SUPPORTED_SERVER_HOST_KEY = DEFAULT_SERVER_HOST_KEY.concat(['ssh-dss']);\nconst canUseCipher = (() => {\n  const ciphers = crypto.getCiphers();\n  return name => ciphers.includes(CIPHER_INFO[name].sslName);\n})();\nlet DEFAULT_CIPHER = [\n// http://tools.ietf.org/html/rfc5647\n'aes128-gcm@openssh.com', 'aes256-gcm@openssh.com',\n// http://tools.ietf.org/html/rfc4344#section-4\n'aes128-ctr', 'aes192-ctr', 'aes256-ctr'];\nif (cpuInfo && cpuInfo.flags && !cpuInfo.flags.aes) {\n  // We know for sure the CPU does not support AES acceleration\n  if (bindingAvailable) DEFAULT_CIPHER.unshift('chacha20-poly1305@openssh.com');else DEFAULT_CIPHER.push('chacha20-poly1305@openssh.com');\n} else if (bindingAvailable && cpuInfo && cpuInfo.arch === 'x86') {\n  // Places chacha20-poly1305 immediately after GCM ciphers since GCM ciphers\n  // seem to outperform it on x86, but it seems to be faster than CTR ciphers\n  DEFAULT_CIPHER.splice(4, 0, 'chacha20-poly1305@openssh.com');\n} else {\n  DEFAULT_CIPHER.push('chacha20-poly1305@openssh.com');\n}\nDEFAULT_CIPHER = DEFAULT_CIPHER.filter(canUseCipher);\nconst SUPPORTED_CIPHER = DEFAULT_CIPHER.concat(['aes256-cbc', 'aes192-cbc', 'aes128-cbc', 'blowfish-cbc', '3des-cbc', 'aes128-gcm', 'aes256-gcm',\n// http://tools.ietf.org/html/rfc4345#section-4:\n'arcfour256', 'arcfour128', 'cast128-cbc', 'arcfour'].filter(canUseCipher));\nconst canUseMAC = (() => {\n  const hashes = crypto.getHashes();\n  return name => hashes.includes(MAC_INFO[name].sslName);\n})();\nconst DEFAULT_MAC = ['hmac-sha2-256-etm@openssh.com', 'hmac-sha2-512-etm@openssh.com', 'hmac-sha1-etm@openssh.com', 'hmac-sha2-256', 'hmac-sha2-512', 'hmac-sha1'].filter(canUseMAC);\nconst SUPPORTED_MAC = DEFAULT_MAC.concat(['hmac-md5', 'hmac-sha2-256-96',\n// first 96 bits of HMAC-SHA256\n'hmac-sha2-512-96',\n// first 96 bits of HMAC-SHA512\n'hmac-ripemd160', 'hmac-sha1-96',\n// first 96 bits of HMAC-SHA1\n'hmac-md5-96' // first 96 bits of HMAC-MD5\n].filter(canUseMAC));\nconst DEFAULT_COMPRESSION = ['none', 'zlib@openssh.com',\n// ZLIB (LZ77) compression, except\n// compression/decompression does not start until after\n// successful user authentication\n'zlib' // ZLIB (LZ77) compression\n];\n\nconst SUPPORTED_COMPRESSION = DEFAULT_COMPRESSION.concat([]);\nconst COMPAT = {\n  BAD_DHGEX: 1 << 0,\n  OLD_EXIT: 1 << 1,\n  DYN_RPORT_BUG: 1 << 2,\n  BUG_DHGEX_LARGE: 1 << 3\n};\nmodule.exports = {\n  MESSAGE: {\n    // Transport layer protocol -- generic (1-19)\n    DISCONNECT: 1,\n    IGNORE: 2,\n    UNIMPLEMENTED: 3,\n    DEBUG: 4,\n    SERVICE_REQUEST: 5,\n    SERVICE_ACCEPT: 6,\n    // Transport layer protocol -- algorithm negotiation (20-29)\n    KEXINIT: 20,\n    NEWKEYS: 21,\n    // Transport layer protocol -- key exchange method-specific (30-49)\n    KEXDH_INIT: 30,\n    KEXDH_REPLY: 31,\n    KEXDH_GEX_GROUP: 31,\n    KEXDH_GEX_INIT: 32,\n    KEXDH_GEX_REPLY: 33,\n    KEXDH_GEX_REQUEST: 34,\n    KEXECDH_INIT: 30,\n    KEXECDH_REPLY: 31,\n    // User auth protocol -- generic (50-59)\n    USERAUTH_REQUEST: 50,\n    USERAUTH_FAILURE: 51,\n    USERAUTH_SUCCESS: 52,\n    USERAUTH_BANNER: 53,\n    // User auth protocol -- user auth method-specific (60-79)\n    USERAUTH_PASSWD_CHANGEREQ: 60,\n    USERAUTH_PK_OK: 60,\n    USERAUTH_INFO_REQUEST: 60,\n    USERAUTH_INFO_RESPONSE: 61,\n    // Connection protocol -- generic (80-89)\n    GLOBAL_REQUEST: 80,\n    REQUEST_SUCCESS: 81,\n    REQUEST_FAILURE: 82,\n    // Connection protocol -- channel-related (90-127)\n    CHANNEL_OPEN: 90,\n    CHANNEL_OPEN_CONFIRMATION: 91,\n    CHANNEL_OPEN_FAILURE: 92,\n    CHANNEL_WINDOW_ADJUST: 93,\n    CHANNEL_DATA: 94,\n    CHANNEL_EXTENDED_DATA: 95,\n    CHANNEL_EOF: 96,\n    CHANNEL_CLOSE: 97,\n    CHANNEL_REQUEST: 98,\n    CHANNEL_SUCCESS: 99,\n    CHANNEL_FAILURE: 100\n\n    // Reserved for client protocols (128-191)\n\n    // Local extensions (192-155)\n  },\n\n  DISCONNECT_REASON: {\n    HOST_NOT_ALLOWED_TO_CONNECT: 1,\n    PROTOCOL_ERROR: 2,\n    KEY_EXCHANGE_FAILED: 3,\n    RESERVED: 4,\n    MAC_ERROR: 5,\n    COMPRESSION_ERROR: 6,\n    SERVICE_NOT_AVAILABLE: 7,\n    PROTOCOL_VERSION_NOT_SUPPORTED: 8,\n    HOST_KEY_NOT_VERIFIABLE: 9,\n    CONNECTION_LOST: 10,\n    BY_APPLICATION: 11,\n    TOO_MANY_CONNECTIONS: 12,\n    AUTH_CANCELED_BY_USER: 13,\n    NO_MORE_AUTH_METHODS_AVAILABLE: 14,\n    ILLEGAL_USER_NAME: 15\n  },\n  DISCONNECT_REASON_STR: undefined,\n  CHANNEL_OPEN_FAILURE: {\n    ADMINISTRATIVELY_PROHIBITED: 1,\n    CONNECT_FAILED: 2,\n    UNKNOWN_CHANNEL_TYPE: 3,\n    RESOURCE_SHORTAGE: 4\n  },\n  TERMINAL_MODE: {\n    TTY_OP_END: 0,\n    // Indicates end of options.\n    VINTR: 1,\n    // Interrupt character; 255 if none. Similarly for the\n    //  other characters.  Not all of these characters are\n    //  supported on all systems.\n    VQUIT: 2,\n    // The quit character (sends SIGQUIT signal on POSIX\n    //  systems).\n    VERASE: 3,\n    // Erase the character to left of the cursor.\n    VKILL: 4,\n    // Kill the current input line.\n    VEOF: 5,\n    // End-of-file character (sends EOF from the\n    //  terminal).\n    VEOL: 6,\n    // End-of-line character in addition to carriage\n    //  return and/or linefeed.\n    VEOL2: 7,\n    // Additional end-of-line character.\n    VSTART: 8,\n    // Continues paused output (normally control-Q).\n    VSTOP: 9,\n    // Pauses output (normally control-S).\n    VSUSP: 10,\n    // Suspends the current program.\n    VDSUSP: 11,\n    // Another suspend character.\n    VREPRINT: 12,\n    // Reprints the current input line.\n    VWERASE: 13,\n    // Erases a word left of cursor.\n    VLNEXT: 14,\n    // Enter the next character typed literally, even if\n    //  it is a special character\n    VFLUSH: 15,\n    // Character to flush output.\n    VSWTCH: 16,\n    // Switch to a different shell layer.\n    VSTATUS: 17,\n    // Prints system status line (load, command, pid,\n    //  etc).\n    VDISCARD: 18,\n    // Toggles the flushing of terminal output.\n    IGNPAR: 30,\n    // The ignore parity flag.  The parameter SHOULD be 0\n    //  if this flag is FALSE, and 1 if it is TRUE.\n    PARMRK: 31,\n    // Mark parity and framing errors.\n    INPCK: 32,\n    // Enable checking of parity errors.\n    ISTRIP: 33,\n    // Strip 8th bit off characters.\n    INLCR: 34,\n    // Map NL into CR on input.\n    IGNCR: 35,\n    // Ignore CR on input.\n    ICRNL: 36,\n    // Map CR to NL on input.\n    IUCLC: 37,\n    // Translate uppercase characters to lowercase.\n    IXON: 38,\n    // Enable output flow control.\n    IXANY: 39,\n    // Any char will restart after stop.\n    IXOFF: 40,\n    // Enable input flow control.\n    IMAXBEL: 41,\n    // Ring bell on input queue full.\n    ISIG: 50,\n    // Enable signals INTR, QUIT, [D]SUSP.\n    ICANON: 51,\n    // Canonicalize input lines.\n    XCASE: 52,\n    // Enable input and output of uppercase characters by\n    //  preceding their lowercase equivalents with \"\\\".\n    ECHO: 53,\n    // Enable echoing.\n    ECHOE: 54,\n    // Visually erase chars.\n    ECHOK: 55,\n    // Kill character discards current line.\n    ECHONL: 56,\n    // Echo NL even if ECHO is off.\n    NOFLSH: 57,\n    // Don't flush after interrupt.\n    TOSTOP: 58,\n    // Stop background jobs from output.\n    IEXTEN: 59,\n    // Enable extensions.\n    ECHOCTL: 60,\n    // Echo control characters as ^(Char).\n    ECHOKE: 61,\n    // Visual erase for line kill.\n    PENDIN: 62,\n    // Retype pending input.\n    OPOST: 70,\n    // Enable output processing.\n    OLCUC: 71,\n    // Convert lowercase to uppercase.\n    ONLCR: 72,\n    // Map NL to CR-NL.\n    OCRNL: 73,\n    // Translate carriage return to newline (output).\n    ONOCR: 74,\n    // Translate newline to carriage return-newline\n    //  (output).\n    ONLRET: 75,\n    // Newline performs a carriage return (output).\n    CS7: 90,\n    // 7 bit mode.\n    CS8: 91,\n    // 8 bit mode.\n    PARENB: 92,\n    // Parity enable.\n    PARODD: 93,\n    // Odd parity, else even.\n    TTY_OP_ISPEED: 128,\n    // Specifies the input baud rate in bits per second.\n    TTY_OP_OSPEED: 129 // Specifies the output baud rate in bits per second.\n  },\n\n  CHANNEL_EXTENDED_DATATYPE: {\n    STDERR: 1\n  },\n  SIGNALS: ['ABRT', 'ALRM', 'FPE', 'HUP', 'ILL', 'INT', 'QUIT', 'SEGV', 'TERM', 'USR1', 'USR2', 'KILL', 'PIPE'].reduce((cur, val) => ({\n    ...cur,\n    [val]: 1\n  }), {}),\n  COMPAT,\n  COMPAT_CHECKS: [['Cisco-1.25', COMPAT.BAD_DHGEX], [/^Cisco-1\\./, COMPAT.BUG_DHGEX_LARGE], [/^[0-9.]+$/, COMPAT.OLD_EXIT],\n  // old SSH.com implementations\n  [/^OpenSSH_5\\.\\d+/, COMPAT.DYN_RPORT_BUG]],\n  // KEX proposal-related\n  DEFAULT_KEX,\n  SUPPORTED_KEX,\n  DEFAULT_SERVER_HOST_KEY,\n  SUPPORTED_SERVER_HOST_KEY,\n  DEFAULT_CIPHER,\n  SUPPORTED_CIPHER,\n  DEFAULT_MAC,\n  SUPPORTED_MAC,\n  DEFAULT_COMPRESSION,\n  SUPPORTED_COMPRESSION,\n  curve25519Supported,\n  eddsaSupported\n};\nmodule.exports.DISCONNECT_REASON_BY_VALUE = Array.from(Object.entries(module.exports.DISCONNECT_REASON)).reduce((obj, _ref) => {\n  let [key, value] = _ref;\n  return {\n    ...obj,\n    [value]: key\n  };\n}, {});","map":{"version":3,"names":["crypto","require","cpuInfo","bindingAvailable","CIPHER_INFO","MAC_INFO","eddsaSupported","sign","verify","key","data","Buffer","from","sig","verified","isBuffer","length","curve25519Supported","diffieHellman","generateKeyPairSync","createPublicKey","DEFAULT_KEX","unshift","SUPPORTED_KEX","concat","DEFAULT_SERVER_HOST_KEY","SUPPORTED_SERVER_HOST_KEY","canUseCipher","ciphers","getCiphers","name","includes","sslName","DEFAULT_CIPHER","flags","aes","push","arch","splice","filter","SUPPORTED_CIPHER","canUseMAC","hashes","getHashes","DEFAULT_MAC","SUPPORTED_MAC","DEFAULT_COMPRESSION","SUPPORTED_COMPRESSION","COMPAT","BAD_DHGEX","OLD_EXIT","DYN_RPORT_BUG","BUG_DHGEX_LARGE","module","exports","MESSAGE","DISCONNECT","IGNORE","UNIMPLEMENTED","DEBUG","SERVICE_REQUEST","SERVICE_ACCEPT","KEXINIT","NEWKEYS","KEXDH_INIT","KEXDH_REPLY","KEXDH_GEX_GROUP","KEXDH_GEX_INIT","KEXDH_GEX_REPLY","KEXDH_GEX_REQUEST","KEXECDH_INIT","KEXECDH_REPLY","USERAUTH_REQUEST","USERAUTH_FAILURE","USERAUTH_SUCCESS","USERAUTH_BANNER","USERAUTH_PASSWD_CHANGEREQ","USERAUTH_PK_OK","USERAUTH_INFO_REQUEST","USERAUTH_INFO_RESPONSE","GLOBAL_REQUEST","REQUEST_SUCCESS","REQUEST_FAILURE","CHANNEL_OPEN","CHANNEL_OPEN_CONFIRMATION","CHANNEL_OPEN_FAILURE","CHANNEL_WINDOW_ADJUST","CHANNEL_DATA","CHANNEL_EXTENDED_DATA","CHANNEL_EOF","CHANNEL_CLOSE","CHANNEL_REQUEST","CHANNEL_SUCCESS","CHANNEL_FAILURE","DISCONNECT_REASON","HOST_NOT_ALLOWED_TO_CONNECT","PROTOCOL_ERROR","KEY_EXCHANGE_FAILED","RESERVED","MAC_ERROR","COMPRESSION_ERROR","SERVICE_NOT_AVAILABLE","PROTOCOL_VERSION_NOT_SUPPORTED","HOST_KEY_NOT_VERIFIABLE","CONNECTION_LOST","BY_APPLICATION","TOO_MANY_CONNECTIONS","AUTH_CANCELED_BY_USER","NO_MORE_AUTH_METHODS_AVAILABLE","ILLEGAL_USER_NAME","DISCONNECT_REASON_STR","undefined","ADMINISTRATIVELY_PROHIBITED","CONNECT_FAILED","UNKNOWN_CHANNEL_TYPE","RESOURCE_SHORTAGE","TERMINAL_MODE","TTY_OP_END","VINTR","VQUIT","VERASE","VKILL","VEOF","VEOL","VEOL2","VSTART","VSTOP","VSUSP","VDSUSP","VREPRINT","VWERASE","VLNEXT","VFLUSH","VSWTCH","VSTATUS","VDISCARD","IGNPAR","PARMRK","INPCK","ISTRIP","INLCR","IGNCR","ICRNL","IUCLC","IXON","IXANY","IXOFF","IMAXBEL","ISIG","ICANON","XCASE","ECHO","ECHOE","ECHOK","ECHONL","NOFLSH","TOSTOP","IEXTEN","ECHOCTL","ECHOKE","PENDIN","OPOST","OLCUC","ONLCR","OCRNL","ONOCR","ONLRET","CS7","CS8","PARENB","PARODD","TTY_OP_ISPEED","TTY_OP_OSPEED","CHANNEL_EXTENDED_DATATYPE","STDERR","SIGNALS","reduce","cur","val","COMPAT_CHECKS","DISCONNECT_REASON_BY_VALUE","Array","Object","entries","obj","_ref","value"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/protocol/constants.js"],"sourcesContent":["'use strict';\n\nconst crypto = require('crypto');\n\nlet cpuInfo;\ntry {\n  cpuInfo = require('cpu-features')();\n} catch {}\n\nconst { bindingAvailable, CIPHER_INFO, MAC_INFO } = require('./crypto.js');\n\nconst eddsaSupported = (() => {\n  if (typeof crypto.sign === 'function'\n      && typeof crypto.verify === 'function') {\n    const key =\n      '-----BEGIN PRIVATE KEY-----\\r\\nMC4CAQAwBQYDK2VwBCIEIHKj+sVa9WcD'\n      + '/q2DJUJaf43Kptc8xYuUQA4bOFj9vC8T\\r\\n-----END PRIVATE KEY-----';\n    const data = Buffer.from('a');\n    let sig;\n    let verified;\n    try {\n      sig = crypto.sign(null, data, key);\n      verified = crypto.verify(null, data, key, sig);\n    } catch {}\n    return (Buffer.isBuffer(sig) && sig.length === 64 && verified === true);\n  }\n\n  return false;\n})();\n\nconst curve25519Supported = (typeof crypto.diffieHellman === 'function'\n                             && typeof crypto.generateKeyPairSync === 'function'\n                             && typeof crypto.createPublicKey === 'function');\n\nconst DEFAULT_KEX = [\n  // https://tools.ietf.org/html/rfc5656#section-10.1\n  'ecdh-sha2-nistp256',\n  'ecdh-sha2-nistp384',\n  'ecdh-sha2-nistp521',\n\n  // https://tools.ietf.org/html/rfc4419#section-4\n  'diffie-hellman-group-exchange-sha256',\n\n  // https://tools.ietf.org/html/rfc8268\n  'diffie-hellman-group14-sha256',\n  'diffie-hellman-group15-sha512',\n  'diffie-hellman-group16-sha512',\n  'diffie-hellman-group17-sha512',\n  'diffie-hellman-group18-sha512',\n];\nif (curve25519Supported) {\n  DEFAULT_KEX.unshift('curve25519-sha256');\n  DEFAULT_KEX.unshift('curve25519-sha256@libssh.org');\n}\nconst SUPPORTED_KEX = DEFAULT_KEX.concat([\n  // https://tools.ietf.org/html/rfc4419#section-4\n  'diffie-hellman-group-exchange-sha1',\n\n  'diffie-hellman-group14-sha1', // REQUIRED\n  'diffie-hellman-group1-sha1',  // REQUIRED\n]);\n\n\nconst DEFAULT_SERVER_HOST_KEY = [\n  'ecdsa-sha2-nistp256',\n  'ecdsa-sha2-nistp384',\n  'ecdsa-sha2-nistp521',\n  'rsa-sha2-512', // RFC 8332\n  'rsa-sha2-256', // RFC 8332\n  'ssh-rsa',\n];\nif (eddsaSupported)\n  DEFAULT_SERVER_HOST_KEY.unshift('ssh-ed25519');\nconst SUPPORTED_SERVER_HOST_KEY = DEFAULT_SERVER_HOST_KEY.concat([\n  'ssh-dss',\n]);\n\n\nconst canUseCipher = (() => {\n  const ciphers = crypto.getCiphers();\n  return (name) => ciphers.includes(CIPHER_INFO[name].sslName);\n})();\nlet DEFAULT_CIPHER = [\n  // http://tools.ietf.org/html/rfc5647\n  'aes128-gcm@openssh.com',\n  'aes256-gcm@openssh.com',\n\n  // http://tools.ietf.org/html/rfc4344#section-4\n  'aes128-ctr',\n  'aes192-ctr',\n  'aes256-ctr',\n];\nif (cpuInfo && cpuInfo.flags && !cpuInfo.flags.aes) {\n  // We know for sure the CPU does not support AES acceleration\n  if (bindingAvailable)\n    DEFAULT_CIPHER.unshift('chacha20-poly1305@openssh.com');\n  else\n    DEFAULT_CIPHER.push('chacha20-poly1305@openssh.com');\n} else if (bindingAvailable && cpuInfo && cpuInfo.arch === 'x86') {\n  // Places chacha20-poly1305 immediately after GCM ciphers since GCM ciphers\n  // seem to outperform it on x86, but it seems to be faster than CTR ciphers\n  DEFAULT_CIPHER.splice(4, 0, 'chacha20-poly1305@openssh.com');\n} else {\n  DEFAULT_CIPHER.push('chacha20-poly1305@openssh.com');\n}\nDEFAULT_CIPHER = DEFAULT_CIPHER.filter(canUseCipher);\nconst SUPPORTED_CIPHER = DEFAULT_CIPHER.concat([\n  'aes256-cbc',\n  'aes192-cbc',\n  'aes128-cbc',\n  'blowfish-cbc',\n  '3des-cbc',\n  'aes128-gcm',\n  'aes256-gcm',\n\n  // http://tools.ietf.org/html/rfc4345#section-4:\n  'arcfour256',\n  'arcfour128',\n\n  'cast128-cbc',\n  'arcfour',\n].filter(canUseCipher));\n\n\nconst canUseMAC = (() => {\n  const hashes = crypto.getHashes();\n  return (name) => hashes.includes(MAC_INFO[name].sslName);\n})();\nconst DEFAULT_MAC = [\n  'hmac-sha2-256-etm@openssh.com',\n  'hmac-sha2-512-etm@openssh.com',\n  'hmac-sha1-etm@openssh.com',\n  'hmac-sha2-256',\n  'hmac-sha2-512',\n  'hmac-sha1',\n].filter(canUseMAC);\nconst SUPPORTED_MAC = DEFAULT_MAC.concat([\n  'hmac-md5',\n  'hmac-sha2-256-96', // first 96 bits of HMAC-SHA256\n  'hmac-sha2-512-96', // first 96 bits of HMAC-SHA512\n  'hmac-ripemd160',\n  'hmac-sha1-96',     // first 96 bits of HMAC-SHA1\n  'hmac-md5-96',      // first 96 bits of HMAC-MD5\n].filter(canUseMAC));\n\nconst DEFAULT_COMPRESSION = [\n  'none',\n  'zlib@openssh.com', // ZLIB (LZ77) compression, except\n                      // compression/decompression does not start until after\n                      // successful user authentication\n  'zlib',             // ZLIB (LZ77) compression\n];\nconst SUPPORTED_COMPRESSION = DEFAULT_COMPRESSION.concat([\n]);\n\n\nconst COMPAT = {\n  BAD_DHGEX: 1 << 0,\n  OLD_EXIT: 1 << 1,\n  DYN_RPORT_BUG: 1 << 2,\n  BUG_DHGEX_LARGE: 1 << 3,\n};\n\nmodule.exports = {\n  MESSAGE: {\n    // Transport layer protocol -- generic (1-19)\n    DISCONNECT: 1,\n    IGNORE: 2,\n    UNIMPLEMENTED: 3,\n    DEBUG: 4,\n    SERVICE_REQUEST: 5,\n    SERVICE_ACCEPT: 6,\n\n    // Transport layer protocol -- algorithm negotiation (20-29)\n    KEXINIT: 20,\n    NEWKEYS: 21,\n\n    // Transport layer protocol -- key exchange method-specific (30-49)\n    KEXDH_INIT: 30,\n    KEXDH_REPLY: 31,\n\n    KEXDH_GEX_GROUP: 31,\n    KEXDH_GEX_INIT: 32,\n    KEXDH_GEX_REPLY: 33,\n    KEXDH_GEX_REQUEST: 34,\n\n    KEXECDH_INIT: 30,\n    KEXECDH_REPLY: 31,\n\n    // User auth protocol -- generic (50-59)\n    USERAUTH_REQUEST: 50,\n    USERAUTH_FAILURE: 51,\n    USERAUTH_SUCCESS: 52,\n    USERAUTH_BANNER: 53,\n\n    // User auth protocol -- user auth method-specific (60-79)\n    USERAUTH_PASSWD_CHANGEREQ: 60,\n\n    USERAUTH_PK_OK: 60,\n\n    USERAUTH_INFO_REQUEST: 60,\n    USERAUTH_INFO_RESPONSE: 61,\n\n    // Connection protocol -- generic (80-89)\n    GLOBAL_REQUEST: 80,\n    REQUEST_SUCCESS: 81,\n    REQUEST_FAILURE: 82,\n\n    // Connection protocol -- channel-related (90-127)\n    CHANNEL_OPEN: 90,\n    CHANNEL_OPEN_CONFIRMATION: 91,\n    CHANNEL_OPEN_FAILURE: 92,\n    CHANNEL_WINDOW_ADJUST: 93,\n    CHANNEL_DATA: 94,\n    CHANNEL_EXTENDED_DATA: 95,\n    CHANNEL_EOF: 96,\n    CHANNEL_CLOSE: 97,\n    CHANNEL_REQUEST: 98,\n    CHANNEL_SUCCESS: 99,\n    CHANNEL_FAILURE: 100\n\n    // Reserved for client protocols (128-191)\n\n    // Local extensions (192-155)\n  },\n  DISCONNECT_REASON: {\n    HOST_NOT_ALLOWED_TO_CONNECT: 1,\n    PROTOCOL_ERROR: 2,\n    KEY_EXCHANGE_FAILED: 3,\n    RESERVED: 4,\n    MAC_ERROR: 5,\n    COMPRESSION_ERROR: 6,\n    SERVICE_NOT_AVAILABLE: 7,\n    PROTOCOL_VERSION_NOT_SUPPORTED: 8,\n    HOST_KEY_NOT_VERIFIABLE: 9,\n    CONNECTION_LOST: 10,\n    BY_APPLICATION: 11,\n    TOO_MANY_CONNECTIONS: 12,\n    AUTH_CANCELED_BY_USER: 13,\n    NO_MORE_AUTH_METHODS_AVAILABLE: 14,\n    ILLEGAL_USER_NAME: 15,\n  },\n  DISCONNECT_REASON_STR: undefined,\n  CHANNEL_OPEN_FAILURE: {\n    ADMINISTRATIVELY_PROHIBITED: 1,\n    CONNECT_FAILED: 2,\n    UNKNOWN_CHANNEL_TYPE: 3,\n    RESOURCE_SHORTAGE: 4\n  },\n  TERMINAL_MODE: {\n    TTY_OP_END: 0,        // Indicates end of options.\n    VINTR: 1,             // Interrupt character; 255 if none. Similarly for the\n                          //  other characters.  Not all of these characters are\n                          //  supported on all systems.\n    VQUIT: 2,             // The quit character (sends SIGQUIT signal on POSIX\n                          //  systems).\n    VERASE: 3,            // Erase the character to left of the cursor.\n    VKILL: 4,             // Kill the current input line.\n    VEOF: 5,              // End-of-file character (sends EOF from the\n                          //  terminal).\n    VEOL: 6,              // End-of-line character in addition to carriage\n                          //  return and/or linefeed.\n    VEOL2: 7,             // Additional end-of-line character.\n    VSTART: 8,            // Continues paused output (normally control-Q).\n    VSTOP: 9,             // Pauses output (normally control-S).\n    VSUSP: 10,            // Suspends the current program.\n    VDSUSP: 11,           // Another suspend character.\n    VREPRINT: 12,         // Reprints the current input line.\n    VWERASE: 13,          // Erases a word left of cursor.\n    VLNEXT: 14,           // Enter the next character typed literally, even if\n                          //  it is a special character\n    VFLUSH: 15,           // Character to flush output.\n    VSWTCH: 16,           // Switch to a different shell layer.\n    VSTATUS: 17,          // Prints system status line (load, command, pid,\n                          //  etc).\n    VDISCARD: 18,         // Toggles the flushing of terminal output.\n    IGNPAR: 30,           // The ignore parity flag.  The parameter SHOULD be 0\n                          //  if this flag is FALSE, and 1 if it is TRUE.\n    PARMRK: 31,           // Mark parity and framing errors.\n    INPCK: 32,            // Enable checking of parity errors.\n    ISTRIP: 33,           // Strip 8th bit off characters.\n    INLCR: 34,            // Map NL into CR on input.\n    IGNCR: 35,            // Ignore CR on input.\n    ICRNL: 36,            // Map CR to NL on input.\n    IUCLC: 37,            // Translate uppercase characters to lowercase.\n    IXON: 38,             // Enable output flow control.\n    IXANY: 39,            // Any char will restart after stop.\n    IXOFF: 40,            // Enable input flow control.\n    IMAXBEL: 41,          // Ring bell on input queue full.\n    ISIG: 50,             // Enable signals INTR, QUIT, [D]SUSP.\n    ICANON: 51,           // Canonicalize input lines.\n    XCASE: 52,            // Enable input and output of uppercase characters by\n                          //  preceding their lowercase equivalents with \"\\\".\n    ECHO: 53,             // Enable echoing.\n    ECHOE: 54,            // Visually erase chars.\n    ECHOK: 55,            // Kill character discards current line.\n    ECHONL: 56,           // Echo NL even if ECHO is off.\n    NOFLSH: 57,           // Don't flush after interrupt.\n    TOSTOP: 58,           // Stop background jobs from output.\n    IEXTEN: 59,           // Enable extensions.\n    ECHOCTL: 60,          // Echo control characters as ^(Char).\n    ECHOKE: 61,           // Visual erase for line kill.\n    PENDIN: 62,           // Retype pending input.\n    OPOST: 70,            // Enable output processing.\n    OLCUC: 71,            // Convert lowercase to uppercase.\n    ONLCR: 72,            // Map NL to CR-NL.\n    OCRNL: 73,            // Translate carriage return to newline (output).\n    ONOCR: 74,            // Translate newline to carriage return-newline\n                          //  (output).\n    ONLRET: 75,           // Newline performs a carriage return (output).\n    CS7: 90,              // 7 bit mode.\n    CS8: 91,              // 8 bit mode.\n    PARENB: 92,           // Parity enable.\n    PARODD: 93,           // Odd parity, else even.\n    TTY_OP_ISPEED: 128,   // Specifies the input baud rate in bits per second.\n    TTY_OP_OSPEED: 129,   // Specifies the output baud rate in bits per second.\n  },\n  CHANNEL_EXTENDED_DATATYPE: {\n    STDERR: 1,\n  },\n\n  SIGNALS: [\n    'ABRT', 'ALRM', 'FPE', 'HUP', 'ILL', 'INT', 'QUIT', 'SEGV', 'TERM', 'USR1',\n    'USR2', 'KILL', 'PIPE'\n  ].reduce((cur, val) => ({ ...cur, [val]: 1 }), {}),\n\n  COMPAT,\n  COMPAT_CHECKS: [\n    [ 'Cisco-1.25', COMPAT.BAD_DHGEX ],\n    [ /^Cisco-1\\./, COMPAT.BUG_DHGEX_LARGE ],\n    [ /^[0-9.]+$/, COMPAT.OLD_EXIT ], // old SSH.com implementations\n    [ /^OpenSSH_5\\.\\d+/, COMPAT.DYN_RPORT_BUG ],\n  ],\n\n  // KEX proposal-related\n  DEFAULT_KEX,\n  SUPPORTED_KEX,\n  DEFAULT_SERVER_HOST_KEY,\n  SUPPORTED_SERVER_HOST_KEY,\n  DEFAULT_CIPHER,\n  SUPPORTED_CIPHER,\n  DEFAULT_MAC,\n  SUPPORTED_MAC,\n  DEFAULT_COMPRESSION,\n  SUPPORTED_COMPRESSION,\n\n  curve25519Supported,\n  eddsaSupported,\n};\n\nmodule.exports.DISCONNECT_REASON_BY_VALUE =\n  Array.from(Object.entries(module.exports.DISCONNECT_REASON))\n       .reduce((obj, [key, value]) => ({ ...obj, [value]: key }), {});\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEhC,IAAIC,OAAO;AACX,IAAI;EACFA,OAAO,GAAGD,OAAO,CAAC,cAAc,CAAC,EAAE;AACrC,CAAC,CAAC,MAAM,CAAC;AAET,MAAM;EAAEE,gBAAgB;EAAEC,WAAW;EAAEC;AAAS,CAAC,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAE1E,MAAMK,cAAc,GAAG,CAAC,MAAM;EAC5B,IAAI,OAAON,MAAM,CAACO,IAAI,KAAK,UAAU,IAC9B,OAAOP,MAAM,CAACQ,MAAM,KAAK,UAAU,EAAE;IAC1C,MAAMC,GAAG,GACP,iEAAiE,GAC/D,+DAA+D;IACnE,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAI,CAAC,GAAG,CAAC;IAC7B,IAAIC,GAAG;IACP,IAAIC,QAAQ;IACZ,IAAI;MACFD,GAAG,GAAGb,MAAM,CAACO,IAAI,CAAC,IAAI,EAAEG,IAAI,EAAED,GAAG,CAAC;MAClCK,QAAQ,GAAGd,MAAM,CAACQ,MAAM,CAAC,IAAI,EAAEE,IAAI,EAAED,GAAG,EAAEI,GAAG,CAAC;IAChD,CAAC,CAAC,MAAM,CAAC;IACT,OAAQF,MAAM,CAACI,QAAQ,CAACF,GAAG,CAAC,IAAIA,GAAG,CAACG,MAAM,KAAK,EAAE,IAAIF,QAAQ,KAAK,IAAI;EACxE;EAEA,OAAO,KAAK;AACd,CAAC,GAAG;AAEJ,MAAMG,mBAAmB,GAAI,OAAOjB,MAAM,CAACkB,aAAa,KAAK,UAAU,IACvC,OAAOlB,MAAM,CAACmB,mBAAmB,KAAK,UAAU,IAChD,OAAOnB,MAAM,CAACoB,eAAe,KAAK,UAAW;AAE7E,MAAMC,WAAW,GAAG;AAClB;AACA,oBAAoB,EACpB,oBAAoB,EACpB,oBAAoB;AAEpB;AACA,sCAAsC;AAEtC;AACA,+BAA+B,EAC/B,+BAA+B,EAC/B,+BAA+B,EAC/B,+BAA+B,EAC/B,+BAA+B,CAChC;AACD,IAAIJ,mBAAmB,EAAE;EACvBI,WAAW,CAACC,OAAO,CAAC,mBAAmB,CAAC;EACxCD,WAAW,CAACC,OAAO,CAAC,8BAA8B,CAAC;AACrD;AACA,MAAMC,aAAa,GAAGF,WAAW,CAACG,MAAM,CAAC;AACvC;AACA,oCAAoC,EAEpC,6BAA6B;AAAE;AAC/B,4BAA4B,CAAG;AAAA,CAChC,CAAC;;AAGF,MAAMC,uBAAuB,GAAG,CAC9B,qBAAqB,EACrB,qBAAqB,EACrB,qBAAqB,EACrB,cAAc;AAAE;AAChB,cAAc;AAAE;AAChB,SAAS,CACV;AACD,IAAInB,cAAc,EAChBmB,uBAAuB,CAACH,OAAO,CAAC,aAAa,CAAC;AAChD,MAAMI,yBAAyB,GAAGD,uBAAuB,CAACD,MAAM,CAAC,CAC/D,SAAS,CACV,CAAC;AAGF,MAAMG,YAAY,GAAG,CAAC,MAAM;EAC1B,MAAMC,OAAO,GAAG5B,MAAM,CAAC6B,UAAU,EAAE;EACnC,OAAQC,IAAI,IAAKF,OAAO,CAACG,QAAQ,CAAC3B,WAAW,CAAC0B,IAAI,CAAC,CAACE,OAAO,CAAC;AAC9D,CAAC,GAAG;AACJ,IAAIC,cAAc,GAAG;AACnB;AACA,wBAAwB,EACxB,wBAAwB;AAExB;AACA,YAAY,EACZ,YAAY,EACZ,YAAY,CACb;AACD,IAAI/B,OAAO,IAAIA,OAAO,CAACgC,KAAK,IAAI,CAAChC,OAAO,CAACgC,KAAK,CAACC,GAAG,EAAE;EAClD;EACA,IAAIhC,gBAAgB,EAClB8B,cAAc,CAACX,OAAO,CAAC,+BAA+B,CAAC,CAAC,KAExDW,cAAc,CAACG,IAAI,CAAC,+BAA+B,CAAC;AACxD,CAAC,MAAM,IAAIjC,gBAAgB,IAAID,OAAO,IAAIA,OAAO,CAACmC,IAAI,KAAK,KAAK,EAAE;EAChE;EACA;EACAJ,cAAc,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,+BAA+B,CAAC;AAC9D,CAAC,MAAM;EACLL,cAAc,CAACG,IAAI,CAAC,+BAA+B,CAAC;AACtD;AACAH,cAAc,GAAGA,cAAc,CAACM,MAAM,CAACZ,YAAY,CAAC;AACpD,MAAMa,gBAAgB,GAAGP,cAAc,CAACT,MAAM,CAAC,CAC7C,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,UAAU,EACV,YAAY,EACZ,YAAY;AAEZ;AACA,YAAY,EACZ,YAAY,EAEZ,aAAa,EACb,SAAS,CACV,CAACe,MAAM,CAACZ,YAAY,CAAC,CAAC;AAGvB,MAAMc,SAAS,GAAG,CAAC,MAAM;EACvB,MAAMC,MAAM,GAAG1C,MAAM,CAAC2C,SAAS,EAAE;EACjC,OAAQb,IAAI,IAAKY,MAAM,CAACX,QAAQ,CAAC1B,QAAQ,CAACyB,IAAI,CAAC,CAACE,OAAO,CAAC;AAC1D,CAAC,GAAG;AACJ,MAAMY,WAAW,GAAG,CAClB,+BAA+B,EAC/B,+BAA+B,EAC/B,2BAA2B,EAC3B,eAAe,EACf,eAAe,EACf,WAAW,CACZ,CAACL,MAAM,CAACE,SAAS,CAAC;AACnB,MAAMI,aAAa,GAAGD,WAAW,CAACpB,MAAM,CAAC,CACvC,UAAU,EACV,kBAAkB;AAAE;AACpB,kBAAkB;AAAE;AACpB,gBAAgB,EAChB,cAAc;AAAM;AACpB,aAAa,CAAO;AAAA,CACrB,CAACe,MAAM,CAACE,SAAS,CAAC,CAAC;AAEpB,MAAMK,mBAAmB,GAAG,CAC1B,MAAM,EACN,kBAAkB;AAAE;AACA;AACA;AACpB,MAAM,CAAc;AAAA,CACrB;;AACD,MAAMC,qBAAqB,GAAGD,mBAAmB,CAACtB,MAAM,CAAC,EACxD,CAAC;AAGF,MAAMwB,MAAM,GAAG;EACbC,SAAS,EAAE,CAAC,IAAI,CAAC;EACjBC,QAAQ,EAAE,CAAC,IAAI,CAAC;EAChBC,aAAa,EAAE,CAAC,IAAI,CAAC;EACrBC,eAAe,EAAE,CAAC,IAAI;AACxB,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EACfC,OAAO,EAAE;IACP;IACAC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAE,CAAC;IACTC,aAAa,EAAE,CAAC;IAChBC,KAAK,EAAE,CAAC;IACRC,eAAe,EAAE,CAAC;IAClBC,cAAc,EAAE,CAAC;IAEjB;IACAC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,EAAE;IAEX;IACAC,UAAU,EAAE,EAAE;IACdC,WAAW,EAAE,EAAE;IAEfC,eAAe,EAAE,EAAE;IACnBC,cAAc,EAAE,EAAE;IAClBC,eAAe,EAAE,EAAE;IACnBC,iBAAiB,EAAE,EAAE;IAErBC,YAAY,EAAE,EAAE;IAChBC,aAAa,EAAE,EAAE;IAEjB;IACAC,gBAAgB,EAAE,EAAE;IACpBC,gBAAgB,EAAE,EAAE;IACpBC,gBAAgB,EAAE,EAAE;IACpBC,eAAe,EAAE,EAAE;IAEnB;IACAC,yBAAyB,EAAE,EAAE;IAE7BC,cAAc,EAAE,EAAE;IAElBC,qBAAqB,EAAE,EAAE;IACzBC,sBAAsB,EAAE,EAAE;IAE1B;IACAC,cAAc,EAAE,EAAE;IAClBC,eAAe,EAAE,EAAE;IACnBC,eAAe,EAAE,EAAE;IAEnB;IACAC,YAAY,EAAE,EAAE;IAChBC,yBAAyB,EAAE,EAAE;IAC7BC,oBAAoB,EAAE,EAAE;IACxBC,qBAAqB,EAAE,EAAE;IACzBC,YAAY,EAAE,EAAE;IAChBC,qBAAqB,EAAE,EAAE;IACzBC,WAAW,EAAE,EAAE;IACfC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE,EAAE;IACnBC,eAAe,EAAE,EAAE;IACnBC,eAAe,EAAE;;IAEjB;;IAEA;EACF,CAAC;;EACDC,iBAAiB,EAAE;IACjBC,2BAA2B,EAAE,CAAC;IAC9BC,cAAc,EAAE,CAAC;IACjBC,mBAAmB,EAAE,CAAC;IACtBC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,iBAAiB,EAAE,CAAC;IACpBC,qBAAqB,EAAE,CAAC;IACxBC,8BAA8B,EAAE,CAAC;IACjCC,uBAAuB,EAAE,CAAC;IAC1BC,eAAe,EAAE,EAAE;IACnBC,cAAc,EAAE,EAAE;IAClBC,oBAAoB,EAAE,EAAE;IACxBC,qBAAqB,EAAE,EAAE;IACzBC,8BAA8B,EAAE,EAAE;IAClCC,iBAAiB,EAAE;EACrB,CAAC;EACDC,qBAAqB,EAAEC,SAAS;EAChC1B,oBAAoB,EAAE;IACpB2B,2BAA2B,EAAE,CAAC;IAC9BC,cAAc,EAAE,CAAC;IACjBC,oBAAoB,EAAE,CAAC;IACvBC,iBAAiB,EAAE;EACrB,CAAC;EACDC,aAAa,EAAE;IACbC,UAAU,EAAE,CAAC;IAAS;IACtBC,KAAK,EAAE,CAAC;IAAc;IACA;IACA;IACtBC,KAAK,EAAE,CAAC;IAAc;IACA;IACtBC,MAAM,EAAE,CAAC;IAAa;IACtBC,KAAK,EAAE,CAAC;IAAc;IACtBC,IAAI,EAAE,CAAC;IAAe;IACA;IACtBC,IAAI,EAAE,CAAC;IAAe;IACA;IACtBC,KAAK,EAAE,CAAC;IAAc;IACtBC,MAAM,EAAE,CAAC;IAAa;IACtBC,KAAK,EAAE,CAAC;IAAc;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,QAAQ,EAAE,EAAE;IAAU;IACtBC,OAAO,EAAE,EAAE;IAAW;IACtBC,MAAM,EAAE,EAAE;IAAY;IACA;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,OAAO,EAAE,EAAE;IAAW;IACA;IACtBC,QAAQ,EAAE,EAAE;IAAU;IACtBC,MAAM,EAAE,EAAE;IAAY;IACA;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,IAAI,EAAE,EAAE;IAAc;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,OAAO,EAAE,EAAE;IAAW;IACtBC,IAAI,EAAE,EAAE;IAAc;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,KAAK,EAAE,EAAE;IAAa;IACA;IACtBC,IAAI,EAAE,EAAE;IAAc;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,OAAO,EAAE,EAAE;IAAW;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACtBC,KAAK,EAAE,EAAE;IAAa;IACA;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,GAAG,EAAE,EAAE;IAAe;IACtBC,GAAG,EAAE,EAAE;IAAe;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,MAAM,EAAE,EAAE;IAAY;IACtBC,aAAa,EAAE,GAAG;IAAI;IACtBC,aAAa,EAAE,GAAG,CAAI;EACxB,CAAC;;EACDC,yBAAyB,EAAE;IACzBC,MAAM,EAAE;EACV,CAAC;EAEDC,OAAO,EAAE,CACP,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAC1E,MAAM,EAAE,MAAM,EAAE,MAAM,CACvB,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,MAAM;IAAE,GAAGD,GAAG;IAAE,CAACC,GAAG,GAAG;EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAElDlI,MAAM;EACNmI,aAAa,EAAE,CACb,CAAE,YAAY,EAAEnI,MAAM,CAACC,SAAS,CAAE,EAClC,CAAE,YAAY,EAAED,MAAM,CAACI,eAAe,CAAE,EACxC,CAAE,WAAW,EAAEJ,MAAM,CAACE,QAAQ,CAAE;EAAE;EAClC,CAAE,iBAAiB,EAAEF,MAAM,CAACG,aAAa,CAAE,CAC5C;EAED;EACA9B,WAAW;EACXE,aAAa;EACbE,uBAAuB;EACvBC,yBAAyB;EACzBO,cAAc;EACdO,gBAAgB;EAChBI,WAAW;EACXC,aAAa;EACbC,mBAAmB;EACnBC,qBAAqB;EAErB9B,mBAAmB;EACnBX;AACF,CAAC;AAED+C,MAAM,CAACC,OAAO,CAAC8H,0BAA0B,GACvCC,KAAK,CAACzK,IAAI,CAAC0K,MAAM,CAACC,OAAO,CAAClI,MAAM,CAACC,OAAO,CAACwC,iBAAiB,CAAC,CAAC,CACtDkF,MAAM,CAAC,CAACQ,GAAG,EAAAC,IAAA;EAAA,IAAE,CAAChL,GAAG,EAAEiL,KAAK,CAAC,GAAAD,IAAA;EAAA,OAAM;IAAE,GAAGD,GAAG;IAAE,CAACE,KAAK,GAAGjL;EAAI,CAAC;AAAA,CAAC,EAAE,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
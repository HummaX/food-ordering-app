{"ast":null,"code":"'use strict';\n\nconst {\n  Socket\n} = require('net');\nconst {\n  Duplex\n} = require('stream');\nconst {\n  resolve\n} = require('path');\nconst {\n  readFile\n} = require('fs');\nconst {\n  execFile,\n  spawn\n} = require('child_process');\nconst {\n  isParsedKey,\n  parseKey\n} = require('./protocol/keyParser.js');\nconst {\n  makeBufferParser,\n  readUInt32BE,\n  writeUInt32BE,\n  writeUInt32LE\n} = require('./protocol/utils.js');\nfunction once(cb) {\n  let called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    cb(...arguments);\n  };\n}\nfunction concat(buf1, buf2) {\n  const combined = Buffer.allocUnsafe(buf1.length + buf2.length);\n  buf1.copy(combined, 0);\n  buf2.copy(combined, buf1.length);\n  return combined;\n}\nfunction noop() {}\nconst EMPTY_BUF = Buffer.alloc(0);\nconst binaryParser = makeBufferParser();\nclass BaseAgent {\n  getIdentities(cb) {\n    cb(new Error('Missing getIdentities() implementation'));\n  }\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') cb = options;\n    cb(new Error('Missing sign() implementation'));\n  }\n}\nclass OpenSSHAgent extends BaseAgent {\n  constructor(socketPath) {\n    super();\n    this.socketPath = socketPath;\n  }\n  getStream(cb) {\n    cb = once(cb);\n    const sock = new Socket();\n    sock.on('connect', () => {\n      cb(null, sock);\n    });\n    sock.on('close', onFail).on('end', onFail).on('error', onFail);\n    sock.connect(this.socketPath);\n    function onFail() {\n      try {\n        sock.destroy();\n      } catch {}\n      cb(new Error('Failed to connect to agent'));\n    }\n  }\n  getIdentities(cb) {\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err) err = new Error('Failed to retrieve identities from agent');\n        cb(err);\n      }\n      if (err) return onFail(err);\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n      stream.on('close', onFail).on('end', onFail).on('error', onFail);\n      protocol.getIdentities((err, keys) => {\n        if (err) return onFail(err);\n        try {\n          stream.destroy();\n        } catch {}\n        cb(null, keys);\n      });\n    });\n  }\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = undefined;\n    } else if (typeof options !== 'object' || options === null) {\n      options = undefined;\n    }\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err) err = new Error('Failed to sign data with agent');\n        cb(err);\n      }\n      if (err) return onFail(err);\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n      stream.on('close', onFail).on('end', onFail).on('error', onFail);\n      protocol.sign(pubKey, data, options, (err, sig) => {\n        if (err) return onFail(err);\n        try {\n          stream.destroy();\n        } catch {}\n        cb(null, sig);\n      });\n    });\n  }\n}\nconst PageantAgent = (() => {\n  const RET_ERR_BADARGS = 10;\n  const RET_ERR_UNAVAILABLE = 11;\n  const RET_ERR_NOMAP = 12;\n  const RET_ERR_BINSTDIN = 13;\n  const RET_ERR_BINSTDOUT = 14;\n  const RET_ERR_BADLEN = 15;\n  const EXEPATH = resolve(__dirname, '..', 'util/pagent.exe');\n  const ERROR = {\n    [RET_ERR_BADARGS]: new Error('Invalid pagent.exe arguments'),\n    [RET_ERR_UNAVAILABLE]: new Error('Pageant is not running'),\n    [RET_ERR_NOMAP]: new Error('pagent.exe could not create an mmap'),\n    [RET_ERR_BINSTDIN]: new Error('pagent.exe could not set mode for stdin'),\n    [RET_ERR_BINSTDOUT]: new Error('pagent.exe could not set mode for stdout'),\n    [RET_ERR_BADLEN]: new Error('pagent.exe did not get expected input payload')\n  };\n  function destroy(stream) {\n    stream.buffer = null;\n    if (stream.proc) {\n      stream.proc.kill();\n      stream.proc = undefined;\n    }\n  }\n  class PageantSocket extends Duplex {\n    constructor() {\n      super();\n      this.proc = undefined;\n      this.buffer = null;\n    }\n    _read(n) {}\n    _write(data, encoding, cb) {\n      if (this.buffer === null) {\n        this.buffer = data;\n      } else {\n        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);\n        this.buffer.copy(newBuffer, 0);\n        data.copy(newBuffer, this.buffer.length);\n        this.buffer = newBuffer;\n      }\n      // Wait for at least all length bytes\n      if (this.buffer.length < 4) return cb();\n      const len = readUInt32BE(this.buffer, 0);\n      // Make sure we have a full message before querying pageant\n      if (this.buffer.length - 4 < len) return cb();\n      data = this.buffer.slice(0, 4 + len);\n      if (this.buffer.length > 4 + len) return cb(new Error('Unexpected multiple agent requests'));\n      this.buffer = null;\n      let error;\n      const proc = this.proc = spawn(EXEPATH, [data.length]);\n      proc.stdout.on('data', data => {\n        this.push(data);\n      });\n      proc.on('error', err => {\n        error = err;\n        cb(error);\n      });\n      proc.on('close', code => {\n        this.proc = undefined;\n        if (!error) {\n          if (error = ERROR[code]) return cb(error);\n          cb();\n        }\n      });\n      proc.stdin.end(data);\n    }\n    _final(cb) {\n      destroy(this);\n      cb();\n    }\n    _destroy(err, cb) {\n      destroy(this);\n      cb();\n    }\n  }\n  return class PageantAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb(null, new PageantSocket());\n    }\n  };\n})();\nconst CygwinAgent = (() => {\n  const RE_CYGWIN_SOCK = /^!<socket >(\\d+) s ([A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8})/;\n  return class CygwinAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb = once(cb);\n\n      // The cygwin ssh-agent connection process looks like this:\n      //   1. Read the \"socket\" as a file to get the underlying TCP port and a\n      //      special \"secret\" that must be sent to the TCP server.\n      //   2. Connect to the server listening on localhost at the TCP port.\n      //   3. Send the \"secret\" to the server.\n      //   4. The server sends back the same \"secret\".\n      //   5. Send three 32-bit integer values of zero. This is ordinarily the\n      //      pid, uid, and gid of this process, but cygwin will actually\n      //      send us the correct values as a response.\n      //   6. The server sends back the pid, uid, gid.\n      //   7. Disconnect.\n      //   8. Repeat steps 2-6, except send the received pid, uid, and gid in\n      //      step 5 instead of zeroes.\n      //   9. Connection is ready to be used.\n\n      let socketPath = this.socketPath;\n      let triedCygpath = false;\n      readFile(socketPath, function readCygsocket(err, data) {\n        if (err) {\n          if (triedCygpath) return cb(new Error('Invalid cygwin unix socket path'));\n\n          // Try using `cygpath` to convert a possible *nix-style path to the\n          // real Windows path before giving up ...\n          execFile('cygpath', ['-w', socketPath], (err, stdout, stderr) => {\n            if (err || stdout.length === 0) return cb(new Error('Invalid cygwin unix socket path'));\n            triedCygpath = true;\n            socketPath = stdout.toString().replace(/[\\r\\n]/g, '');\n            readFile(socketPath, readCygsocket);\n          });\n          return;\n        }\n        const m = RE_CYGWIN_SOCK.exec(data.toString('ascii'));\n        if (!m) return cb(new Error('Malformed cygwin unix socket file'));\n        let state;\n        let bc = 0;\n        let isRetrying = false;\n        const inBuf = [];\n        let sock;\n\n        // Use 0 for pid, uid, and gid to ensure we get an error and also\n        // a valid uid and gid from cygwin so that we don't have to figure it\n        // out ourselves\n        let credsBuf = Buffer.alloc(12);\n\n        // Parse cygwin unix socket file contents\n        const port = parseInt(m[1], 10);\n        const secret = m[2].replace(/-/g, '');\n        const secretBuf = Buffer.allocUnsafe(16);\n        for (let i = 0, j = 0; j < 32; ++i, j += 2) secretBuf[i] = parseInt(secret.substring(j, j + 2), 16);\n\n        // Convert to host order (always LE for Windows)\n        for (let i = 0; i < 16; i += 4) writeUInt32LE(secretBuf, readUInt32BE(secretBuf, i), i);\n        tryConnect();\n        function _onconnect() {\n          bc = 0;\n          state = 'secret';\n          sock.write(secretBuf);\n        }\n        function _ondata(data) {\n          bc += data.length;\n          if (state === 'secret') {\n            // The secret we sent is echoed back to us by cygwin, not sure of\n            // the reason for that, but we ignore it nonetheless ...\n            if (bc === 16) {\n              bc = 0;\n              state = 'creds';\n              sock.write(credsBuf);\n            }\n            return;\n          }\n          if (state === 'creds') {\n            // If this is the first attempt, make sure to gather the valid\n            // uid and gid for our next attempt\n            if (!isRetrying) inBuf.push(data);\n            if (bc === 12) {\n              sock.removeListener('connect', _onconnect);\n              sock.removeListener('data', _ondata);\n              sock.removeListener('error', onFail);\n              sock.removeListener('end', onFail);\n              sock.removeListener('close', onFail);\n              if (isRetrying) return cb(null, sock);\n              isRetrying = true;\n              credsBuf = Buffer.concat(inBuf);\n              writeUInt32LE(credsBuf, process.pid, 0);\n              sock.on('error', () => {});\n              sock.destroy();\n              tryConnect();\n            }\n          }\n        }\n        function onFail() {\n          cb(new Error('Problem negotiating cygwin unix socket security'));\n        }\n        function tryConnect() {\n          sock = new Socket();\n          sock.on('connect', _onconnect);\n          sock.on('data', _ondata);\n          sock.on('error', onFail);\n          sock.on('end', onFail);\n          sock.on('close', onFail);\n          sock.connect(port);\n        }\n      });\n    }\n  };\n})();\n\n// Format of `//./pipe/ANYTHING`, with forward slashes and backward slashes\n// being interchangeable\nconst WINDOWS_PIPE_REGEX = /^[/\\\\][/\\\\]\\.[/\\\\]pipe[/\\\\].+/;\nfunction createAgent(path) {\n  if (process.platform === 'win32' && !WINDOWS_PIPE_REGEX.test(path)) {\n    return path === 'pageant' ? new PageantAgent() : new CygwinAgent(path);\n  }\n  return new OpenSSHAgent(path);\n}\nconst AgentProtocol = (() => {\n  // Client->Server messages\n  const SSH_AGENTC_REQUEST_IDENTITIES = 11;\n  const SSH_AGENTC_SIGN_REQUEST = 13;\n  // const SSH_AGENTC_ADD_IDENTITY = 17;\n  // const SSH_AGENTC_REMOVE_IDENTITY = 18;\n  // const SSH_AGENTC_REMOVE_ALL_IDENTITIES = 19;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY = 20;\n  // const SSH_AGENTC_REMOVE_SMARTCARD_KEY = 21;\n  // const SSH_AGENTC_LOCK = 22;\n  // const SSH_AGENTC_UNLOCK = 23;\n  // const SSH_AGENTC_ADD_ID_CONSTRAINED = 25;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED = 26;\n  // const SSH_AGENTC_EXTENSION = 27;\n  // Server->Client messages\n  const SSH_AGENT_FAILURE = 5;\n  // const SSH_AGENT_SUCCESS = 6;\n  const SSH_AGENT_IDENTITIES_ANSWER = 12;\n  const SSH_AGENT_SIGN_RESPONSE = 14;\n  // const SSH_AGENT_EXTENSION_FAILURE = 28;\n\n  // const SSH_AGENT_CONSTRAIN_LIFETIME = 1;\n  // const SSH_AGENT_CONSTRAIN_CONFIRM = 2;\n  // const SSH_AGENT_CONSTRAIN_EXTENSION = 255;\n\n  const SSH_AGENT_RSA_SHA2_256 = 1 << 1;\n  const SSH_AGENT_RSA_SHA2_512 = 1 << 2;\n  const ROLE_CLIENT = 0;\n  const ROLE_SERVER = 1;\n\n  // Ensures that responses get sent back in the same order the requests were\n  // received\n  function processResponses(protocol) {\n    let ret;\n    while (protocol[SYM_REQS].length) {\n      const nextResponse = protocol[SYM_REQS][0][SYM_RESP];\n      if (nextResponse === undefined) break;\n      protocol[SYM_REQS].shift();\n      ret = protocol.push(nextResponse);\n    }\n    return ret;\n  }\n  const SYM_TYPE = Symbol('Inbound Request Type');\n  const SYM_RESP = Symbol('Inbound Request Response');\n  const SYM_CTX = Symbol('Inbound Request Context');\n  class AgentInboundRequest {\n    constructor(type, ctx) {\n      this[SYM_TYPE] = type;\n      this[SYM_RESP] = undefined;\n      this[SYM_CTX] = ctx;\n    }\n    hasResponded() {\n      return this[SYM_RESP] !== undefined;\n    }\n    getType() {\n      return this[SYM_TYPE];\n    }\n    getContext() {\n      return this[SYM_CTX];\n    }\n  }\n  function respond(protocol, req, data) {\n    req[SYM_RESP] = data;\n    return processResponses(protocol);\n  }\n  function cleanup(protocol) {\n    protocol[SYM_BUFFER] = null;\n    if (protocol[SYM_MODE] === ROLE_CLIENT) {\n      const reqs = protocol[SYM_REQS];\n      if (reqs && reqs.length) {\n        protocol[SYM_REQS] = [];\n        for (const req of reqs) req.cb(new Error('No reply from server'));\n      }\n    }\n\n    // Node streams hackery to make streams do the \"right thing\"\n    try {\n      protocol.end();\n    } catch {}\n    setImmediate(() => {\n      if (!protocol[SYM_ENDED]) protocol.emit('end');\n      if (!protocol[SYM_CLOSED]) protocol.emit('close');\n    });\n  }\n  function onClose() {\n    this[SYM_CLOSED] = true;\n  }\n  function onEnd() {\n    this[SYM_ENDED] = true;\n  }\n  const SYM_REQS = Symbol('Requests');\n  const SYM_MODE = Symbol('Agent Protocol Role');\n  const SYM_BUFFER = Symbol('Agent Protocol Buffer');\n  const SYM_MSGLEN = Symbol('Agent Protocol Current Message Length');\n  const SYM_CLOSED = Symbol('Agent Protocol Closed');\n  const SYM_ENDED = Symbol('Agent Protocol Ended');\n  // Implementation based on:\n  // https://tools.ietf.org/html/draft-miller-ssh-agent-04\n  return class AgentProtocol extends Duplex {\n    /*\n        Notes:\n          - `constraint` type consists of:\n               byte                    constraint_type\n               byte[]                  constraint_data\n            where `constraint_type` is one of:\n              * SSH_AGENT_CONSTRAIN_LIFETIME\n                - `constraint_data` consists of:\n                     uint32                  seconds\n              * SSH_AGENT_CONSTRAIN_CONFIRM\n                - `constraint_data` N/A\n              * SSH_AGENT_CONSTRAIN_EXTENSION\n                - `constraint_data` consists of:\n                     string                  extension name\n                     byte[]                  extension-specific details\n    */\n\n    constructor(isClient) {\n      super({\n        autoDestroy: true,\n        emitClose: false\n      });\n      this[SYM_MODE] = isClient ? ROLE_CLIENT : ROLE_SERVER;\n      this[SYM_REQS] = [];\n      this[SYM_BUFFER] = null;\n      this[SYM_MSGLEN] = -1;\n      this.once('end', onEnd);\n      this.once('close', onClose);\n    }\n    _read(n) {}\n    _write(data, encoding, cb) {\n      /*\n          Messages are of the format:\n            uint32                    message length\n            byte                      message type\n            byte[message length - 1]  message contents\n      */\n      if (this[SYM_BUFFER] === null) this[SYM_BUFFER] = data;else this[SYM_BUFFER] = concat(this[SYM_BUFFER], data);\n      let buffer = this[SYM_BUFFER];\n      let bufferLen = buffer.length;\n      let p = 0;\n      while (p < bufferLen) {\n        // Wait for length + type\n        if (bufferLen < 5) break;\n        if (this[SYM_MSGLEN] === -1) this[SYM_MSGLEN] = readUInt32BE(buffer, p);\n\n        // Check if we have the entire message\n        if (bufferLen < 4 + this[SYM_MSGLEN]) break;\n        const msgType = buffer[p += 4];\n        ++p;\n        if (this[SYM_MODE] === ROLE_CLIENT) {\n          if (this[SYM_REQS].length === 0) return cb(new Error('Received unexpected message from server'));\n          const req = this[SYM_REQS].shift();\n          switch (msgType) {\n            case SSH_AGENT_FAILURE:\n              req.cb(new Error('Agent responded with failure'));\n              break;\n            case SSH_AGENT_IDENTITIES_ANSWER:\n              {\n                if (req.type !== SSH_AGENTC_REQUEST_IDENTITIES) return cb(new Error('Agent responded with wrong message type'));\n\n                /*\n                   byte        SSH_AGENT_IDENTITIES_ANSWER\n                   uint32      nkeys\n                   where `nkeys` is 0 or more of:\n                   string      key blob\n                   string      comment\n                */\n\n                binaryParser.init(buffer, p);\n                const numKeys = binaryParser.readUInt32BE();\n                if (numKeys === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n                const keys = [];\n                for (let i = 0; i < numKeys; ++i) {\n                  let pubKey = binaryParser.readString();\n                  if (pubKey === undefined) {\n                    binaryParser.clear();\n                    return cb(new Error('Malformed agent response'));\n                  }\n                  const comment = binaryParser.readString(true);\n                  if (comment === undefined) {\n                    binaryParser.clear();\n                    return cb(new Error('Malformed agent response'));\n                  }\n                  pubKey = parseKey(pubKey);\n                  // We continue parsing the packet if we encounter an error\n                  // in case the error is due to the key being an unsupported\n                  // type\n                  if (pubKey instanceof Error) continue;\n                  pubKey.comment = pubKey.comment || comment;\n                  keys.push(pubKey);\n                }\n                p = binaryParser.pos();\n                binaryParser.clear();\n                req.cb(null, keys);\n                break;\n              }\n            case SSH_AGENT_SIGN_RESPONSE:\n              {\n                if (req.type !== SSH_AGENTC_SIGN_REQUEST) return cb(new Error('Agent responded with wrong message type'));\n\n                /*\n                   byte        SSH_AGENT_SIGN_RESPONSE\n                   string      signature\n                */\n\n                binaryParser.init(buffer, p);\n                let signature = binaryParser.readString();\n                p = binaryParser.pos();\n                binaryParser.clear();\n                if (signature === undefined) return cb(new Error('Malformed agent response'));\n\n                // We strip the algorithm from OpenSSH's output and assume it's\n                // using the algorithm we specified. This makes it easier on\n                // custom Agent implementations so they don't have to construct\n                // the correct binary format for a (OpenSSH-style) signature.\n\n                // TODO: verify signature type based on key and options used\n                // during initial sign request\n                binaryParser.init(signature, 0);\n                binaryParser.readString(true);\n                signature = binaryParser.readString();\n                binaryParser.clear();\n                if (signature === undefined) return cb(new Error('Malformed OpenSSH signature format'));\n                req.cb(null, signature);\n                break;\n              }\n            default:\n              return cb(new Error('Agent responded with unsupported message type'));\n          }\n        } else {\n          switch (msgType) {\n            case SSH_AGENTC_REQUEST_IDENTITIES:\n              {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                /*\n                  byte        SSH_AGENTC_REQUEST_IDENTITIES\n                */\n                this.emit('identities', req);\n                break;\n              }\n            case SSH_AGENTC_SIGN_REQUEST:\n              {\n                /*\n                  byte        SSH_AGENTC_SIGN_REQUEST\n                  string      key_blob\n                  string      data\n                  uint32      flags\n                */\n                binaryParser.init(buffer, p);\n                let pubKey = binaryParser.readString();\n                const data = binaryParser.readString();\n                const flagsVal = binaryParser.readUInt32BE();\n                p = binaryParser.pos();\n                binaryParser.clear();\n                if (flagsVal === undefined) {\n                  const req = new AgentInboundRequest(msgType);\n                  this[SYM_REQS].push(req);\n                  return this.failureReply(req);\n                }\n                pubKey = parseKey(pubKey);\n                if (pubKey instanceof Error) {\n                  const req = new AgentInboundRequest(msgType);\n                  this[SYM_REQS].push(req);\n                  return this.failureReply(req);\n                }\n                const flags = {\n                  hash: undefined\n                };\n                let ctx;\n                if (pubKey.type === 'ssh-rsa') {\n                  if (flagsVal & SSH_AGENT_RSA_SHA2_256) {\n                    ctx = 'rsa-sha2-256';\n                    flags.hash = 'sha256';\n                  } else if (flagsVal & SSH_AGENT_RSA_SHA2_512) {\n                    ctx = 'rsa-sha2-512';\n                    flags.hash = 'sha512';\n                  }\n                }\n                if (ctx === undefined) ctx = pubKey.type;\n                const req = new AgentInboundRequest(msgType, ctx);\n                this[SYM_REQS].push(req);\n                this.emit('sign', req, pubKey, data, flags);\n                break;\n              }\n            default:\n              {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                this.failureReply(req);\n              }\n          }\n        }\n\n        // Get ready for next message\n        this[SYM_MSGLEN] = -1;\n        if (p === bufferLen) {\n          // Nothing left to process for now\n          this[SYM_BUFFER] = null;\n          break;\n        } else {\n          this[SYM_BUFFER] = buffer = buffer.slice(p);\n          bufferLen = buffer.length;\n          p = 0;\n        }\n      }\n      cb();\n    }\n    _destroy(err, cb) {\n      cleanup(this);\n      cb();\n    }\n    _final(cb) {\n      cleanup(this);\n      cb();\n    }\n\n    // Client->Server messages =================================================\n    sign(pubKey, data, options, cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT) throw new Error('Client-only method called with server role');\n      if (typeof options === 'function') {\n        cb = options;\n        options = undefined;\n      } else if (typeof options !== 'object' || options === null) {\n        options = undefined;\n      }\n      let flags = 0;\n      pubKey = parseKey(pubKey);\n      if (pubKey instanceof Error) throw new Error('Invalid public key argument');\n      if (pubKey.type === 'ssh-rsa' && options) {\n        switch (options.hash) {\n          case 'sha256':\n            flags = SSH_AGENT_RSA_SHA2_256;\n            break;\n          case 'sha512':\n            flags = SSH_AGENT_RSA_SHA2_512;\n            break;\n        }\n      }\n      pubKey = pubKey.getPublicSSH();\n\n      /*\n        byte        SSH_AGENTC_SIGN_REQUEST\n        string      key_blob\n        string      data\n        uint32      flags\n      */\n      const type = SSH_AGENTC_SIGN_REQUEST;\n      const keyLen = pubKey.length;\n      const dataLen = data.length;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + keyLen + 4 + dataLen + 4);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = type;\n      writeUInt32BE(buf, keyLen, ++p);\n      pubKey.copy(buf, p += 4);\n      writeUInt32BE(buf, dataLen, p += keyLen);\n      data.copy(buf, p += 4);\n      writeUInt32BE(buf, flags, p += dataLen);\n      if (typeof cb !== 'function') cb = noop;\n      this[SYM_REQS].push({\n        type,\n        cb\n      });\n      return this.push(buf);\n    }\n    getIdentities(cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT) throw new Error('Client-only method called with server role');\n\n      /*\n        byte        SSH_AGENTC_REQUEST_IDENTITIES\n      */\n      const type = SSH_AGENTC_REQUEST_IDENTITIES;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = type;\n      if (typeof cb !== 'function') cb = noop;\n      this[SYM_REQS].push({\n        type,\n        cb\n      });\n      return this.push(buf);\n    }\n\n    // Server->Client messages =================================================\n    failureReply(req) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_FAILURE;\n      return respond(this, req, buf);\n    }\n    getIdentitiesReply(req, keys) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n\n      /*\n         byte        SSH_AGENT_IDENTITIES_ANSWER\n         uint32      nkeys\n         where `nkeys` is 0 or more of:\n         string      key blob\n         string      comment\n      */\n\n      if (req.getType() !== SSH_AGENTC_REQUEST_IDENTITIES) throw new Error('Invalid response to request');\n      if (!Array.isArray(keys)) throw new Error('Keys argument must be an array');\n      let totalKeysLen = 4; // Include `nkeys` size\n\n      const newKeys = [];\n      for (let i = 0; i < keys.length; ++i) {\n        const entry = keys[i];\n        if (typeof entry !== 'object' || entry === null) throw new Error(`Invalid key entry: ${entry}`);\n        let pubKey;\n        let comment;\n        if (isParsedKey(entry)) {\n          pubKey = entry;\n        } else if (isParsedKey(entry.pubKey)) {\n          pubKey = entry.pubKey;\n        } else {\n          if (typeof entry.pubKey !== 'object' || entry.pubKey === null) continue;\n          ({\n            pubKey,\n            comment\n          } = entry.pubKey);\n          pubKey = parseKey(pubKey);\n          if (pubKey instanceof Error) continue; // TODO: add debug output\n        }\n\n        comment = pubKey.comment || comment;\n        pubKey = pubKey.getPublicSSH();\n        totalKeysLen += 4 + pubKey.length;\n        if (comment && typeof comment === 'string') comment = Buffer.from(comment);else if (!Buffer.isBuffer(comment)) comment = EMPTY_BUF;\n        totalKeysLen += 4 + comment.length;\n        newKeys.push({\n          pubKey,\n          comment\n        });\n      }\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + totalKeysLen);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_IDENTITIES_ANSWER;\n      writeUInt32BE(buf, newKeys.length, ++p);\n      p += 4;\n      for (let i = 0; i < newKeys.length; ++i) {\n        const {\n          pubKey,\n          comment\n        } = newKeys[i];\n        writeUInt32BE(buf, pubKey.length, p);\n        pubKey.copy(buf, p += 4);\n        writeUInt32BE(buf, comment.length, p += pubKey.length);\n        p += 4;\n        if (comment.length) {\n          comment.copy(buf, p);\n          p += comment.length;\n        }\n      }\n      return respond(this, req, buf);\n    }\n    signReply(req, signature) {\n      if (this[SYM_MODE] !== ROLE_SERVER) throw new Error('Server-only method called with client role');\n      if (!(req instanceof AgentInboundRequest)) throw new Error('Wrong request argument');\n      if (req.hasResponded()) return true;\n\n      /*\n         byte        SSH_AGENT_SIGN_RESPONSE\n         string      signature\n      */\n\n      if (req.getType() !== SSH_AGENTC_SIGN_REQUEST) throw new Error('Invalid response to request');\n      if (!Buffer.isBuffer(signature)) throw new Error('Signature argument must be a Buffer');\n      if (signature.length === 0) throw new Error('Signature argument must be non-empty');\n\n      /*\n        OpenSSH agent signatures are encoded as:\n           string    signature format identifier (as specified by the\n                    public key/certificate format)\n          byte[n]   signature blob in format specific encoding.\n            - This is actually a `string` for: rsa, dss, ecdsa, and ed25519\n              types\n      */\n\n      let p = 0;\n      const sigFormat = req.getContext();\n      const sigFormatLen = Buffer.byteLength(sigFormat);\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + 4 + sigFormatLen + 4 + signature.length);\n      writeUInt32BE(buf, buf.length - 4, p);\n      buf[p += 4] = SSH_AGENT_SIGN_RESPONSE;\n      writeUInt32BE(buf, 4 + sigFormatLen + 4 + signature.length, ++p);\n      writeUInt32BE(buf, sigFormatLen, p += 4);\n      buf.utf8Write(sigFormat, p += 4, sigFormatLen);\n      writeUInt32BE(buf, signature.length, p += sigFormatLen);\n      signature.copy(buf, p += 4);\n      return respond(this, req, buf);\n    }\n  };\n})();\nconst SYM_AGENT = Symbol('Agent');\nconst SYM_AGENT_KEYS = Symbol('Agent Keys');\nconst SYM_AGENT_KEYS_IDX = Symbol('Agent Keys Index');\nconst SYM_AGENT_CBS = Symbol('Agent Init Callbacks');\nclass AgentContext {\n  constructor(agent) {\n    if (typeof agent === 'string') agent = createAgent(agent);else if (!isAgent(agent)) throw new Error('Invalid agent argument');\n    this[SYM_AGENT] = agent;\n    this[SYM_AGENT_KEYS] = null;\n    this[SYM_AGENT_KEYS_IDX] = -1;\n    this[SYM_AGENT_CBS] = null;\n  }\n  init(cb) {\n    var _this = this;\n    if (typeof cb !== 'function') cb = noop;\n    if (this[SYM_AGENT_KEYS] === null) {\n      if (this[SYM_AGENT_CBS] === null) {\n        this[SYM_AGENT_CBS] = [cb];\n        const doCbs = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          process.nextTick(() => {\n            const cbs = _this[SYM_AGENT_CBS];\n            _this[SYM_AGENT_CBS] = null;\n            for (const cb of cbs) cb(...args);\n          });\n        };\n        this[SYM_AGENT].getIdentities(once((err, keys) => {\n          if (err) return doCbs(err);\n          if (!Array.isArray(keys)) {\n            return doCbs(new Error('Agent implementation failed to provide keys'));\n          }\n          const newKeys = [];\n          for (let key of keys) {\n            key = parseKey(key);\n            if (key instanceof Error) {\n              // TODO: add debug output\n              continue;\n            }\n            newKeys.push(key);\n          }\n          this[SYM_AGENT_KEYS] = newKeys;\n          this[SYM_AGENT_KEYS_IDX] = -1;\n          doCbs();\n        }));\n      } else {\n        this[SYM_AGENT_CBS].push(cb);\n      }\n    } else {\n      process.nextTick(cb);\n    }\n  }\n  nextKey() {\n    if (this[SYM_AGENT_KEYS] === null || ++this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return false;\n    }\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  currentKey() {\n    if (this[SYM_AGENT_KEYS] === null || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return null;\n    }\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  pos() {\n    if (this[SYM_AGENT_KEYS] === null || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return -1;\n    }\n    return this[SYM_AGENT_KEYS_IDX];\n  }\n  reset() {\n    this[SYM_AGENT_KEYS_IDX] = -1;\n  }\n  sign() {\n    this[SYM_AGENT].sign(...arguments);\n  }\n}\nfunction isAgent(val) {\n  return val instanceof BaseAgent;\n}\nmodule.exports = {\n  AgentContext,\n  AgentProtocol,\n  BaseAgent,\n  createAgent,\n  CygwinAgent,\n  isAgent,\n  OpenSSHAgent,\n  PageantAgent\n};","map":{"version":3,"names":["Socket","require","Duplex","resolve","readFile","execFile","spawn","isParsedKey","parseKey","makeBufferParser","readUInt32BE","writeUInt32BE","writeUInt32LE","once","cb","called","arguments","concat","buf1","buf2","combined","Buffer","allocUnsafe","length","copy","noop","EMPTY_BUF","alloc","binaryParser","BaseAgent","getIdentities","Error","sign","pubKey","data","options","OpenSSHAgent","constructor","socketPath","getStream","sock","on","onFail","connect","destroy","err","stream","protocol","AgentProtocol","pipe","keys","undefined","sig","PageantAgent","RET_ERR_BADARGS","RET_ERR_UNAVAILABLE","RET_ERR_NOMAP","RET_ERR_BINSTDIN","RET_ERR_BINSTDOUT","RET_ERR_BADLEN","EXEPATH","__dirname","ERROR","buffer","proc","kill","PageantSocket","_read","n","_write","encoding","newBuffer","len","slice","error","stdout","push","code","stdin","end","_final","_destroy","CygwinAgent","RE_CYGWIN_SOCK","triedCygpath","readCygsocket","stderr","toString","replace","m","exec","state","bc","isRetrying","inBuf","credsBuf","port","parseInt","secret","secretBuf","i","j","substring","tryConnect","_onconnect","write","_ondata","removeListener","process","pid","WINDOWS_PIPE_REGEX","createAgent","path","platform","test","SSH_AGENTC_REQUEST_IDENTITIES","SSH_AGENTC_SIGN_REQUEST","SSH_AGENT_FAILURE","SSH_AGENT_IDENTITIES_ANSWER","SSH_AGENT_SIGN_RESPONSE","SSH_AGENT_RSA_SHA2_256","SSH_AGENT_RSA_SHA2_512","ROLE_CLIENT","ROLE_SERVER","processResponses","ret","SYM_REQS","nextResponse","SYM_RESP","shift","SYM_TYPE","Symbol","SYM_CTX","AgentInboundRequest","type","ctx","hasResponded","getType","getContext","respond","req","cleanup","SYM_BUFFER","SYM_MODE","reqs","setImmediate","SYM_ENDED","emit","SYM_CLOSED","onClose","onEnd","SYM_MSGLEN","isClient","autoDestroy","emitClose","bufferLen","p","msgType","init","numKeys","clear","readString","comment","pos","signature","flagsVal","failureReply","flags","hash","getPublicSSH","keyLen","dataLen","buf","getIdentitiesReply","Array","isArray","totalKeysLen","newKeys","entry","from","isBuffer","signReply","sigFormat","sigFormatLen","byteLength","utf8Write","SYM_AGENT","SYM_AGENT_KEYS","SYM_AGENT_KEYS_IDX","SYM_AGENT_CBS","AgentContext","agent","isAgent","_this","doCbs","_len","args","_key","nextTick","cbs","key","nextKey","currentKey","reset","val","module","exports"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/agent.js"],"sourcesContent":["'use strict';\n\nconst { Socket } = require('net');\nconst { Duplex } = require('stream');\nconst { resolve } = require('path');\nconst { readFile } = require('fs');\nconst { execFile, spawn } = require('child_process');\n\nconst { isParsedKey, parseKey } = require('./protocol/keyParser.js');\n\nconst {\n  makeBufferParser,\n  readUInt32BE,\n  writeUInt32BE,\n  writeUInt32LE,\n} = require('./protocol/utils.js');\n\nfunction once(cb) {\n  let called = false;\n  return (...args) => {\n    if (called)\n      return;\n    called = true;\n    cb(...args);\n  };\n}\n\nfunction concat(buf1, buf2) {\n  const combined = Buffer.allocUnsafe(buf1.length + buf2.length);\n  buf1.copy(combined, 0);\n  buf2.copy(combined, buf1.length);\n  return combined;\n}\n\nfunction noop() {}\n\nconst EMPTY_BUF = Buffer.alloc(0);\n\nconst binaryParser = makeBufferParser();\n\nclass BaseAgent {\n  getIdentities(cb) {\n    cb(new Error('Missing getIdentities() implementation'));\n  }\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options;\n    cb(new Error('Missing sign() implementation'));\n  }\n}\n\nclass OpenSSHAgent extends BaseAgent {\n  constructor(socketPath) {\n    super();\n    this.socketPath = socketPath;\n  }\n\n  getStream(cb) {\n    cb = once(cb);\n    const sock = new Socket();\n    sock.on('connect', () => {\n      cb(null, sock);\n    });\n    sock.on('close', onFail)\n        .on('end', onFail)\n        .on('error', onFail);\n    sock.connect(this.socketPath);\n\n    function onFail() {\n      try {\n        sock.destroy();\n      } catch {}\n\n      cb(new Error('Failed to connect to agent'));\n    }\n  }\n\n  getIdentities(cb) {\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err)\n          err = new Error('Failed to retrieve identities from agent');\n        cb(err);\n      }\n\n      if (err)\n        return onFail(err);\n\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n\n      stream.on('close', onFail)\n            .on('end', onFail)\n            .on('error', onFail);\n\n      protocol.getIdentities((err, keys) => {\n        if (err)\n          return onFail(err);\n        try {\n          stream.destroy();\n        } catch {}\n        cb(null, keys);\n      });\n    });\n  }\n\n  sign(pubKey, data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = undefined;\n    } else if (typeof options !== 'object' || options === null) {\n      options = undefined;\n    }\n\n    cb = once(cb);\n    this.getStream((err, stream) => {\n      function onFail(err) {\n        if (stream) {\n          try {\n            stream.destroy();\n          } catch {}\n        }\n        if (!err)\n          err = new Error('Failed to sign data with agent');\n        cb(err);\n      }\n\n      if (err)\n        return onFail(err);\n\n      const protocol = new AgentProtocol(true);\n      protocol.on('error', onFail);\n      protocol.pipe(stream).pipe(protocol);\n\n      stream.on('close', onFail)\n            .on('end', onFail)\n            .on('error', onFail);\n\n      protocol.sign(pubKey, data, options, (err, sig) => {\n        if (err)\n          return onFail(err);\n\n        try {\n          stream.destroy();\n        } catch {}\n\n        cb(null, sig);\n      });\n    });\n  }\n}\n\nconst PageantAgent = (() => {\n  const RET_ERR_BADARGS = 10;\n  const RET_ERR_UNAVAILABLE = 11;\n  const RET_ERR_NOMAP = 12;\n  const RET_ERR_BINSTDIN = 13;\n  const RET_ERR_BINSTDOUT = 14;\n  const RET_ERR_BADLEN = 15;\n\n  const EXEPATH = resolve(__dirname, '..', 'util/pagent.exe');\n  const ERROR = {\n    [RET_ERR_BADARGS]: new Error('Invalid pagent.exe arguments'),\n    [RET_ERR_UNAVAILABLE]: new Error('Pageant is not running'),\n    [RET_ERR_NOMAP]: new Error('pagent.exe could not create an mmap'),\n    [RET_ERR_BINSTDIN]: new Error('pagent.exe could not set mode for stdin'),\n    [RET_ERR_BINSTDOUT]: new Error('pagent.exe could not set mode for stdout'),\n    [RET_ERR_BADLEN]:\n      new Error('pagent.exe did not get expected input payload'),\n  };\n\n  function destroy(stream) {\n    stream.buffer = null;\n    if (stream.proc) {\n      stream.proc.kill();\n      stream.proc = undefined;\n    }\n  }\n\n  class PageantSocket extends Duplex {\n    constructor() {\n      super();\n      this.proc = undefined;\n      this.buffer = null;\n    }\n    _read(n) {}\n    _write(data, encoding, cb) {\n      if (this.buffer === null) {\n        this.buffer = data;\n      } else {\n        const newBuffer = Buffer.allocUnsafe(this.buffer.length + data.length);\n        this.buffer.copy(newBuffer, 0);\n        data.copy(newBuffer, this.buffer.length);\n        this.buffer = newBuffer;\n      }\n      // Wait for at least all length bytes\n      if (this.buffer.length < 4)\n        return cb();\n\n      const len = readUInt32BE(this.buffer, 0);\n      // Make sure we have a full message before querying pageant\n      if ((this.buffer.length - 4) < len)\n        return cb();\n\n      data = this.buffer.slice(0, 4 + len);\n      if (this.buffer.length > (4 + len))\n        return cb(new Error('Unexpected multiple agent requests'));\n      this.buffer = null;\n\n      let error;\n      const proc = this.proc = spawn(EXEPATH, [ data.length ]);\n      proc.stdout.on('data', (data) => {\n        this.push(data);\n      });\n      proc.on('error', (err) => {\n        error = err;\n        cb(error);\n      });\n      proc.on('close', (code) => {\n        this.proc = undefined;\n        if (!error) {\n          if (error = ERROR[code])\n            return cb(error);\n          cb();\n        }\n      });\n      proc.stdin.end(data);\n    }\n    _final(cb) {\n      destroy(this);\n      cb();\n    }\n    _destroy(err, cb) {\n      destroy(this);\n      cb();\n    }\n  }\n\n  return class PageantAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb(null, new PageantSocket());\n    }\n  };\n})();\n\nconst CygwinAgent = (() => {\n  const RE_CYGWIN_SOCK = /^!<socket >(\\d+) s ([A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8}-[A-Z0-9]{8})/;\n\n  return class CygwinAgent extends OpenSSHAgent {\n    getStream(cb) {\n      cb = once(cb);\n\n      // The cygwin ssh-agent connection process looks like this:\n      //   1. Read the \"socket\" as a file to get the underlying TCP port and a\n      //      special \"secret\" that must be sent to the TCP server.\n      //   2. Connect to the server listening on localhost at the TCP port.\n      //   3. Send the \"secret\" to the server.\n      //   4. The server sends back the same \"secret\".\n      //   5. Send three 32-bit integer values of zero. This is ordinarily the\n      //      pid, uid, and gid of this process, but cygwin will actually\n      //      send us the correct values as a response.\n      //   6. The server sends back the pid, uid, gid.\n      //   7. Disconnect.\n      //   8. Repeat steps 2-6, except send the received pid, uid, and gid in\n      //      step 5 instead of zeroes.\n      //   9. Connection is ready to be used.\n\n      let socketPath = this.socketPath;\n      let triedCygpath = false;\n      readFile(socketPath, function readCygsocket(err, data) {\n        if (err) {\n          if (triedCygpath)\n            return cb(new Error('Invalid cygwin unix socket path'));\n\n          // Try using `cygpath` to convert a possible *nix-style path to the\n          // real Windows path before giving up ...\n          execFile('cygpath', ['-w', socketPath], (err, stdout, stderr) => {\n            if (err || stdout.length === 0)\n              return cb(new Error('Invalid cygwin unix socket path'));\n\n            triedCygpath = true;\n            socketPath = stdout.toString().replace(/[\\r\\n]/g, '');\n            readFile(socketPath, readCygsocket);\n          });\n          return;\n        }\n\n        const m = RE_CYGWIN_SOCK.exec(data.toString('ascii'));\n        if (!m)\n          return cb(new Error('Malformed cygwin unix socket file'));\n\n        let state;\n        let bc = 0;\n        let isRetrying = false;\n        const inBuf = [];\n        let sock;\n\n        // Use 0 for pid, uid, and gid to ensure we get an error and also\n        // a valid uid and gid from cygwin so that we don't have to figure it\n        // out ourselves\n        let credsBuf = Buffer.alloc(12);\n\n        // Parse cygwin unix socket file contents\n        const port = parseInt(m[1], 10);\n        const secret = m[2].replace(/-/g, '');\n        const secretBuf = Buffer.allocUnsafe(16);\n        for (let i = 0, j = 0; j < 32; ++i, j += 2)\n          secretBuf[i] = parseInt(secret.substring(j, j + 2), 16);\n\n        // Convert to host order (always LE for Windows)\n        for (let i = 0; i < 16; i += 4)\n          writeUInt32LE(secretBuf, readUInt32BE(secretBuf, i), i);\n\n        tryConnect();\n\n        function _onconnect() {\n          bc = 0;\n          state = 'secret';\n          sock.write(secretBuf);\n        }\n\n        function _ondata(data) {\n          bc += data.length;\n\n          if (state === 'secret') {\n            // The secret we sent is echoed back to us by cygwin, not sure of\n            // the reason for that, but we ignore it nonetheless ...\n            if (bc === 16) {\n              bc = 0;\n              state = 'creds';\n              sock.write(credsBuf);\n            }\n            return;\n          }\n\n          if (state === 'creds') {\n            // If this is the first attempt, make sure to gather the valid\n            // uid and gid for our next attempt\n            if (!isRetrying)\n              inBuf.push(data);\n\n            if (bc === 12) {\n              sock.removeListener('connect', _onconnect);\n              sock.removeListener('data', _ondata);\n              sock.removeListener('error', onFail);\n              sock.removeListener('end', onFail);\n              sock.removeListener('close', onFail);\n\n              if (isRetrying)\n                return cb(null, sock);\n\n              isRetrying = true;\n              credsBuf = Buffer.concat(inBuf);\n              writeUInt32LE(credsBuf, process.pid, 0);\n              sock.on('error', () => {});\n              sock.destroy();\n\n              tryConnect();\n            }\n          }\n        }\n\n        function onFail() {\n          cb(new Error('Problem negotiating cygwin unix socket security'));\n        }\n\n        function tryConnect() {\n          sock = new Socket();\n          sock.on('connect', _onconnect);\n          sock.on('data', _ondata);\n          sock.on('error', onFail);\n          sock.on('end', onFail);\n          sock.on('close', onFail);\n          sock.connect(port);\n        }\n      });\n    }\n  };\n})();\n\n// Format of `//./pipe/ANYTHING`, with forward slashes and backward slashes\n// being interchangeable\nconst WINDOWS_PIPE_REGEX = /^[/\\\\][/\\\\]\\.[/\\\\]pipe[/\\\\].+/;\nfunction createAgent(path) {\n  if (process.platform === 'win32' && !WINDOWS_PIPE_REGEX.test(path)) {\n    return (path === 'pageant'\n            ? new PageantAgent()\n            : new CygwinAgent(path));\n  }\n  return new OpenSSHAgent(path);\n}\n\nconst AgentProtocol = (() => {\n  // Client->Server messages\n  const SSH_AGENTC_REQUEST_IDENTITIES = 11;\n  const SSH_AGENTC_SIGN_REQUEST = 13;\n  // const SSH_AGENTC_ADD_IDENTITY = 17;\n  // const SSH_AGENTC_REMOVE_IDENTITY = 18;\n  // const SSH_AGENTC_REMOVE_ALL_IDENTITIES = 19;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY = 20;\n  // const SSH_AGENTC_REMOVE_SMARTCARD_KEY = 21;\n  // const SSH_AGENTC_LOCK = 22;\n  // const SSH_AGENTC_UNLOCK = 23;\n  // const SSH_AGENTC_ADD_ID_CONSTRAINED = 25;\n  // const SSH_AGENTC_ADD_SMARTCARD_KEY_CONSTRAINED = 26;\n  // const SSH_AGENTC_EXTENSION = 27;\n  // Server->Client messages\n  const SSH_AGENT_FAILURE = 5;\n  // const SSH_AGENT_SUCCESS = 6;\n  const SSH_AGENT_IDENTITIES_ANSWER = 12;\n  const SSH_AGENT_SIGN_RESPONSE = 14;\n  // const SSH_AGENT_EXTENSION_FAILURE = 28;\n\n  // const SSH_AGENT_CONSTRAIN_LIFETIME = 1;\n  // const SSH_AGENT_CONSTRAIN_CONFIRM = 2;\n  // const SSH_AGENT_CONSTRAIN_EXTENSION = 255;\n\n  const SSH_AGENT_RSA_SHA2_256 = (1 << 1);\n  const SSH_AGENT_RSA_SHA2_512 = (1 << 2);\n\n  const ROLE_CLIENT = 0;\n  const ROLE_SERVER = 1;\n\n  // Ensures that responses get sent back in the same order the requests were\n  // received\n  function processResponses(protocol) {\n    let ret;\n    while (protocol[SYM_REQS].length) {\n      const nextResponse = protocol[SYM_REQS][0][SYM_RESP];\n      if (nextResponse === undefined)\n        break;\n\n      protocol[SYM_REQS].shift();\n      ret = protocol.push(nextResponse);\n    }\n    return ret;\n  }\n\n  const SYM_TYPE = Symbol('Inbound Request Type');\n  const SYM_RESP = Symbol('Inbound Request Response');\n  const SYM_CTX = Symbol('Inbound Request Context');\n  class AgentInboundRequest {\n    constructor(type, ctx) {\n      this[SYM_TYPE] = type;\n      this[SYM_RESP] = undefined;\n      this[SYM_CTX] = ctx;\n    }\n    hasResponded() {\n      return (this[SYM_RESP] !== undefined);\n    }\n    getType() {\n      return this[SYM_TYPE];\n    }\n    getContext() {\n      return this[SYM_CTX];\n    }\n  }\n  function respond(protocol, req, data) {\n    req[SYM_RESP] = data;\n    return processResponses(protocol);\n  }\n\n  function cleanup(protocol) {\n    protocol[SYM_BUFFER] = null;\n    if (protocol[SYM_MODE] === ROLE_CLIENT) {\n      const reqs = protocol[SYM_REQS];\n      if (reqs && reqs.length) {\n        protocol[SYM_REQS] = [];\n        for (const req of reqs)\n          req.cb(new Error('No reply from server'));\n      }\n    }\n\n    // Node streams hackery to make streams do the \"right thing\"\n    try {\n      protocol.end();\n    } catch {}\n    setImmediate(() => {\n      if (!protocol[SYM_ENDED])\n        protocol.emit('end');\n      if (!protocol[SYM_CLOSED])\n        protocol.emit('close');\n    });\n  }\n\n  function onClose() {\n    this[SYM_CLOSED] = true;\n  }\n\n  function onEnd() {\n    this[SYM_ENDED] = true;\n  }\n\n  const SYM_REQS = Symbol('Requests');\n  const SYM_MODE = Symbol('Agent Protocol Role');\n  const SYM_BUFFER = Symbol('Agent Protocol Buffer');\n  const SYM_MSGLEN = Symbol('Agent Protocol Current Message Length');\n  const SYM_CLOSED = Symbol('Agent Protocol Closed');\n  const SYM_ENDED = Symbol('Agent Protocol Ended');\n  // Implementation based on:\n  // https://tools.ietf.org/html/draft-miller-ssh-agent-04\n  return class AgentProtocol extends Duplex {\n    /*\n        Notes:\n          - `constraint` type consists of:\n               byte                    constraint_type\n               byte[]                  constraint_data\n            where `constraint_type` is one of:\n              * SSH_AGENT_CONSTRAIN_LIFETIME\n                - `constraint_data` consists of:\n                     uint32                  seconds\n              * SSH_AGENT_CONSTRAIN_CONFIRM\n                - `constraint_data` N/A\n              * SSH_AGENT_CONSTRAIN_EXTENSION\n                - `constraint_data` consists of:\n                     string                  extension name\n                     byte[]                  extension-specific details\n    */\n\n    constructor(isClient) {\n      super({ autoDestroy: true, emitClose: false });\n      this[SYM_MODE] = (isClient ? ROLE_CLIENT : ROLE_SERVER);\n      this[SYM_REQS] = [];\n      this[SYM_BUFFER] = null;\n      this[SYM_MSGLEN] = -1;\n      this.once('end', onEnd);\n      this.once('close', onClose);\n    }\n\n    _read(n) {}\n\n    _write(data, encoding, cb) {\n      /*\n          Messages are of the format:\n            uint32                    message length\n            byte                      message type\n            byte[message length - 1]  message contents\n      */\n      if (this[SYM_BUFFER] === null)\n        this[SYM_BUFFER] = data;\n      else\n        this[SYM_BUFFER] = concat(this[SYM_BUFFER], data);\n\n      let buffer = this[SYM_BUFFER];\n      let bufferLen = buffer.length;\n\n      let p = 0;\n      while (p < bufferLen) {\n        // Wait for length + type\n        if (bufferLen < 5)\n          break;\n\n        if (this[SYM_MSGLEN] === -1)\n          this[SYM_MSGLEN] = readUInt32BE(buffer, p);\n\n        // Check if we have the entire message\n        if (bufferLen < (4 + this[SYM_MSGLEN]))\n          break;\n\n        const msgType = buffer[p += 4];\n        ++p;\n\n        if (this[SYM_MODE] === ROLE_CLIENT) {\n          if (this[SYM_REQS].length === 0)\n            return cb(new Error('Received unexpected message from server'));\n\n          const req = this[SYM_REQS].shift();\n\n          switch (msgType) {\n            case SSH_AGENT_FAILURE:\n              req.cb(new Error('Agent responded with failure'));\n              break;\n            case SSH_AGENT_IDENTITIES_ANSWER: {\n              if (req.type !== SSH_AGENTC_REQUEST_IDENTITIES)\n                return cb(new Error('Agent responded with wrong message type'));\n\n              /*\n                 byte        SSH_AGENT_IDENTITIES_ANSWER\n                 uint32      nkeys\n\n                where `nkeys` is 0 or more of:\n                 string      key blob\n                 string      comment\n              */\n\n              binaryParser.init(buffer, p);\n\n              const numKeys = binaryParser.readUInt32BE();\n\n              if (numKeys === undefined) {\n                binaryParser.clear();\n                return cb(new Error('Malformed agent response'));\n              }\n\n              const keys = [];\n              for (let i = 0; i < numKeys; ++i) {\n                let pubKey = binaryParser.readString();\n                if (pubKey === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n\n                const comment = binaryParser.readString(true);\n                if (comment === undefined) {\n                  binaryParser.clear();\n                  return cb(new Error('Malformed agent response'));\n                }\n\n                pubKey = parseKey(pubKey);\n                // We continue parsing the packet if we encounter an error\n                // in case the error is due to the key being an unsupported\n                // type\n                if (pubKey instanceof Error)\n                  continue;\n\n                pubKey.comment = pubKey.comment || comment;\n\n                keys.push(pubKey);\n              }\n              p = binaryParser.pos();\n              binaryParser.clear();\n\n              req.cb(null, keys);\n              break;\n            }\n            case SSH_AGENT_SIGN_RESPONSE: {\n              if (req.type !== SSH_AGENTC_SIGN_REQUEST)\n                return cb(new Error('Agent responded with wrong message type'));\n\n              /*\n                 byte        SSH_AGENT_SIGN_RESPONSE\n                 string      signature\n              */\n\n              binaryParser.init(buffer, p);\n              let signature = binaryParser.readString();\n              p = binaryParser.pos();\n              binaryParser.clear();\n\n              if (signature === undefined)\n                return cb(new Error('Malformed agent response'));\n\n              // We strip the algorithm from OpenSSH's output and assume it's\n              // using the algorithm we specified. This makes it easier on\n              // custom Agent implementations so they don't have to construct\n              // the correct binary format for a (OpenSSH-style) signature.\n\n              // TODO: verify signature type based on key and options used\n              // during initial sign request\n              binaryParser.init(signature, 0);\n              binaryParser.readString(true);\n              signature = binaryParser.readString();\n              binaryParser.clear();\n\n              if (signature === undefined)\n                return cb(new Error('Malformed OpenSSH signature format'));\n\n              req.cb(null, signature);\n              break;\n            }\n            default:\n              return cb(\n                new Error('Agent responded with unsupported message type')\n              );\n          }\n        } else {\n          switch (msgType) {\n            case SSH_AGENTC_REQUEST_IDENTITIES: {\n              const req = new AgentInboundRequest(msgType);\n              this[SYM_REQS].push(req);\n              /*\n                byte        SSH_AGENTC_REQUEST_IDENTITIES\n              */\n              this.emit('identities', req);\n              break;\n            }\n            case SSH_AGENTC_SIGN_REQUEST: {\n              /*\n                byte        SSH_AGENTC_SIGN_REQUEST\n                string      key_blob\n                string      data\n                uint32      flags\n              */\n              binaryParser.init(buffer, p);\n              let pubKey = binaryParser.readString();\n              const data = binaryParser.readString();\n              const flagsVal = binaryParser.readUInt32BE();\n              p = binaryParser.pos();\n              binaryParser.clear();\n              if (flagsVal === undefined) {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                return this.failureReply(req);\n              }\n\n              pubKey = parseKey(pubKey);\n              if (pubKey instanceof Error) {\n                const req = new AgentInboundRequest(msgType);\n                this[SYM_REQS].push(req);\n                return this.failureReply(req);\n              }\n\n              const flags = {\n                hash: undefined,\n              };\n              let ctx;\n              if (pubKey.type === 'ssh-rsa') {\n                if (flagsVal & SSH_AGENT_RSA_SHA2_256) {\n                  ctx = 'rsa-sha2-256';\n                  flags.hash = 'sha256';\n                } else if (flagsVal & SSH_AGENT_RSA_SHA2_512) {\n                  ctx = 'rsa-sha2-512';\n                  flags.hash = 'sha512';\n                }\n              }\n              if (ctx === undefined)\n                ctx = pubKey.type;\n\n              const req = new AgentInboundRequest(msgType, ctx);\n              this[SYM_REQS].push(req);\n\n              this.emit('sign', req, pubKey, data, flags);\n              break;\n            }\n            default: {\n              const req = new AgentInboundRequest(msgType);\n              this[SYM_REQS].push(req);\n              this.failureReply(req);\n            }\n          }\n        }\n\n        // Get ready for next message\n        this[SYM_MSGLEN] = -1;\n        if (p === bufferLen) {\n          // Nothing left to process for now\n          this[SYM_BUFFER] = null;\n          break;\n        } else {\n          this[SYM_BUFFER] = buffer = buffer.slice(p);\n          bufferLen = buffer.length;\n          p = 0;\n        }\n      }\n\n      cb();\n    }\n\n    _destroy(err, cb) {\n      cleanup(this);\n      cb();\n    }\n\n    _final(cb) {\n      cleanup(this);\n      cb();\n    }\n\n    // Client->Server messages =================================================\n    sign(pubKey, data, options, cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT)\n        throw new Error('Client-only method called with server role');\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = undefined;\n      } else if (typeof options !== 'object' || options === null) {\n        options = undefined;\n      }\n\n      let flags = 0;\n\n      pubKey = parseKey(pubKey);\n      if (pubKey instanceof Error)\n        throw new Error('Invalid public key argument');\n\n      if (pubKey.type === 'ssh-rsa' && options) {\n        switch (options.hash) {\n          case 'sha256':\n            flags = SSH_AGENT_RSA_SHA2_256;\n            break;\n          case 'sha512':\n            flags = SSH_AGENT_RSA_SHA2_512;\n            break;\n        }\n      }\n      pubKey = pubKey.getPublicSSH();\n\n      /*\n        byte        SSH_AGENTC_SIGN_REQUEST\n        string      key_blob\n        string      data\n        uint32      flags\n      */\n      const type = SSH_AGENTC_SIGN_REQUEST;\n      const keyLen = pubKey.length;\n      const dataLen = data.length;\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + 4 + keyLen + 4 + dataLen + 4);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = type;\n\n      writeUInt32BE(buf, keyLen, ++p);\n      pubKey.copy(buf, p += 4);\n\n      writeUInt32BE(buf, dataLen, p += keyLen);\n      data.copy(buf, p += 4);\n\n      writeUInt32BE(buf, flags, p += dataLen);\n\n      if (typeof cb !== 'function')\n        cb = noop;\n\n      this[SYM_REQS].push({ type, cb });\n\n      return this.push(buf);\n    }\n    getIdentities(cb) {\n      if (this[SYM_MODE] !== ROLE_CLIENT)\n        throw new Error('Client-only method called with server role');\n\n      /*\n        byte        SSH_AGENTC_REQUEST_IDENTITIES\n      */\n      const type = SSH_AGENTC_REQUEST_IDENTITIES;\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = type;\n\n      if (typeof cb !== 'function')\n        cb = noop;\n\n      this[SYM_REQS].push({ type, cb });\n\n      return this.push(buf);\n    }\n\n    // Server->Client messages =================================================\n    failureReply(req) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_FAILURE;\n\n      return respond(this, req, buf);\n    }\n    getIdentitiesReply(req, keys) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      /*\n         byte        SSH_AGENT_IDENTITIES_ANSWER\n         uint32      nkeys\n\n        where `nkeys` is 0 or more of:\n         string      key blob\n         string      comment\n      */\n\n      if (req.getType() !== SSH_AGENTC_REQUEST_IDENTITIES)\n        throw new Error('Invalid response to request');\n\n      if (!Array.isArray(keys))\n        throw new Error('Keys argument must be an array');\n\n      let totalKeysLen = 4; // Include `nkeys` size\n\n      const newKeys = [];\n      for (let i = 0; i < keys.length; ++i) {\n        const entry = keys[i];\n        if (typeof entry !== 'object' || entry === null)\n          throw new Error(`Invalid key entry: ${entry}`);\n\n        let pubKey;\n        let comment;\n        if (isParsedKey(entry)) {\n          pubKey = entry;\n        } else if (isParsedKey(entry.pubKey)) {\n          pubKey = entry.pubKey;\n        } else {\n          if (typeof entry.pubKey !== 'object' || entry.pubKey === null)\n            continue;\n          ({ pubKey, comment } = entry.pubKey);\n          pubKey = parseKey(pubKey);\n          if (pubKey instanceof Error)\n            continue; // TODO: add debug output\n        }\n        comment = pubKey.comment || comment;\n        pubKey = pubKey.getPublicSSH();\n\n        totalKeysLen += 4 + pubKey.length;\n\n        if (comment && typeof comment === 'string')\n          comment = Buffer.from(comment);\n        else if (!Buffer.isBuffer(comment))\n          comment = EMPTY_BUF;\n\n        totalKeysLen += 4 + comment.length;\n\n        newKeys.push({ pubKey, comment });\n      }\n\n      let p = 0;\n      const buf = Buffer.allocUnsafe(4 + 1 + totalKeysLen);\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_IDENTITIES_ANSWER;\n\n      writeUInt32BE(buf, newKeys.length, ++p);\n      p += 4;\n      for (let i = 0; i < newKeys.length; ++i) {\n        const { pubKey, comment } = newKeys[i];\n\n        writeUInt32BE(buf, pubKey.length, p);\n        pubKey.copy(buf, p += 4);\n\n        writeUInt32BE(buf, comment.length, p += pubKey.length);\n        p += 4;\n        if (comment.length) {\n          comment.copy(buf, p);\n          p += comment.length;\n        }\n      }\n\n      return respond(this, req, buf);\n    }\n    signReply(req, signature) {\n      if (this[SYM_MODE] !== ROLE_SERVER)\n        throw new Error('Server-only method called with client role');\n\n      if (!(req instanceof AgentInboundRequest))\n        throw new Error('Wrong request argument');\n\n      if (req.hasResponded())\n        return true;\n\n      /*\n         byte        SSH_AGENT_SIGN_RESPONSE\n         string      signature\n      */\n\n      if (req.getType() !== SSH_AGENTC_SIGN_REQUEST)\n        throw new Error('Invalid response to request');\n\n      if (!Buffer.isBuffer(signature))\n        throw new Error('Signature argument must be a Buffer');\n\n      if (signature.length === 0)\n        throw new Error('Signature argument must be non-empty');\n\n      /*\n        OpenSSH agent signatures are encoded as:\n\n          string    signature format identifier (as specified by the\n                    public key/certificate format)\n          byte[n]   signature blob in format specific encoding.\n            - This is actually a `string` for: rsa, dss, ecdsa, and ed25519\n              types\n      */\n\n      let p = 0;\n      const sigFormat = req.getContext();\n      const sigFormatLen = Buffer.byteLength(sigFormat);\n      const buf = Buffer.allocUnsafe(\n        4 + 1 + 4 + 4 + sigFormatLen + 4 + signature.length\n      );\n\n      writeUInt32BE(buf, buf.length - 4, p);\n\n      buf[p += 4] = SSH_AGENT_SIGN_RESPONSE;\n\n      writeUInt32BE(buf, 4 + sigFormatLen + 4 + signature.length, ++p);\n      writeUInt32BE(buf, sigFormatLen, p += 4);\n      buf.utf8Write(sigFormat, p += 4, sigFormatLen);\n      writeUInt32BE(buf, signature.length, p += sigFormatLen);\n      signature.copy(buf, p += 4);\n\n      return respond(this, req, buf);\n    }\n  };\n})();\n\nconst SYM_AGENT = Symbol('Agent');\nconst SYM_AGENT_KEYS = Symbol('Agent Keys');\nconst SYM_AGENT_KEYS_IDX = Symbol('Agent Keys Index');\nconst SYM_AGENT_CBS = Symbol('Agent Init Callbacks');\nclass AgentContext {\n  constructor(agent) {\n    if (typeof agent === 'string')\n      agent = createAgent(agent);\n    else if (!isAgent(agent))\n      throw new Error('Invalid agent argument');\n    this[SYM_AGENT] = agent;\n    this[SYM_AGENT_KEYS] = null;\n    this[SYM_AGENT_KEYS_IDX] = -1;\n    this[SYM_AGENT_CBS] = null;\n  }\n  init(cb) {\n    if (typeof cb !== 'function')\n      cb = noop;\n\n    if (this[SYM_AGENT_KEYS] === null) {\n      if (this[SYM_AGENT_CBS] === null) {\n        this[SYM_AGENT_CBS] = [cb];\n\n        const doCbs = (...args) => {\n          process.nextTick(() => {\n            const cbs = this[SYM_AGENT_CBS];\n            this[SYM_AGENT_CBS] = null;\n            for (const cb of cbs)\n              cb(...args);\n          });\n        };\n\n        this[SYM_AGENT].getIdentities(once((err, keys) => {\n          if (err)\n            return doCbs(err);\n\n          if (!Array.isArray(keys)) {\n            return doCbs(new Error(\n              'Agent implementation failed to provide keys'\n            ));\n          }\n\n          const newKeys = [];\n          for (let key of keys) {\n            key = parseKey(key);\n            if (key instanceof Error) {\n              // TODO: add debug output\n              continue;\n            }\n            newKeys.push(key);\n          }\n\n          this[SYM_AGENT_KEYS] = newKeys;\n          this[SYM_AGENT_KEYS_IDX] = -1;\n          doCbs();\n        }));\n      } else {\n        this[SYM_AGENT_CBS].push(cb);\n      }\n    } else {\n      process.nextTick(cb);\n    }\n  }\n  nextKey() {\n    if (this[SYM_AGENT_KEYS] === null\n        || ++this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return false;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  currentKey() {\n    if (this[SYM_AGENT_KEYS] === null\n        || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return null;\n    }\n\n    return this[SYM_AGENT_KEYS][this[SYM_AGENT_KEYS_IDX]];\n  }\n  pos() {\n    if (this[SYM_AGENT_KEYS] === null\n        || this[SYM_AGENT_KEYS_IDX] >= this[SYM_AGENT_KEYS].length) {\n      return -1;\n    }\n\n    return this[SYM_AGENT_KEYS_IDX];\n  }\n  reset() {\n    this[SYM_AGENT_KEYS_IDX] = -1;\n  }\n\n  sign(...args) {\n    this[SYM_AGENT].sign(...args);\n  }\n}\n\nfunction isAgent(val) {\n  return (val instanceof BaseAgent);\n}\n\nmodule.exports = {\n  AgentContext,\n  AgentProtocol,\n  BaseAgent,\n  createAgent,\n  CygwinAgent,\n  isAgent,\n  OpenSSHAgent,\n  PageantAgent,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
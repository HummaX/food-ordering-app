{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst {\n  inspect\n} = require('util');\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = '';\n  let i = val.length;\n  const start = val[0] === '-' ? 1 : 0;\n  for (; i >= start + 4; i -= 3) res = `_${val.slice(i - 3, i)}${res}`;\n  return `${val.slice(0, i)}${res}`;\n}\nfunction oneOf(expected, thing) {\n  assert(typeof thing === 'string', '`thing` has to be of type string');\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    assert(len > 0, 'At least one expected value needs to be specified');\n    expected = expected.map(i => String(i));\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` + expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    }\n    return `of ${thing} ${expected[0]}`;\n  }\n  return `of ${thing} ${String(expected)}`;\n}\nexports.ERR_INTERNAL_ASSERTION = class ERR_INTERNAL_ASSERTION extends Error {\n  constructor(message) {\n    super();\n    Error.captureStackTrace(this, ERR_INTERNAL_ASSERTION);\n    const suffix = 'This is caused by either a bug in ssh2 ' + 'or incorrect usage of ssh2 internals.\\n' + 'Please open an issue with this stack trace at ' + 'https://github.com/mscdex/ssh2/issues\\n';\n    this.message = message === undefined ? suffix : `${message}\\n${suffix}`;\n  }\n};\nconst MAX_32BIT_INT = 2 ** 32;\nconst MAX_32BIT_BIGINT = (() => {\n  try {\n    return new Function('return 2n ** 32n')();\n  } catch {}\n})();\nexports.ERR_OUT_OF_RANGE = class ERR_OUT_OF_RANGE extends RangeError {\n  constructor(str, range, input, replaceDefaultBoolean) {\n    super();\n    Error.captureStackTrace(this, ERR_OUT_OF_RANGE);\n    assert(range, 'Missing \"range\" argument');\n    let msg = replaceDefaultBoolean ? str : `The value of \"${str}\" is out of range.`;\n    let received;\n    if (Number.isInteger(input) && Math.abs(input) > MAX_32BIT_INT) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === 'bigint') {\n      received = String(input);\n      if (input > MAX_32BIT_BIGINT || input < -MAX_32BIT_BIGINT) received = addNumericalSeparator(received);\n      received += 'n';\n    } else {\n      received = inspect(input);\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n    this.message = msg;\n  }\n};\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n    Error.captureStackTrace(this, ERR_INVALID_ARG_TYPE);\n    assert(typeof name === 'string', `'name' must be a string`);\n\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === 'string' && expected.startsWith('not ')) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n    let msg;\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n    } else {\n      const type = name.includes('.') ? 'property' : 'argument';\n      msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n    }\n    msg += `. Received type ${typeof actual}`;\n    this.message = msg;\n  }\n}\nexports.ERR_INVALID_ARG_TYPE = ERR_INVALID_ARG_TYPE;\nexports.validateNumber = function validateNumber(value, name) {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\n};","map":{"version":3,"names":["assert","require","inspect","addNumericalSeparator","val","res","i","length","start","slice","oneOf","expected","thing","Array","isArray","len","map","String","join","exports","ERR_INTERNAL_ASSERTION","Error","constructor","message","captureStackTrace","suffix","undefined","MAX_32BIT_INT","MAX_32BIT_BIGINT","Function","ERR_OUT_OF_RANGE","RangeError","str","range","input","replaceDefaultBoolean","msg","received","Number","isInteger","Math","abs","ERR_INVALID_ARG_TYPE","TypeError","name","actual","determiner","startsWith","replace","endsWith","type","includes","validateNumber","value"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/protocol/node-fs-compat.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst { inspect } = require('util');\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = '';\n  let i = val.length;\n  const start = val[0] === '-' ? 1 : 0;\n  for (; i >= start + 4; i -= 3)\n    res = `_${val.slice(i - 3, i)}${res}`;\n  return `${val.slice(0, i)}${res}`;\n}\n\nfunction oneOf(expected, thing) {\n  assert(typeof thing === 'string', '`thing` has to be of type string');\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    assert(len > 0, 'At least one expected value needs to be specified');\n    expected = expected.map((i) => String(i));\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or `\n              + expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    }\n    return `of ${thing} ${expected[0]}`;\n  }\n  return `of ${thing} ${String(expected)}`;\n}\n\n\nexports.ERR_INTERNAL_ASSERTION = class ERR_INTERNAL_ASSERTION extends Error {\n  constructor(message) {\n    super();\n    Error.captureStackTrace(this, ERR_INTERNAL_ASSERTION);\n\n    const suffix = 'This is caused by either a bug in ssh2 '\n                   + 'or incorrect usage of ssh2 internals.\\n'\n                   + 'Please open an issue with this stack trace at '\n                   + 'https://github.com/mscdex/ssh2/issues\\n';\n\n    this.message = (message === undefined ? suffix : `${message}\\n${suffix}`);\n  }\n};\n\nconst MAX_32BIT_INT = 2 ** 32;\nconst MAX_32BIT_BIGINT = (() => {\n  try {\n    return new Function('return 2n ** 32n')();\n  } catch {}\n})();\nexports.ERR_OUT_OF_RANGE = class ERR_OUT_OF_RANGE extends RangeError {\n  constructor(str, range, input, replaceDefaultBoolean) {\n    super();\n    Error.captureStackTrace(this, ERR_OUT_OF_RANGE);\n\n    assert(range, 'Missing \"range\" argument');\n    let msg = (replaceDefaultBoolean\n               ? str\n               : `The value of \"${str}\" is out of range.`);\n    let received;\n    if (Number.isInteger(input) && Math.abs(input) > MAX_32BIT_INT) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === 'bigint') {\n      received = String(input);\n      if (input > MAX_32BIT_BIGINT || input < -MAX_32BIT_BIGINT)\n        received = addNumericalSeparator(received);\n      received += 'n';\n    } else {\n      received = inspect(input);\n    }\n    msg += ` It must be ${range}. Received ${received}`;\n\n    this.message = msg;\n  }\n};\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, expected, actual) {\n    super();\n    Error.captureStackTrace(this, ERR_INVALID_ARG_TYPE);\n\n    assert(typeof name === 'string', `'name' must be a string`);\n\n    // determiner: 'must be' or 'must not be'\n    let determiner;\n    if (typeof expected === 'string' && expected.startsWith('not ')) {\n      determiner = 'must not be';\n      expected = expected.replace(/^not /, '');\n    } else {\n      determiner = 'must be';\n    }\n\n    let msg;\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n    } else {\n      const type = (name.includes('.') ? 'property' : 'argument');\n      msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n    }\n\n    msg += `. Received type ${typeof actual}`;\n\n    this.message = msg;\n  }\n}\nexports.ERR_INVALID_ARG_TYPE = ERR_INVALID_ARG_TYPE;\n\nexports.validateNumber = function validateNumber(value, name) {\n  if (typeof value !== 'number')\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
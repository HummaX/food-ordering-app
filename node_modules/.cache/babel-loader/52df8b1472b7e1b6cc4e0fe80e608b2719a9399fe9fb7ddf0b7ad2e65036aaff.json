{"ast":null,"code":"'use strict';\n\nconst {\n  createDiffieHellman,\n  createDiffieHellmanGroup,\n  createECDH,\n  createHash,\n  createPublicKey,\n  diffieHellman,\n  generateKeyPairSync,\n  randomFillSync\n} = require('crypto');\nconst {\n  Ber\n} = require('asn1');\nconst {\n  COMPAT,\n  curve25519Supported,\n  DEFAULT_KEX,\n  DEFAULT_SERVER_HOST_KEY,\n  DEFAULT_CIPHER,\n  DEFAULT_MAC,\n  DEFAULT_COMPRESSION,\n  DISCONNECT_REASON,\n  MESSAGE\n} = require('./constants.js');\nconst {\n  CIPHER_INFO,\n  createCipher,\n  createDecipher,\n  MAC_INFO\n} = require('./crypto.js');\nconst {\n  parseDERKey\n} = require('./keyParser.js');\nconst {\n  bufferFill,\n  bufferParser,\n  convertSignature,\n  doFatalError,\n  FastBuffer,\n  sigSSHToASN1,\n  writeUInt32BE\n} = require('./utils.js');\nconst {\n  PacketReader,\n  PacketWriter,\n  ZlibPacketReader,\n  ZlibPacketWriter\n} = require('./zlib.js');\nlet MESSAGE_HANDLERS;\nconst GEX_MIN_BITS = 2048; // RFC 8270\nconst GEX_MAX_BITS = 8192; // RFC 8270\n\nconst EMPTY_BUFFER = Buffer.alloc(0);\n\n// Client/Server\nfunction kexinit(self) {\n  /*\n    byte         SSH_MSG_KEXINIT\n    byte[16]     cookie (random bytes)\n    name-list    kex_algorithms\n    name-list    server_host_key_algorithms\n    name-list    encryption_algorithms_client_to_server\n    name-list    encryption_algorithms_server_to_client\n    name-list    mac_algorithms_client_to_server\n    name-list    mac_algorithms_server_to_client\n    name-list    compression_algorithms_client_to_server\n    name-list    compression_algorithms_server_to_client\n    name-list    languages_client_to_server\n    name-list    languages_server_to_client\n    boolean      first_kex_packet_follows\n    uint32       0 (reserved for future extension)\n  */\n\n  let payload;\n  if (self._compatFlags & COMPAT.BAD_DHGEX) {\n    const entry = self._offer.lists.kex;\n    let kex = entry.array;\n    let found = false;\n    for (let i = 0; i < kex.length; ++i) {\n      if (kex[i].includes('group-exchange')) {\n        if (!found) {\n          found = true;\n          // Copy array lazily\n          kex = kex.slice();\n        }\n        kex.splice(i--, 1);\n      }\n    }\n    if (found) {\n      let len = 1 + 16 + self._offer.totalSize + 1 + 4;\n      const newKexBuf = Buffer.from(kex.join(','));\n      len -= entry.buffer.length - newKexBuf.length;\n      const all = self._offer.lists.all;\n      const rest = new Uint8Array(all.buffer, all.byteOffset + 4 + entry.buffer.length, all.length - (4 + entry.buffer.length));\n      payload = Buffer.allocUnsafe(len);\n      writeUInt32BE(payload, newKexBuf.length, 17);\n      payload.set(newKexBuf, 17 + 4);\n      payload.set(rest, 17 + 4 + newKexBuf.length);\n    }\n  }\n  if (payload === undefined) {\n    payload = Buffer.allocUnsafe(1 + 16 + self._offer.totalSize + 1 + 4);\n    self._offer.copyAllTo(payload, 17);\n  }\n  self._debug && self._debug('Outbound: Sending KEXINIT');\n  payload[0] = MESSAGE.KEXINIT;\n  randomFillSync(payload, 1, 16);\n\n  // Zero-fill first_kex_packet_follows and reserved bytes\n  bufferFill(payload, 0, payload.length - 5);\n  self._kexinit = payload;\n\n  // Needed to correct the starting position in allocated \"packets\" when packets\n  // will be buffered due to active key exchange\n  self._packetRW.write.allocStart = 0;\n\n  // TODO: only create single buffer and set _kexinit as slice of packet instead\n  {\n    const p = self._packetRW.write.allocStartKEX;\n    const packet = self._packetRW.write.alloc(payload.length, true);\n    packet.set(payload, p);\n    self._cipher.encrypt(self._packetRW.write.finalize(packet, true));\n  }\n}\nfunction handleKexInit(self, payload) {\n  /*\n    byte         SSH_MSG_KEXINIT\n    byte[16]     cookie (random bytes)\n    name-list    kex_algorithms\n    name-list    server_host_key_algorithms\n    name-list    encryption_algorithms_client_to_server\n    name-list    encryption_algorithms_server_to_client\n    name-list    mac_algorithms_client_to_server\n    name-list    mac_algorithms_server_to_client\n    name-list    compression_algorithms_client_to_server\n    name-list    compression_algorithms_server_to_client\n    name-list    languages_client_to_server\n    name-list    languages_server_to_client\n    boolean      first_kex_packet_follows\n    uint32       0 (reserved for future extension)\n  */\n  const init = {\n    kex: undefined,\n    serverHostKey: undefined,\n    cs: {\n      cipher: undefined,\n      mac: undefined,\n      compress: undefined,\n      lang: undefined\n    },\n    sc: {\n      cipher: undefined,\n      mac: undefined,\n      compress: undefined,\n      lang: undefined\n    }\n  };\n  bufferParser.init(payload, 17);\n  if ((init.kex = bufferParser.readList()) === undefined || (init.serverHostKey = bufferParser.readList()) === undefined || (init.cs.cipher = bufferParser.readList()) === undefined || (init.sc.cipher = bufferParser.readList()) === undefined || (init.cs.mac = bufferParser.readList()) === undefined || (init.sc.mac = bufferParser.readList()) === undefined || (init.cs.compress = bufferParser.readList()) === undefined || (init.sc.compress = bufferParser.readList()) === undefined || (init.cs.lang = bufferParser.readList()) === undefined || (init.sc.lang = bufferParser.readList()) === undefined) {\n    bufferParser.clear();\n    return doFatalError(self, 'Received malformed KEXINIT', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  const pos = bufferParser.pos();\n  const firstFollows = pos < payload.length && payload[pos] === 1;\n  bufferParser.clear();\n  const local = self._offer;\n  const remote = init;\n  let localKex = local.lists.kex.array;\n  if (self._compatFlags & COMPAT.BAD_DHGEX) {\n    let found = false;\n    for (let i = 0; i < localKex.length; ++i) {\n      if (localKex[i].indexOf('group-exchange') !== -1) {\n        if (!found) {\n          found = true;\n          // Copy array lazily\n          localKex = localKex.slice();\n        }\n        localKex.splice(i--, 1);\n      }\n    }\n  }\n  let clientList;\n  let serverList;\n  let i;\n  const debug = self._debug;\n  debug && debug('Inbound: Handshake in progress');\n\n  // Key exchange method =======================================================\n  debug && debug(`Handshake: (local) KEX method: ${localKex}`);\n  debug && debug(`Handshake: (remote) KEX method: ${remote.kex}`);\n  if (self._server) {\n    serverList = localKex;\n    clientList = remote.kex;\n  } else {\n    serverList = remote.kex;\n    clientList = localKex;\n  }\n  // Check for agreeable key exchange algorithm\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching key exchange algorithm');\n    return doFatalError(self, 'Handshake failed: no matching key exchange algorithm', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.kex = clientList[i];\n  debug && debug(`Handshake: KEX algorithm: ${clientList[i]}`);\n  if (firstFollows && (!remote.kex.length || clientList[i] !== remote.kex[0])) {\n    // Ignore next inbound packet, it was a wrong first guess at KEX algorithm\n    self._skipNextInboundPacket = true;\n  }\n\n  // Server host key format ====================================================\n  const localSrvHostKey = local.lists.serverHostKey.array;\n  debug && debug(`Handshake: (local) Host key format: ${localSrvHostKey}`);\n  debug && debug(`Handshake: (remote) Host key format: ${remote.serverHostKey}`);\n  if (self._server) {\n    serverList = localSrvHostKey;\n    clientList = remote.serverHostKey;\n  } else {\n    serverList = remote.serverHostKey;\n    clientList = localSrvHostKey;\n  }\n  // Check for agreeable server host key format\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching host key format');\n    return doFatalError(self, 'Handshake failed: no matching host key format', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.serverHostKey = clientList[i];\n  debug && debug(`Handshake: Host key format: ${clientList[i]}`);\n\n  // Client->Server cipher =====================================================\n  const localCSCipher = local.lists.cs.cipher.array;\n  debug && debug(`Handshake: (local) C->S cipher: ${localCSCipher}`);\n  debug && debug(`Handshake: (remote) C->S cipher: ${remote.cs.cipher}`);\n  if (self._server) {\n    serverList = localCSCipher;\n    clientList = remote.cs.cipher;\n  } else {\n    serverList = remote.cs.cipher;\n    clientList = localCSCipher;\n  }\n  // Check for agreeable client->server cipher\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching C->S cipher');\n    return doFatalError(self, 'Handshake failed: no matching C->S cipher', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.cs.cipher = clientList[i];\n  debug && debug(`Handshake: C->S Cipher: ${clientList[i]}`);\n\n  // Server->Client cipher =====================================================\n  const localSCCipher = local.lists.sc.cipher.array;\n  debug && debug(`Handshake: (local) S->C cipher: ${localSCCipher}`);\n  debug && debug(`Handshake: (remote) S->C cipher: ${remote.sc.cipher}`);\n  if (self._server) {\n    serverList = localSCCipher;\n    clientList = remote.sc.cipher;\n  } else {\n    serverList = remote.sc.cipher;\n    clientList = localSCCipher;\n  }\n  // Check for agreeable server->client cipher\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching S->C cipher');\n    return doFatalError(self, 'Handshake failed: no matching S->C cipher', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.sc.cipher = clientList[i];\n  debug && debug(`Handshake: S->C cipher: ${clientList[i]}`);\n\n  // Client->Server MAC ========================================================\n  const localCSMAC = local.lists.cs.mac.array;\n  debug && debug(`Handshake: (local) C->S MAC: ${localCSMAC}`);\n  debug && debug(`Handshake: (remote) C->S MAC: ${remote.cs.mac}`);\n  if (CIPHER_INFO[init.cs.cipher].authLen > 0) {\n    init.cs.mac = '';\n    debug && debug('Handshake: C->S MAC: <implicit>');\n  } else {\n    if (self._server) {\n      serverList = localCSMAC;\n      clientList = remote.cs.mac;\n    } else {\n      serverList = remote.cs.mac;\n      clientList = localCSMAC;\n    }\n    // Check for agreeable client->server hmac algorithm\n    for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n    if (i === clientList.length) {\n      // No suitable match found!\n      debug && debug('Handshake: No matching C->S MAC');\n      return doFatalError(self, 'Handshake failed: no matching C->S MAC', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n    }\n    init.cs.mac = clientList[i];\n    debug && debug(`Handshake: C->S MAC: ${clientList[i]}`);\n  }\n\n  // Server->Client MAC ========================================================\n  const localSCMAC = local.lists.sc.mac.array;\n  debug && debug(`Handshake: (local) S->C MAC: ${localSCMAC}`);\n  debug && debug(`Handshake: (remote) S->C MAC: ${remote.sc.mac}`);\n  if (CIPHER_INFO[init.sc.cipher].authLen > 0) {\n    init.sc.mac = '';\n    debug && debug('Handshake: S->C MAC: <implicit>');\n  } else {\n    if (self._server) {\n      serverList = localSCMAC;\n      clientList = remote.sc.mac;\n    } else {\n      serverList = remote.sc.mac;\n      clientList = localSCMAC;\n    }\n    // Check for agreeable server->client hmac algorithm\n    for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n    if (i === clientList.length) {\n      // No suitable match found!\n      debug && debug('Handshake: No matching S->C MAC');\n      return doFatalError(self, 'Handshake failed: no matching S->C MAC', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n    }\n    init.sc.mac = clientList[i];\n    debug && debug(`Handshake: S->C MAC: ${clientList[i]}`);\n  }\n\n  // Client->Server compression ================================================\n  const localCSCompress = local.lists.cs.compress.array;\n  debug && debug(`Handshake: (local) C->S compression: ${localCSCompress}`);\n  debug && debug(`Handshake: (remote) C->S compression: ${remote.cs.compress}`);\n  if (self._server) {\n    serverList = localCSCompress;\n    clientList = remote.cs.compress;\n  } else {\n    serverList = remote.cs.compress;\n    clientList = localCSCompress;\n  }\n  // Check for agreeable client->server compression algorithm\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching C->S compression');\n    return doFatalError(self, 'Handshake failed: no matching C->S compression', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.cs.compress = clientList[i];\n  debug && debug(`Handshake: C->S compression: ${clientList[i]}`);\n\n  // Server->Client compression ================================================\n  const localSCCompress = local.lists.sc.compress.array;\n  debug && debug(`Handshake: (local) S->C compression: ${localSCCompress}`);\n  debug && debug(`Handshake: (remote) S->C compression: ${remote.sc.compress}`);\n  if (self._server) {\n    serverList = localSCCompress;\n    clientList = remote.sc.compress;\n  } else {\n    serverList = remote.sc.compress;\n    clientList = localSCCompress;\n  }\n  // Check for agreeable server->client compression algorithm\n  for (i = 0; i < clientList.length && serverList.indexOf(clientList[i]) === -1; ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching S->C compression');\n    return doFatalError(self, 'Handshake failed: no matching S->C compression', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n  }\n  init.sc.compress = clientList[i];\n  debug && debug(`Handshake: S->C compression: ${clientList[i]}`);\n  init.cs.lang = '';\n  init.sc.lang = '';\n\n  // XXX: hack -- find a better way to do this\n  if (self._kex) {\n    if (!self._kexinit) {\n      // We received a rekey request, but we haven't sent a KEXINIT in response\n      // yet\n      kexinit(self);\n    }\n    self._decipher._onPayload = onKEXPayload.bind(self, {\n      firstPacket: false\n    });\n  }\n  self._kex = createKeyExchange(init, self, payload);\n  self._kex.start();\n}\nconst createKeyExchange = (() => {\n  function convertToMpint(buf) {\n    let idx = 0;\n    let length = buf.length;\n    while (buf[idx] === 0x00) {\n      ++idx;\n      --length;\n    }\n    let newBuf;\n    if (buf[idx] & 0x80) {\n      newBuf = Buffer.allocUnsafe(1 + length);\n      newBuf[0] = 0;\n      buf.copy(newBuf, 1, idx);\n      buf = newBuf;\n    } else if (length !== buf.length) {\n      newBuf = Buffer.allocUnsafe(length);\n      buf.copy(newBuf, 0, idx);\n      buf = newBuf;\n    }\n    return buf;\n  }\n  class KeyExchange {\n    constructor(negotiated, protocol, remoteKexinit) {\n      this._protocol = protocol;\n      this.sessionID = protocol._kex ? protocol._kex.sessionID : undefined;\n      this.negotiated = negotiated;\n      this._step = 1;\n      this._public = null;\n      this._dh = null;\n      this._sentNEWKEYS = false;\n      this._receivedNEWKEYS = false;\n      this._finished = false;\n      this._hostVerified = false;\n\n      // Data needed for initializing cipher/decipher/etc.\n      this._kexinit = protocol._kexinit;\n      this._remoteKexinit = remoteKexinit;\n      this._identRaw = protocol._identRaw;\n      this._remoteIdentRaw = protocol._remoteIdentRaw;\n      this._hostKey = undefined;\n      this._dhData = undefined;\n      this._sig = undefined;\n    }\n    finish() {\n      if (this._finished) return false;\n      this._finished = true;\n      const isServer = this._protocol._server;\n      const negotiated = this.negotiated;\n      const pubKey = this.convertPublicKey(this._dhData);\n      let secret = this.computeSecret(this._dhData);\n      if (secret instanceof Error) {\n        secret.message = `Error while computing DH secret (${this.type}): ${secret.message}`;\n        secret.level = 'handshake';\n        return doFatalError(this._protocol, secret, DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n      }\n      const hash = createHash(this.hashName);\n      // V_C\n      hashString(hash, isServer ? this._remoteIdentRaw : this._identRaw);\n      // \"V_S\"\n      hashString(hash, isServer ? this._identRaw : this._remoteIdentRaw);\n      // \"I_C\"\n      hashString(hash, isServer ? this._remoteKexinit : this._kexinit);\n      // \"I_S\"\n      hashString(hash, isServer ? this._kexinit : this._remoteKexinit);\n      // \"K_S\"\n      const serverPublicHostKey = isServer ? this._hostKey.getPublicSSH() : this._hostKey;\n      hashString(hash, serverPublicHostKey);\n      if (this.type === 'groupex') {\n        // Group exchange-specific\n        const params = this.getDHParams();\n        const num = Buffer.allocUnsafe(4);\n        // min (uint32)\n        writeUInt32BE(num, this._minBits, 0);\n        hash.update(num);\n        // preferred (uint32)\n        writeUInt32BE(num, this._prefBits, 0);\n        hash.update(num);\n        // max (uint32)\n        writeUInt32BE(num, this._maxBits, 0);\n        hash.update(num);\n        // prime\n        hashString(hash, params.prime);\n        // generator\n        hashString(hash, params.generator);\n      }\n\n      // method-specific data sent by client\n      hashString(hash, isServer ? pubKey : this.getPublicKey());\n      // method-specific data sent by server\n      const serverPublicKey = isServer ? this.getPublicKey() : pubKey;\n      hashString(hash, serverPublicKey);\n      // shared secret (\"K\")\n      hashString(hash, secret);\n\n      // \"H\"\n      const exchangeHash = hash.digest();\n      if (!isServer) {\n        bufferParser.init(this._sig, 0);\n        const sigType = bufferParser.readString(true);\n        if (!sigType) {\n          return doFatalError(this._protocol, 'Malformed packet while reading signature', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n        if (sigType !== negotiated.serverHostKey) {\n          return doFatalError(this._protocol, `Wrong signature type: ${sigType}, ` + `expected: ${negotiated.serverHostKey}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n\n        // \"s\"\n        let sigValue = bufferParser.readString();\n        bufferParser.clear();\n        if (sigValue === undefined) {\n          return doFatalError(this._protocol, 'Malformed packet while reading signature', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n        if (!(sigValue = sigSSHToASN1(sigValue, sigType))) {\n          return doFatalError(this._protocol, 'Malformed signature', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n        let parsedHostKey;\n        {\n          bufferParser.init(this._hostKey, 0);\n          const name = bufferParser.readString(true);\n          const hostKey = this._hostKey.slice(bufferParser.pos());\n          bufferParser.clear();\n          parsedHostKey = parseDERKey(hostKey, name);\n          if (parsedHostKey instanceof Error) {\n            parsedHostKey.level = 'handshake';\n            return doFatalError(this._protocol, parsedHostKey, DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n        }\n        let hashAlgo;\n        // Check if we need to override the default hash algorithm\n        switch (this.negotiated.serverHostKey) {\n          case 'rsa-sha2-256':\n            hashAlgo = 'sha256';\n            break;\n          case 'rsa-sha2-512':\n            hashAlgo = 'sha512';\n            break;\n        }\n        this._protocol._debug && this._protocol._debug('Verifying signature ...');\n        const verified = parsedHostKey.verify(exchangeHash, sigValue, hashAlgo);\n        if (verified !== true) {\n          if (verified instanceof Error) {\n            this._protocol._debug && this._protocol._debug(`Signature verification failed: ${verified.stack}`);\n          } else {\n            this._protocol._debug && this._protocol._debug('Signature verification failed');\n          }\n          return doFatalError(this._protocol, 'Handshake failed: signature verification failed', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n        this._protocol._debug && this._protocol._debug('Verified signature');\n      } else {\n        // Server\n\n        let hashAlgo;\n        // Check if we need to override the default hash algorithm\n        switch (this.negotiated.serverHostKey) {\n          case 'rsa-sha2-256':\n            hashAlgo = 'sha256';\n            break;\n          case 'rsa-sha2-512':\n            hashAlgo = 'sha512';\n            break;\n        }\n        this._protocol._debug && this._protocol._debug('Generating signature ...');\n        let signature = this._hostKey.sign(exchangeHash, hashAlgo);\n        if (signature instanceof Error) {\n          return doFatalError(this._protocol, 'Handshake failed: signature generation failed for ' + `${this._hostKey.type} host key: ${signature.message}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n        signature = convertSignature(signature, this._hostKey.type);\n        if (signature === false) {\n          return doFatalError(this._protocol, 'Handshake failed: signature conversion failed for ' + `${this._hostKey.type} host key`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n        }\n\n        // Send KEX reply\n        /*\n          byte      SSH_MSG_KEXDH_REPLY\n                      / SSH_MSG_KEX_DH_GEX_REPLY\n                      / SSH_MSG_KEX_ECDH_REPLY\n          string    server public host key and certificates (K_S)\n          string    <method-specific data>\n          string    signature of H\n        */\n        const sigType = this.negotiated.serverHostKey;\n        const sigTypeLen = Buffer.byteLength(sigType);\n        const sigLen = 4 + sigTypeLen + 4 + signature.length;\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet = this._protocol._packetRW.write.alloc(1 + 4 + serverPublicHostKey.length + 4 + serverPublicKey.length + 4 + sigLen, true);\n        packet[p] = MESSAGE.KEXDH_REPLY;\n        writeUInt32BE(packet, serverPublicHostKey.length, ++p);\n        packet.set(serverPublicHostKey, p += 4);\n        writeUInt32BE(packet, serverPublicKey.length, p += serverPublicHostKey.length);\n        packet.set(serverPublicKey, p += 4);\n        writeUInt32BE(packet, sigLen, p += serverPublicKey.length);\n        writeUInt32BE(packet, sigTypeLen, p += 4);\n        packet.utf8Write(sigType, p += 4, sigTypeLen);\n        writeUInt32BE(packet, signature.length, p += sigTypeLen);\n        packet.set(signature, p += 4);\n        if (this._protocol._debug) {\n          let type;\n          switch (this.type) {\n            case 'group':\n              type = 'KEXDH_REPLY';\n              break;\n            case 'groupex':\n              type = 'KEXDH_GEX_REPLY';\n              break;\n            default:\n              type = 'KEXECDH_REPLY';\n          }\n          this._protocol._debug(`Outbound: Sending ${type}`);\n        }\n        this._protocol._cipher.encrypt(this._protocol._packetRW.write.finalize(packet, true));\n      }\n      trySendNEWKEYS(this);\n      const completeHandshake = () => {\n        if (!this.sessionID) this.sessionID = exchangeHash;\n        {\n          const newSecret = Buffer.allocUnsafe(4 + secret.length);\n          writeUInt32BE(newSecret, secret.length, 0);\n          newSecret.set(secret, 4);\n          secret = newSecret;\n        }\n\n        // Initialize new ciphers, deciphers, etc.\n\n        const csCipherInfo = CIPHER_INFO[negotiated.cs.cipher];\n        const scCipherInfo = CIPHER_INFO[negotiated.sc.cipher];\n        const csIV = generateKEXVal(csCipherInfo.ivLen, this.hashName, secret, exchangeHash, this.sessionID, 'A');\n        const scIV = generateKEXVal(scCipherInfo.ivLen, this.hashName, secret, exchangeHash, this.sessionID, 'B');\n        const csKey = generateKEXVal(csCipherInfo.keyLen, this.hashName, secret, exchangeHash, this.sessionID, 'C');\n        const scKey = generateKEXVal(scCipherInfo.keyLen, this.hashName, secret, exchangeHash, this.sessionID, 'D');\n        let csMacInfo;\n        let csMacKey;\n        if (!csCipherInfo.authLen) {\n          csMacInfo = MAC_INFO[negotiated.cs.mac];\n          csMacKey = generateKEXVal(csMacInfo.len, this.hashName, secret, exchangeHash, this.sessionID, 'E');\n        }\n        let scMacInfo;\n        let scMacKey;\n        if (!scCipherInfo.authLen) {\n          scMacInfo = MAC_INFO[negotiated.sc.mac];\n          scMacKey = generateKEXVal(scMacInfo.len, this.hashName, secret, exchangeHash, this.sessionID, 'F');\n        }\n        const config = {\n          inbound: {\n            onPayload: this._protocol._onPayload,\n            seqno: this._protocol._decipher.inSeqno,\n            decipherInfo: !isServer ? scCipherInfo : csCipherInfo,\n            decipherIV: !isServer ? scIV : csIV,\n            decipherKey: !isServer ? scKey : csKey,\n            macInfo: !isServer ? scMacInfo : csMacInfo,\n            macKey: !isServer ? scMacKey : csMacKey\n          },\n          outbound: {\n            onWrite: this._protocol._onWrite,\n            seqno: this._protocol._cipher.outSeqno,\n            cipherInfo: isServer ? scCipherInfo : csCipherInfo,\n            cipherIV: isServer ? scIV : csIV,\n            cipherKey: isServer ? scKey : csKey,\n            macInfo: isServer ? scMacInfo : csMacInfo,\n            macKey: isServer ? scMacKey : csMacKey\n          }\n        };\n        this._protocol._cipher && this._protocol._cipher.free();\n        this._protocol._decipher && this._protocol._decipher.free();\n        this._protocol._cipher = createCipher(config);\n        this._protocol._decipher = createDecipher(config);\n        const rw = {\n          read: undefined,\n          write: undefined\n        };\n        switch (negotiated.cs.compress) {\n          case 'zlib':\n            // starts immediately\n            if (isServer) rw.read = new ZlibPacketReader();else rw.write = new ZlibPacketWriter(this._protocol);\n            break;\n          case 'zlib@openssh.com':\n            // Starts after successful user authentication\n\n            if (this._protocol._authenticated) {\n              // If a rekey happens and this compression method is selected and\n              // we already authenticated successfully, we need to start\n              // immediately instead\n              if (isServer) rw.read = new ZlibPacketReader();else rw.write = new ZlibPacketWriter(this._protocol);\n              break;\n            }\n          // FALLTHROUGH\n          default:\n            // none -- never any compression/decompression\n\n            if (isServer) rw.read = new PacketReader();else rw.write = new PacketWriter(this._protocol);\n        }\n        switch (negotiated.sc.compress) {\n          case 'zlib':\n            // starts immediately\n            if (isServer) rw.write = new ZlibPacketWriter(this._protocol);else rw.read = new ZlibPacketReader();\n            break;\n          case 'zlib@openssh.com':\n            // Starts after successful user authentication\n\n            if (this._protocol._authenticated) {\n              // If a rekey happens and this compression method is selected and\n              // we already authenticated successfully, we need to start\n              // immediately instead\n              if (isServer) rw.write = new ZlibPacketWriter(this._protocol);else rw.read = new ZlibPacketReader();\n              break;\n            }\n          // FALLTHROUGH\n          default:\n            // none -- never any compression/decompression\n\n            if (isServer) rw.write = new PacketWriter(this._protocol);else rw.read = new PacketReader();\n        }\n        this._protocol._packetRW.read.cleanup();\n        this._protocol._packetRW.write.cleanup();\n        this._protocol._packetRW = rw;\n\n        // Cleanup/reset various state\n        this._public = null;\n        this._dh = null;\n        this._kexinit = this._protocol._kexinit = undefined;\n        this._remoteKexinit = undefined;\n        this._identRaw = undefined;\n        this._remoteIdentRaw = undefined;\n        this._hostKey = undefined;\n        this._dhData = undefined;\n        this._sig = undefined;\n        this._protocol._onHandshakeComplete(negotiated);\n        return false;\n      };\n      if (!isServer) return completeHandshake();\n      this.finish = completeHandshake;\n    }\n    start() {\n      if (!this._protocol._server) {\n        if (this._protocol._debug) {\n          let type;\n          switch (this.type) {\n            case 'group':\n              type = 'KEXDH_INIT';\n              break;\n            default:\n              type = 'KEXECDH_INIT';\n          }\n          this._protocol._debug(`Outbound: Sending ${type}`);\n        }\n        const pubKey = this.getPublicKey();\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet = this._protocol._packetRW.write.alloc(1 + 4 + pubKey.length, true);\n        packet[p] = MESSAGE.KEXDH_INIT;\n        writeUInt32BE(packet, pubKey.length, ++p);\n        packet.set(pubKey, p += 4);\n        this._protocol._cipher.encrypt(this._protocol._packetRW.write.finalize(packet, true));\n      }\n    }\n    getPublicKey() {\n      this.generateKeys();\n      const key = this._public;\n      if (key) return this.convertPublicKey(key);\n    }\n    convertPublicKey(key) {\n      let newKey;\n      let idx = 0;\n      let len = key.length;\n      while (key[idx] === 0x00) {\n        ++idx;\n        --len;\n      }\n      if (key[idx] & 0x80) {\n        newKey = Buffer.allocUnsafe(1 + len);\n        newKey[0] = 0;\n        key.copy(newKey, 1, idx);\n        return newKey;\n      }\n      if (len !== key.length) {\n        newKey = Buffer.allocUnsafe(len);\n        key.copy(newKey, 0, idx);\n        key = newKey;\n      }\n      return key;\n    }\n    computeSecret(otherPublicKey) {\n      this.generateKeys();\n      try {\n        return convertToMpint(this._dh.computeSecret(otherPublicKey));\n      } catch (ex) {\n        return ex;\n      }\n    }\n    parse(payload) {\n      const type = payload[0];\n      switch (this._step) {\n        case 1:\n          if (this._protocol._server) {\n            // Server\n            if (type !== MESSAGE.KEXDH_INIT) {\n              return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.KEXDH_INIT}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            this._protocol._debug && this._protocol._debug('Received DH Init');\n            /*\n              byte     SSH_MSG_KEXDH_INIT\n                         / SSH_MSG_KEX_ECDH_INIT\n              string   <method-specific data>\n            */\n            bufferParser.init(payload, 1);\n            const dhData = bufferParser.readString();\n            bufferParser.clear();\n            if (dhData === undefined) {\n              return doFatalError(this._protocol, 'Received malformed KEX*_INIT', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n\n            // Client public key\n            this._dhData = dhData;\n            let hostKey = this._protocol._hostKeys[this.negotiated.serverHostKey];\n            if (Array.isArray(hostKey)) hostKey = hostKey[0];\n            this._hostKey = hostKey;\n            this.finish();\n          } else {\n            // Client\n            if (type !== MESSAGE.KEXDH_REPLY) {\n              return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.KEXDH_REPLY}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            this._protocol._debug && this._protocol._debug('Received DH Reply');\n            /*\n              byte      SSH_MSG_KEXDH_REPLY\n                          / SSH_MSG_KEX_DH_GEX_REPLY\n                          / SSH_MSG_KEX_ECDH_REPLY\n              string    server public host key and certificates (K_S)\n              string    <method-specific data>\n              string    signature of H\n            */\n            bufferParser.init(payload, 1);\n            let hostPubKey;\n            let dhData;\n            let sig;\n            if ((hostPubKey = bufferParser.readString()) === undefined || (dhData = bufferParser.readString()) === undefined || (sig = bufferParser.readString()) === undefined) {\n              bufferParser.clear();\n              return doFatalError(this._protocol, 'Received malformed KEX*_REPLY', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            bufferParser.clear();\n\n            // Check that the host public key type matches what was negotiated\n            // during KEXINIT swap\n            bufferParser.init(hostPubKey, 0);\n            const hostPubKeyType = bufferParser.readString(true);\n            bufferParser.clear();\n            if (hostPubKeyType === undefined) {\n              return doFatalError(this._protocol, 'Received malformed host public key', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            if (hostPubKeyType !== this.negotiated.serverHostKey) {\n              // Check if we need to make an exception\n              switch (this.negotiated.serverHostKey) {\n                case 'rsa-sha2-256':\n                case 'rsa-sha2-512':\n                  if (hostPubKeyType === 'ssh-rsa') break;\n                // FALLTHROUGH\n                default:\n                  return doFatalError(this._protocol, 'Host key does not match negotiated type', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n              }\n            }\n            this._hostKey = hostPubKey;\n            this._dhData = dhData;\n            this._sig = sig;\n            let checked = false;\n            let ret;\n            if (this._protocol._hostVerifier === undefined) {\n              ret = true;\n              this._protocol._debug && this._protocol._debug('Host accepted by default (no verification)');\n            } else {\n              ret = this._protocol._hostVerifier(hostPubKey, permitted => {\n                if (checked) return;\n                checked = true;\n                if (permitted === false) {\n                  this._protocol._debug && this._protocol._debug('Host denied (verification failed)');\n                  return doFatalError(this._protocol, 'Host denied (verification failed)', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n                }\n                this._protocol._debug && this._protocol._debug('Host accepted (verified)');\n                this._hostVerified = true;\n                if (this._receivedNEWKEYS) this.finish();else trySendNEWKEYS(this);\n              });\n            }\n            if (ret === undefined) {\n              // Async host verification\n              ++this._step;\n              return;\n            }\n            checked = true;\n            if (ret === false) {\n              this._protocol._debug && this._protocol._debug('Host denied (verification failed)');\n              return doFatalError(this._protocol, 'Host denied (verification failed)', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            this._protocol._debug && this._protocol._debug('Host accepted (verified)');\n            this._hostVerified = true;\n            trySendNEWKEYS(this);\n          }\n          ++this._step;\n          break;\n        case 2:\n          if (type !== MESSAGE.NEWKEYS) {\n            return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.NEWKEYS}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n          this._protocol._debug && this._protocol._debug('Inbound: NEWKEYS');\n          this._receivedNEWKEYS = true;\n          ++this._step;\n          if (this._protocol._server || this._hostVerified) return this.finish();\n\n          // Signal to current decipher that we need to change to a new decipher\n          // for the next packet\n          return false;\n        default:\n          return doFatalError(this._protocol, `Received unexpected packet ${type} after NEWKEYS`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n      }\n    }\n  }\n  class Curve25519Exchange extends KeyExchange {\n    constructor(hashName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      super(...args);\n      this.type = '25519';\n      this.hashName = hashName;\n      this._keys = null;\n    }\n    generateKeys() {\n      if (!this._keys) this._keys = generateKeyPairSync('x25519');\n    }\n    getPublicKey() {\n      this.generateKeys();\n      const key = this._keys.publicKey.export({\n        type: 'spki',\n        format: 'der'\n      });\n      return key.slice(-32); // HACK: avoids parsing DER/BER header\n    }\n\n    convertPublicKey(key) {\n      let newKey;\n      let idx = 0;\n      let len = key.length;\n      while (key[idx] === 0x00) {\n        ++idx;\n        --len;\n      }\n      if (key.length === 32) return key;\n      if (len !== key.length) {\n        newKey = Buffer.allocUnsafe(len);\n        key.copy(newKey, 0, idx);\n        key = newKey;\n      }\n      return key;\n    }\n    computeSecret(otherPublicKey) {\n      this.generateKeys();\n      try {\n        const asnWriter = new Ber.Writer();\n        asnWriter.startSequence();\n        // algorithm\n        asnWriter.startSequence();\n        asnWriter.writeOID('1.3.101.110'); // id-X25519\n        asnWriter.endSequence();\n\n        // PublicKey\n        asnWriter.startSequence(Ber.BitString);\n        asnWriter.writeByte(0x00);\n        // XXX: hack to write a raw buffer without a tag -- yuck\n        asnWriter._ensure(otherPublicKey.length);\n        otherPublicKey.copy(asnWriter._buf, asnWriter._offset, 0, otherPublicKey.length);\n        asnWriter._offset += otherPublicKey.length;\n        asnWriter.endSequence();\n        asnWriter.endSequence();\n        return convertToMpint(diffieHellman({\n          privateKey: this._keys.privateKey,\n          publicKey: createPublicKey({\n            key: asnWriter.buffer,\n            type: 'spki',\n            format: 'der'\n          })\n        }));\n      } catch (ex) {\n        return ex;\n      }\n    }\n  }\n  class ECDHExchange extends KeyExchange {\n    constructor(curveName, hashName) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n      super(...args);\n      this.type = 'ecdh';\n      this.curveName = curveName;\n      this.hashName = hashName;\n    }\n    generateKeys() {\n      if (!this._dh) {\n        this._dh = createECDH(this.curveName);\n        this._public = this._dh.generateKeys();\n      }\n    }\n  }\n  class DHGroupExchange extends KeyExchange {\n    constructor(hashName) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n      super(...args);\n      this.type = 'groupex';\n      this.hashName = hashName;\n      this._prime = null;\n      this._generator = null;\n      this._minBits = GEX_MIN_BITS;\n      this._prefBits = dhEstimate(this.negotiated);\n      if (this._protocol._compatFlags & COMPAT.BUG_DHGEX_LARGE) this._prefBits = Math.min(this._prefBits, 4096);\n      this._maxBits = GEX_MAX_BITS;\n    }\n    start() {\n      if (this._protocol._server) return;\n      this._protocol._debug && this._protocol._debug('Outbound: Sending KEXDH_GEX_REQUEST');\n      let p = this._protocol._packetRW.write.allocStartKEX;\n      const packet = this._protocol._packetRW.write.alloc(1 + 4 + 4 + 4, true);\n      packet[p] = MESSAGE.KEXDH_GEX_REQUEST;\n      writeUInt32BE(packet, this._minBits, ++p);\n      writeUInt32BE(packet, this._prefBits, p += 4);\n      writeUInt32BE(packet, this._maxBits, p += 4);\n      this._protocol._cipher.encrypt(this._protocol._packetRW.write.finalize(packet, true));\n    }\n    generateKeys() {\n      if (!this._dh && this._prime && this._generator) {\n        this._dh = createDiffieHellman(this._prime, this._generator);\n        this._public = this._dh.generateKeys();\n      }\n    }\n    setDHParams(prime, generator) {\n      if (!Buffer.isBuffer(prime)) throw new Error('Invalid prime value');\n      if (!Buffer.isBuffer(generator)) throw new Error('Invalid generator value');\n      this._prime = prime;\n      this._generator = generator;\n    }\n    getDHParams() {\n      if (this._dh) {\n        return {\n          prime: convertToMpint(this._dh.getPrime()),\n          generator: convertToMpint(this._dh.getGenerator())\n        };\n      }\n    }\n    parse(payload) {\n      const type = payload[0];\n      switch (this._step) {\n        case 1:\n          if (this._protocol._server) {\n            if (type !== MESSAGE.KEXDH_GEX_REQUEST) {\n              return doFatalError(this._protocol, `Received packet ${type} instead of ` + MESSAGE.KEXDH_GEX_REQUEST, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            // TODO: allow user implementation to provide safe prime and\n            // generator on demand to support group exchange on server side\n            return doFatalError(this._protocol, 'Group exchange not implemented for server', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n          if (type !== MESSAGE.KEXDH_GEX_GROUP) {\n            return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_GROUP}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n          this._protocol._debug && this._protocol._debug('Received DH GEX Group');\n\n          /*\n            byte    SSH_MSG_KEX_DH_GEX_GROUP\n            mpint   p, safe prime\n            mpint   g, generator for subgroup in GF(p)\n          */\n          bufferParser.init(payload, 1);\n          let prime;\n          let gen;\n          if ((prime = bufferParser.readString()) === undefined || (gen = bufferParser.readString()) === undefined) {\n            bufferParser.clear();\n            return doFatalError(this._protocol, 'Received malformed KEXDH_GEX_GROUP', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n          bufferParser.clear();\n\n          // TODO: validate prime\n          this.setDHParams(prime, gen);\n          this.generateKeys();\n          const pubkey = this.getPublicKey();\n          this._protocol._debug && this._protocol._debug('Outbound: Sending KEXDH_GEX_INIT');\n          let p = this._protocol._packetRW.write.allocStartKEX;\n          const packet = this._protocol._packetRW.write.alloc(1 + 4 + pubkey.length, true);\n          packet[p] = MESSAGE.KEXDH_GEX_INIT;\n          writeUInt32BE(packet, pubkey.length, ++p);\n          packet.set(pubkey, p += 4);\n          this._protocol._cipher.encrypt(this._protocol._packetRW.write.finalize(packet, true));\n          ++this._step;\n          break;\n        case 2:\n          if (this._protocol._server) {\n            if (type !== MESSAGE.KEXDH_GEX_INIT) {\n              return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_INIT}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n            }\n            this._protocol._debug && this._protocol._debug('Received DH GEX Init');\n            return doFatalError(this._protocol, 'Group exchange not implemented for server', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          } else if (type !== MESSAGE.KEXDH_GEX_REPLY) {\n            return doFatalError(this._protocol, `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_REPLY}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n          }\n          this._protocol._debug && this._protocol._debug('Received DH GEX Reply');\n          this._step = 1;\n          payload[0] = MESSAGE.KEXDH_REPLY;\n          this.parse = KeyExchange.prototype.parse;\n          this.parse(payload);\n      }\n    }\n  }\n  class DHExchange extends KeyExchange {\n    constructor(groupName, hashName) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n        args[_key4 - 2] = arguments[_key4];\n      }\n      super(...args);\n      this.type = 'group';\n      this.groupName = groupName;\n      this.hashName = hashName;\n    }\n    start() {\n      if (!this._protocol._server) {\n        this._protocol._debug && this._protocol._debug('Outbound: Sending KEXDH_INIT');\n        const pubKey = this.getPublicKey();\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet = this._protocol._packetRW.write.alloc(1 + 4 + pubKey.length, true);\n        packet[p] = MESSAGE.KEXDH_INIT;\n        writeUInt32BE(packet, pubKey.length, ++p);\n        packet.set(pubKey, p += 4);\n        this._protocol._cipher.encrypt(this._protocol._packetRW.write.finalize(packet, true));\n      }\n    }\n    generateKeys() {\n      if (!this._dh) {\n        this._dh = createDiffieHellmanGroup(this.groupName);\n        this._public = this._dh.generateKeys();\n      }\n    }\n    getDHParams() {\n      if (this._dh) {\n        return {\n          prime: convertToMpint(this._dh.getPrime()),\n          generator: convertToMpint(this._dh.getGenerator())\n        };\n      }\n    }\n  }\n  return function (negotiated) {\n    for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      args[_key5 - 1] = arguments[_key5];\n    }\n    if (typeof negotiated !== 'object' || negotiated === null) throw new Error('Invalid negotiated argument');\n    const kexType = negotiated.kex;\n    if (typeof kexType === 'string') {\n      args = [negotiated, ...args];\n      switch (kexType) {\n        case 'curve25519-sha256':\n        case 'curve25519-sha256@libssh.org':\n          if (!curve25519Supported) break;\n          return new Curve25519Exchange('sha256', ...args);\n        case 'ecdh-sha2-nistp256':\n          return new ECDHExchange('prime256v1', 'sha256', ...args);\n        case 'ecdh-sha2-nistp384':\n          return new ECDHExchange('secp384r1', 'sha384', ...args);\n        case 'ecdh-sha2-nistp521':\n          return new ECDHExchange('secp521r1', 'sha512', ...args);\n        case 'diffie-hellman-group1-sha1':\n          return new DHExchange('modp2', 'sha1', ...args);\n        case 'diffie-hellman-group14-sha1':\n          return new DHExchange('modp14', 'sha1', ...args);\n        case 'diffie-hellman-group14-sha256':\n          return new DHExchange('modp14', 'sha256', ...args);\n        case 'diffie-hellman-group15-sha512':\n          return new DHExchange('modp15', 'sha512', ...args);\n        case 'diffie-hellman-group16-sha512':\n          return new DHExchange('modp16', 'sha512', ...args);\n        case 'diffie-hellman-group17-sha512':\n          return new DHExchange('modp17', 'sha512', ...args);\n        case 'diffie-hellman-group18-sha512':\n          return new DHExchange('modp18', 'sha512', ...args);\n        case 'diffie-hellman-group-exchange-sha1':\n          return new DHGroupExchange('sha1', ...args);\n        case 'diffie-hellman-group-exchange-sha256':\n          return new DHGroupExchange('sha256', ...args);\n      }\n      throw new Error(`Unsupported key exchange algorithm: ${kexType}`);\n    }\n    throw new Error(`Invalid key exchange type: ${kexType}`);\n  };\n})();\nconst KexInit = (() => {\n  const KEX_PROPERTY_NAMES = ['kex', 'serverHostKey', ['cs', 'cipher'], ['sc', 'cipher'], ['cs', 'mac'], ['sc', 'mac'], ['cs', 'compress'], ['sc', 'compress'], ['cs', 'lang'], ['sc', 'lang']];\n  return class KexInit {\n    constructor(obj) {\n      if (typeof obj !== 'object' || obj === null) throw new TypeError('Argument must be an object');\n      const lists = {\n        kex: undefined,\n        serverHostKey: undefined,\n        cs: {\n          cipher: undefined,\n          mac: undefined,\n          compress: undefined,\n          lang: undefined\n        },\n        sc: {\n          cipher: undefined,\n          mac: undefined,\n          compress: undefined,\n          lang: undefined\n        },\n        all: undefined\n      };\n      let totalSize = 0;\n      for (const prop of KEX_PROPERTY_NAMES) {\n        let base;\n        let val;\n        let desc;\n        let key;\n        if (typeof prop === 'string') {\n          base = lists;\n          val = obj[prop];\n          desc = key = prop;\n        } else {\n          const parent = prop[0];\n          base = lists[parent];\n          key = prop[1];\n          val = obj[parent][key];\n          desc = `${parent}.${key}`;\n        }\n        const entry = {\n          array: undefined,\n          buffer: undefined\n        };\n        if (Buffer.isBuffer(val)) {\n          entry.array = ('' + val).split(',');\n          entry.buffer = val;\n          totalSize += 4 + val.length;\n        } else {\n          if (typeof val === 'string') val = val.split(',');\n          if (Array.isArray(val)) {\n            entry.array = val;\n            entry.buffer = Buffer.from(val.join(','));\n          } else {\n            throw new TypeError(`Invalid \\`${desc}\\` type: ${typeof val}`);\n          }\n          totalSize += 4 + entry.buffer.length;\n        }\n        base[key] = entry;\n      }\n      const all = Buffer.allocUnsafe(totalSize);\n      lists.all = all;\n      let allPos = 0;\n      for (const prop of KEX_PROPERTY_NAMES) {\n        let data;\n        if (typeof prop === 'string') data = lists[prop].buffer;else data = lists[prop[0]][prop[1]].buffer;\n        allPos = writeUInt32BE(all, data.length, allPos);\n        all.set(data, allPos);\n        allPos += data.length;\n      }\n      this.totalSize = totalSize;\n      this.lists = lists;\n    }\n    copyAllTo(buf, offset) {\n      const src = this.lists.all;\n      if (typeof offset !== 'number') throw new TypeError(`Invalid offset value: ${typeof offset}`);\n      if (buf.length - offset < src.length) throw new Error('Insufficient space to copy list');\n      buf.set(src, offset);\n      return src.length;\n    }\n  };\n})();\nconst hashString = (() => {\n  const LEN = Buffer.allocUnsafe(4);\n  return (hash, buf) => {\n    writeUInt32BE(LEN, buf.length, 0);\n    hash.update(LEN);\n    hash.update(buf);\n  };\n})();\nfunction generateKEXVal(len, hashName, secret, exchangeHash, sessionID, char) {\n  let ret;\n  if (len) {\n    let digest = createHash(hashName).update(secret).update(exchangeHash).update(char).update(sessionID).digest();\n    while (digest.length < len) {\n      const chunk = createHash(hashName).update(secret).update(exchangeHash).update(digest).digest();\n      const extended = Buffer.allocUnsafe(digest.length + chunk.length);\n      extended.set(digest, 0);\n      extended.set(chunk, digest.length);\n      digest = extended;\n    }\n    if (digest.length === len) ret = digest;else ret = new FastBuffer(digest.buffer, digest.byteOffset, len);\n  } else {\n    ret = EMPTY_BUFFER;\n  }\n  return ret;\n}\nfunction onKEXPayload(state, payload) {\n  // XXX: move this to the Decipher implementations?\n  if (payload.length === 0) {\n    this._debug && this._debug('Inbound: Skipping empty packet payload');\n    return;\n  }\n  if (this._skipNextInboundPacket) {\n    this._skipNextInboundPacket = false;\n    return;\n  }\n  payload = this._packetRW.read.read(payload);\n  const type = payload[0];\n  switch (type) {\n    case MESSAGE.DISCONNECT:\n    case MESSAGE.IGNORE:\n    case MESSAGE.UNIMPLEMENTED:\n    case MESSAGE.DEBUG:\n      if (!MESSAGE_HANDLERS) MESSAGE_HANDLERS = require('./handlers.js');\n      return MESSAGE_HANDLERS[type](this, payload);\n    case MESSAGE.KEXINIT:\n      if (!state.firstPacket) {\n        return doFatalError(this, 'Received extra KEXINIT during handshake', 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n      }\n      state.firstPacket = false;\n      return handleKexInit(this, payload);\n    default:\n      if (type < 20 || type > 49) {\n        return doFatalError(this, `Received unexpected packet type ${type}`, 'handshake', DISCONNECT_REASON.KEY_EXCHANGE_FAILED);\n      }\n  }\n  return this._kex.parse(payload);\n}\nfunction dhEstimate(neg) {\n  const csCipher = CIPHER_INFO[neg.cs.cipher];\n  const scCipher = CIPHER_INFO[neg.sc.cipher];\n  // XXX: if OpenSSH's `umac-*` MACs are ever supported, their key lengths will\n  // also need to be considered when calculating `bits`\n  const bits = Math.max(0, csCipher.sslName === 'des-ede3-cbc' ? 14 : csCipher.keyLen, csCipher.blockLen, csCipher.ivLen, scCipher.sslName === 'des-ede3-cbc' ? 14 : scCipher.keyLen, scCipher.blockLen, scCipher.ivLen) * 8;\n  if (bits <= 112) return 2048;\n  if (bits <= 128) return 3072;\n  if (bits <= 192) return 7680;\n  return 8192;\n}\nfunction trySendNEWKEYS(kex) {\n  if (!kex._sentNEWKEYS) {\n    kex._protocol._debug && kex._protocol._debug('Outbound: Sending NEWKEYS');\n    const p = kex._protocol._packetRW.write.allocStartKEX;\n    const packet = kex._protocol._packetRW.write.alloc(1, true);\n    packet[p] = MESSAGE.NEWKEYS;\n    kex._protocol._cipher.encrypt(kex._protocol._packetRW.write.finalize(packet, true));\n    kex._sentNEWKEYS = true;\n  }\n}\nmodule.exports = {\n  KexInit,\n  kexinit,\n  onKEXPayload,\n  DEFAULT_KEXINIT: new KexInit({\n    kex: DEFAULT_KEX,\n    serverHostKey: DEFAULT_SERVER_HOST_KEY,\n    cs: {\n      cipher: DEFAULT_CIPHER,\n      mac: DEFAULT_MAC,\n      compress: DEFAULT_COMPRESSION,\n      lang: []\n    },\n    sc: {\n      cipher: DEFAULT_CIPHER,\n      mac: DEFAULT_MAC,\n      compress: DEFAULT_COMPRESSION,\n      lang: []\n    }\n  }),\n  HANDLERS: {\n    [MESSAGE.KEXINIT]: handleKexInit\n  }\n};","map":{"version":3,"names":["createDiffieHellman","createDiffieHellmanGroup","createECDH","createHash","createPublicKey","diffieHellman","generateKeyPairSync","randomFillSync","require","Ber","COMPAT","curve25519Supported","DEFAULT_KEX","DEFAULT_SERVER_HOST_KEY","DEFAULT_CIPHER","DEFAULT_MAC","DEFAULT_COMPRESSION","DISCONNECT_REASON","MESSAGE","CIPHER_INFO","createCipher","createDecipher","MAC_INFO","parseDERKey","bufferFill","bufferParser","convertSignature","doFatalError","FastBuffer","sigSSHToASN1","writeUInt32BE","PacketReader","PacketWriter","ZlibPacketReader","ZlibPacketWriter","MESSAGE_HANDLERS","GEX_MIN_BITS","GEX_MAX_BITS","EMPTY_BUFFER","Buffer","alloc","kexinit","self","payload","_compatFlags","BAD_DHGEX","entry","_offer","lists","kex","array","found","i","length","includes","slice","splice","len","totalSize","newKexBuf","from","join","buffer","all","rest","Uint8Array","byteOffset","allocUnsafe","set","undefined","copyAllTo","_debug","KEXINIT","_kexinit","_packetRW","write","allocStart","p","allocStartKEX","packet","_cipher","encrypt","finalize","handleKexInit","init","serverHostKey","cs","cipher","mac","compress","lang","sc","readList","clear","KEY_EXCHANGE_FAILED","pos","firstFollows","local","remote","localKex","indexOf","clientList","serverList","debug","_server","_skipNextInboundPacket","localSrvHostKey","localCSCipher","localSCCipher","localCSMAC","authLen","localSCMAC","localCSCompress","localSCCompress","_kex","_decipher","_onPayload","onKEXPayload","bind","firstPacket","createKeyExchange","start","convertToMpint","buf","idx","newBuf","copy","KeyExchange","constructor","negotiated","protocol","remoteKexinit","_protocol","sessionID","_step","_public","_dh","_sentNEWKEYS","_receivedNEWKEYS","_finished","_hostVerified","_remoteKexinit","_identRaw","_remoteIdentRaw","_hostKey","_dhData","_sig","finish","isServer","pubKey","convertPublicKey","secret","computeSecret","Error","message","type","level","hash","hashName","hashString","serverPublicHostKey","getPublicSSH","params","getDHParams","num","_minBits","update","_prefBits","_maxBits","prime","generator","getPublicKey","serverPublicKey","exchangeHash","digest","sigType","readString","sigValue","parsedHostKey","name","hostKey","hashAlgo","verified","verify","stack","signature","sign","sigTypeLen","byteLength","sigLen","KEXDH_REPLY","utf8Write","trySendNEWKEYS","completeHandshake","newSecret","csCipherInfo","scCipherInfo","csIV","generateKEXVal","ivLen","scIV","csKey","keyLen","scKey","csMacInfo","csMacKey","scMacInfo","scMacKey","config","inbound","onPayload","seqno","inSeqno","decipherInfo","decipherIV","decipherKey","macInfo","macKey","outbound","onWrite","_onWrite","outSeqno","cipherInfo","cipherIV","cipherKey","free","rw","read","_authenticated","cleanup","_onHandshakeComplete","KEXDH_INIT","generateKeys","key","newKey","otherPublicKey","ex","parse","dhData","_hostKeys","Array","isArray","hostPubKey","sig","hostPubKeyType","checked","ret","_hostVerifier","permitted","NEWKEYS","Curve25519Exchange","_len","arguments","args","_key","_keys","publicKey","export","format","asnWriter","Writer","startSequence","writeOID","endSequence","BitString","writeByte","_ensure","_buf","_offset","privateKey","ECDHExchange","curveName","_len2","_key2","DHGroupExchange","_len3","_key3","_prime","_generator","dhEstimate","BUG_DHGEX_LARGE","Math","min","KEXDH_GEX_REQUEST","setDHParams","isBuffer","getPrime","getGenerator","KEXDH_GEX_GROUP","gen","pubkey","KEXDH_GEX_INIT","KEXDH_GEX_REPLY","prototype","DHExchange","groupName","_len4","_key4","_len5","_key5","kexType","KexInit","KEX_PROPERTY_NAMES","obj","TypeError","prop","base","val","desc","parent","split","allPos","data","offset","src","LEN","char","chunk","extended","state","DISCONNECT","IGNORE","UNIMPLEMENTED","DEBUG","neg","csCipher","scCipher","bits","max","sslName","blockLen","module","exports","DEFAULT_KEXINIT","HANDLERS"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/protocol/kex.js"],"sourcesContent":["'use strict';\n\nconst {\n  createDiffieHellman,\n  createDiffieHellmanGroup,\n  createECDH,\n  createHash,\n  createPublicKey,\n  diffieHellman,\n  generateKeyPairSync,\n  randomFillSync,\n} = require('crypto');\n\nconst { Ber } = require('asn1');\n\nconst {\n  COMPAT,\n  curve25519Supported,\n  DEFAULT_KEX,\n  DEFAULT_SERVER_HOST_KEY,\n  DEFAULT_CIPHER,\n  DEFAULT_MAC,\n  DEFAULT_COMPRESSION,\n  DISCONNECT_REASON,\n  MESSAGE,\n} = require('./constants.js');\nconst {\n  CIPHER_INFO,\n  createCipher,\n  createDecipher,\n  MAC_INFO,\n} = require('./crypto.js');\nconst { parseDERKey } = require('./keyParser.js');\nconst {\n  bufferFill,\n  bufferParser,\n  convertSignature,\n  doFatalError,\n  FastBuffer,\n  sigSSHToASN1,\n  writeUInt32BE,\n} = require('./utils.js');\nconst {\n  PacketReader,\n  PacketWriter,\n  ZlibPacketReader,\n  ZlibPacketWriter,\n} = require('./zlib.js');\n\nlet MESSAGE_HANDLERS;\n\nconst GEX_MIN_BITS = 2048; // RFC 8270\nconst GEX_MAX_BITS = 8192; // RFC 8270\n\nconst EMPTY_BUFFER = Buffer.alloc(0);\n\n// Client/Server\nfunction kexinit(self) {\n  /*\n    byte         SSH_MSG_KEXINIT\n    byte[16]     cookie (random bytes)\n    name-list    kex_algorithms\n    name-list    server_host_key_algorithms\n    name-list    encryption_algorithms_client_to_server\n    name-list    encryption_algorithms_server_to_client\n    name-list    mac_algorithms_client_to_server\n    name-list    mac_algorithms_server_to_client\n    name-list    compression_algorithms_client_to_server\n    name-list    compression_algorithms_server_to_client\n    name-list    languages_client_to_server\n    name-list    languages_server_to_client\n    boolean      first_kex_packet_follows\n    uint32       0 (reserved for future extension)\n  */\n\n  let payload;\n  if (self._compatFlags & COMPAT.BAD_DHGEX) {\n    const entry = self._offer.lists.kex;\n    let kex = entry.array;\n    let found = false;\n    for (let i = 0; i < kex.length; ++i) {\n      if (kex[i].includes('group-exchange')) {\n        if (!found) {\n          found = true;\n          // Copy array lazily\n          kex = kex.slice();\n        }\n        kex.splice(i--, 1);\n      }\n    }\n    if (found) {\n      let len = 1 + 16 + self._offer.totalSize + 1 + 4;\n      const newKexBuf = Buffer.from(kex.join(','));\n      len -= (entry.buffer.length - newKexBuf.length);\n\n      const all = self._offer.lists.all;\n      const rest = new Uint8Array(\n        all.buffer,\n        all.byteOffset + 4 + entry.buffer.length,\n        all.length - (4 + entry.buffer.length)\n      );\n\n      payload = Buffer.allocUnsafe(len);\n      writeUInt32BE(payload, newKexBuf.length, 17);\n      payload.set(newKexBuf, 17 + 4);\n      payload.set(rest, 17 + 4 + newKexBuf.length);\n    }\n  }\n\n  if (payload === undefined) {\n    payload = Buffer.allocUnsafe(1 + 16 + self._offer.totalSize + 1 + 4);\n    self._offer.copyAllTo(payload, 17);\n  }\n\n  self._debug && self._debug('Outbound: Sending KEXINIT');\n\n  payload[0] = MESSAGE.KEXINIT;\n  randomFillSync(payload, 1, 16);\n\n  // Zero-fill first_kex_packet_follows and reserved bytes\n  bufferFill(payload, 0, payload.length - 5);\n\n  self._kexinit = payload;\n\n  // Needed to correct the starting position in allocated \"packets\" when packets\n  // will be buffered due to active key exchange\n  self._packetRW.write.allocStart = 0;\n\n  // TODO: only create single buffer and set _kexinit as slice of packet instead\n  {\n    const p = self._packetRW.write.allocStartKEX;\n    const packet = self._packetRW.write.alloc(payload.length, true);\n    packet.set(payload, p);\n    self._cipher.encrypt(self._packetRW.write.finalize(packet, true));\n  }\n}\n\nfunction handleKexInit(self, payload) {\n  /*\n    byte         SSH_MSG_KEXINIT\n    byte[16]     cookie (random bytes)\n    name-list    kex_algorithms\n    name-list    server_host_key_algorithms\n    name-list    encryption_algorithms_client_to_server\n    name-list    encryption_algorithms_server_to_client\n    name-list    mac_algorithms_client_to_server\n    name-list    mac_algorithms_server_to_client\n    name-list    compression_algorithms_client_to_server\n    name-list    compression_algorithms_server_to_client\n    name-list    languages_client_to_server\n    name-list    languages_server_to_client\n    boolean      first_kex_packet_follows\n    uint32       0 (reserved for future extension)\n  */\n  const init = {\n    kex: undefined,\n    serverHostKey: undefined,\n    cs: {\n      cipher: undefined,\n      mac: undefined,\n      compress: undefined,\n      lang: undefined,\n    },\n    sc: {\n      cipher: undefined,\n      mac: undefined,\n      compress: undefined,\n      lang: undefined,\n    },\n  };\n\n  bufferParser.init(payload, 17);\n\n  if ((init.kex = bufferParser.readList()) === undefined\n      || (init.serverHostKey = bufferParser.readList()) === undefined\n      || (init.cs.cipher = bufferParser.readList()) === undefined\n      || (init.sc.cipher = bufferParser.readList()) === undefined\n      || (init.cs.mac = bufferParser.readList()) === undefined\n      || (init.sc.mac = bufferParser.readList()) === undefined\n      || (init.cs.compress = bufferParser.readList()) === undefined\n      || (init.sc.compress = bufferParser.readList()) === undefined\n      || (init.cs.lang = bufferParser.readList()) === undefined\n      || (init.sc.lang = bufferParser.readList()) === undefined) {\n    bufferParser.clear();\n    return doFatalError(\n      self,\n      'Received malformed KEXINIT',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n\n  const pos = bufferParser.pos();\n  const firstFollows = (pos < payload.length && payload[pos] === 1);\n  bufferParser.clear();\n\n  const local = self._offer;\n  const remote = init;\n\n  let localKex = local.lists.kex.array;\n  if (self._compatFlags & COMPAT.BAD_DHGEX) {\n    let found = false;\n    for (let i = 0; i < localKex.length; ++i) {\n      if (localKex[i].indexOf('group-exchange') !== -1) {\n        if (!found) {\n          found = true;\n          // Copy array lazily\n          localKex = localKex.slice();\n        }\n        localKex.splice(i--, 1);\n      }\n    }\n  }\n\n  let clientList;\n  let serverList;\n  let i;\n  const debug = self._debug;\n\n  debug && debug('Inbound: Handshake in progress');\n\n  // Key exchange method =======================================================\n  debug && debug(`Handshake: (local) KEX method: ${localKex}`);\n  debug && debug(`Handshake: (remote) KEX method: ${remote.kex}`);\n  if (self._server) {\n    serverList = localKex;\n    clientList = remote.kex;\n  } else {\n    serverList = remote.kex;\n    clientList = localKex;\n  }\n  // Check for agreeable key exchange algorithm\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching key exchange algorithm');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching key exchange algorithm',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.kex = clientList[i];\n  debug && debug(`Handshake: KEX algorithm: ${clientList[i]}`);\n  if (firstFollows && (!remote.kex.length || clientList[i] !== remote.kex[0])) {\n    // Ignore next inbound packet, it was a wrong first guess at KEX algorithm\n    self._skipNextInboundPacket = true;\n  }\n\n\n  // Server host key format ====================================================\n  const localSrvHostKey = local.lists.serverHostKey.array;\n  debug && debug(`Handshake: (local) Host key format: ${localSrvHostKey}`);\n  debug && debug(\n    `Handshake: (remote) Host key format: ${remote.serverHostKey}`\n  );\n  if (self._server) {\n    serverList = localSrvHostKey;\n    clientList = remote.serverHostKey;\n  } else {\n    serverList = remote.serverHostKey;\n    clientList = localSrvHostKey;\n  }\n  // Check for agreeable server host key format\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching host key format');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching host key format',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.serverHostKey = clientList[i];\n  debug && debug(`Handshake: Host key format: ${clientList[i]}`);\n\n\n  // Client->Server cipher =====================================================\n  const localCSCipher = local.lists.cs.cipher.array;\n  debug && debug(`Handshake: (local) C->S cipher: ${localCSCipher}`);\n  debug && debug(`Handshake: (remote) C->S cipher: ${remote.cs.cipher}`);\n  if (self._server) {\n    serverList = localCSCipher;\n    clientList = remote.cs.cipher;\n  } else {\n    serverList = remote.cs.cipher;\n    clientList = localCSCipher;\n  }\n  // Check for agreeable client->server cipher\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching C->S cipher');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching C->S cipher',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.cs.cipher = clientList[i];\n  debug && debug(`Handshake: C->S Cipher: ${clientList[i]}`);\n\n\n  // Server->Client cipher =====================================================\n  const localSCCipher = local.lists.sc.cipher.array;\n  debug && debug(`Handshake: (local) S->C cipher: ${localSCCipher}`);\n  debug && debug(`Handshake: (remote) S->C cipher: ${remote.sc.cipher}`);\n  if (self._server) {\n    serverList = localSCCipher;\n    clientList = remote.sc.cipher;\n  } else {\n    serverList = remote.sc.cipher;\n    clientList = localSCCipher;\n  }\n  // Check for agreeable server->client cipher\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching S->C cipher');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching S->C cipher',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.sc.cipher = clientList[i];\n  debug && debug(`Handshake: S->C cipher: ${clientList[i]}`);\n\n\n  // Client->Server MAC ========================================================\n  const localCSMAC = local.lists.cs.mac.array;\n  debug && debug(`Handshake: (local) C->S MAC: ${localCSMAC}`);\n  debug && debug(`Handshake: (remote) C->S MAC: ${remote.cs.mac}`);\n  if (CIPHER_INFO[init.cs.cipher].authLen > 0) {\n    init.cs.mac = '';\n    debug && debug('Handshake: C->S MAC: <implicit>');\n  } else {\n    if (self._server) {\n      serverList = localCSMAC;\n      clientList = remote.cs.mac;\n    } else {\n      serverList = remote.cs.mac;\n      clientList = localCSMAC;\n    }\n    // Check for agreeable client->server hmac algorithm\n    for (i = 0;\n         i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n         ++i);\n    if (i === clientList.length) {\n      // No suitable match found!\n      debug && debug('Handshake: No matching C->S MAC');\n      return doFatalError(\n        self,\n        'Handshake failed: no matching C->S MAC',\n        'handshake',\n        DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n      );\n    }\n    init.cs.mac = clientList[i];\n    debug && debug(`Handshake: C->S MAC: ${clientList[i]}`);\n  }\n\n\n  // Server->Client MAC ========================================================\n  const localSCMAC = local.lists.sc.mac.array;\n  debug && debug(`Handshake: (local) S->C MAC: ${localSCMAC}`);\n  debug && debug(`Handshake: (remote) S->C MAC: ${remote.sc.mac}`);\n  if (CIPHER_INFO[init.sc.cipher].authLen > 0) {\n    init.sc.mac = '';\n    debug && debug('Handshake: S->C MAC: <implicit>');\n  } else {\n    if (self._server) {\n      serverList = localSCMAC;\n      clientList = remote.sc.mac;\n    } else {\n      serverList = remote.sc.mac;\n      clientList = localSCMAC;\n    }\n    // Check for agreeable server->client hmac algorithm\n    for (i = 0;\n         i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n         ++i);\n    if (i === clientList.length) {\n      // No suitable match found!\n      debug && debug('Handshake: No matching S->C MAC');\n      return doFatalError(\n        self,\n        'Handshake failed: no matching S->C MAC',\n        'handshake',\n        DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n      );\n    }\n    init.sc.mac = clientList[i];\n    debug && debug(`Handshake: S->C MAC: ${clientList[i]}`);\n  }\n\n\n  // Client->Server compression ================================================\n  const localCSCompress = local.lists.cs.compress.array;\n  debug && debug(`Handshake: (local) C->S compression: ${localCSCompress}`);\n  debug && debug(`Handshake: (remote) C->S compression: ${remote.cs.compress}`);\n  if (self._server) {\n    serverList = localCSCompress;\n    clientList = remote.cs.compress;\n  } else {\n    serverList = remote.cs.compress;\n    clientList = localCSCompress;\n  }\n  // Check for agreeable client->server compression algorithm\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching C->S compression');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching C->S compression',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.cs.compress = clientList[i];\n  debug && debug(`Handshake: C->S compression: ${clientList[i]}`);\n\n\n  // Server->Client compression ================================================\n  const localSCCompress = local.lists.sc.compress.array;\n  debug && debug(`Handshake: (local) S->C compression: ${localSCCompress}`);\n  debug && debug(`Handshake: (remote) S->C compression: ${remote.sc.compress}`);\n  if (self._server) {\n    serverList = localSCCompress;\n    clientList = remote.sc.compress;\n  } else {\n    serverList = remote.sc.compress;\n    clientList = localSCCompress;\n  }\n  // Check for agreeable server->client compression algorithm\n  for (i = 0;\n       i < clientList.length && serverList.indexOf(clientList[i]) === -1;\n       ++i);\n  if (i === clientList.length) {\n    // No suitable match found!\n    debug && debug('Handshake: No matching S->C compression');\n    return doFatalError(\n      self,\n      'Handshake failed: no matching S->C compression',\n      'handshake',\n      DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n    );\n  }\n  init.sc.compress = clientList[i];\n  debug && debug(`Handshake: S->C compression: ${clientList[i]}`);\n\n  init.cs.lang = '';\n  init.sc.lang = '';\n\n  // XXX: hack -- find a better way to do this\n  if (self._kex) {\n    if (!self._kexinit) {\n      // We received a rekey request, but we haven't sent a KEXINIT in response\n      // yet\n      kexinit(self);\n    }\n    self._decipher._onPayload = onKEXPayload.bind(self, { firstPacket: false });\n  }\n\n  self._kex = createKeyExchange(init, self, payload);\n  self._kex.start();\n}\n\nconst createKeyExchange = (() => {\n  function convertToMpint(buf) {\n    let idx = 0;\n    let length = buf.length;\n    while (buf[idx] === 0x00) {\n      ++idx;\n      --length;\n    }\n    let newBuf;\n    if (buf[idx] & 0x80) {\n      newBuf = Buffer.allocUnsafe(1 + length);\n      newBuf[0] = 0;\n      buf.copy(newBuf, 1, idx);\n      buf = newBuf;\n    } else if (length !== buf.length) {\n      newBuf = Buffer.allocUnsafe(length);\n      buf.copy(newBuf, 0, idx);\n      buf = newBuf;\n    }\n    return buf;\n  }\n\n  class KeyExchange {\n    constructor(negotiated, protocol, remoteKexinit) {\n      this._protocol = protocol;\n\n      this.sessionID = (protocol._kex ? protocol._kex.sessionID : undefined);\n      this.negotiated = negotiated;\n      this._step = 1;\n      this._public = null;\n      this._dh = null;\n      this._sentNEWKEYS = false;\n      this._receivedNEWKEYS = false;\n      this._finished = false;\n      this._hostVerified = false;\n\n      // Data needed for initializing cipher/decipher/etc.\n      this._kexinit = protocol._kexinit;\n      this._remoteKexinit = remoteKexinit;\n      this._identRaw = protocol._identRaw;\n      this._remoteIdentRaw = protocol._remoteIdentRaw;\n      this._hostKey = undefined;\n      this._dhData = undefined;\n      this._sig = undefined;\n    }\n    finish() {\n      if (this._finished)\n        return false;\n      this._finished = true;\n\n      const isServer = this._protocol._server;\n      const negotiated = this.negotiated;\n\n      const pubKey = this.convertPublicKey(this._dhData);\n      let secret = this.computeSecret(this._dhData);\n      if (secret instanceof Error) {\n        secret.message =\n          `Error while computing DH secret (${this.type}): ${secret.message}`;\n        secret.level = 'handshake';\n        return doFatalError(\n          this._protocol,\n          secret,\n          DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n        );\n      }\n\n      const hash = createHash(this.hashName);\n      // V_C\n      hashString(hash, (isServer ? this._remoteIdentRaw : this._identRaw));\n      // \"V_S\"\n      hashString(hash, (isServer ? this._identRaw : this._remoteIdentRaw));\n      // \"I_C\"\n      hashString(hash, (isServer ? this._remoteKexinit : this._kexinit));\n      // \"I_S\"\n      hashString(hash, (isServer ? this._kexinit : this._remoteKexinit));\n      // \"K_S\"\n      const serverPublicHostKey = (isServer\n                                   ? this._hostKey.getPublicSSH()\n                                   : this._hostKey);\n      hashString(hash, serverPublicHostKey);\n\n      if (this.type === 'groupex') {\n        // Group exchange-specific\n        const params = this.getDHParams();\n        const num = Buffer.allocUnsafe(4);\n        // min (uint32)\n        writeUInt32BE(num, this._minBits, 0);\n        hash.update(num);\n        // preferred (uint32)\n        writeUInt32BE(num, this._prefBits, 0);\n        hash.update(num);\n        // max (uint32)\n        writeUInt32BE(num, this._maxBits, 0);\n        hash.update(num);\n        // prime\n        hashString(hash, params.prime);\n        // generator\n        hashString(hash, params.generator);\n      }\n\n      // method-specific data sent by client\n      hashString(hash, (isServer ? pubKey : this.getPublicKey()));\n      // method-specific data sent by server\n      const serverPublicKey = (isServer ? this.getPublicKey() : pubKey);\n      hashString(hash, serverPublicKey);\n      // shared secret (\"K\")\n      hashString(hash, secret);\n\n      // \"H\"\n      const exchangeHash = hash.digest();\n\n      if (!isServer) {\n        bufferParser.init(this._sig, 0);\n        const sigType = bufferParser.readString(true);\n\n        if (!sigType) {\n          return doFatalError(\n            this._protocol,\n            'Malformed packet while reading signature',\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        if (sigType !== negotiated.serverHostKey) {\n          return doFatalError(\n            this._protocol,\n            `Wrong signature type: ${sigType}, `\n              + `expected: ${negotiated.serverHostKey}`,\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        // \"s\"\n        let sigValue = bufferParser.readString();\n\n        bufferParser.clear();\n\n        if (sigValue === undefined) {\n          return doFatalError(\n            this._protocol,\n            'Malformed packet while reading signature',\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        if (!(sigValue = sigSSHToASN1(sigValue, sigType))) {\n          return doFatalError(\n            this._protocol,\n            'Malformed signature',\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        let parsedHostKey;\n        {\n          bufferParser.init(this._hostKey, 0);\n          const name = bufferParser.readString(true);\n          const hostKey = this._hostKey.slice(bufferParser.pos());\n          bufferParser.clear();\n          parsedHostKey = parseDERKey(hostKey, name);\n          if (parsedHostKey instanceof Error) {\n            parsedHostKey.level = 'handshake';\n            return doFatalError(\n              this._protocol,\n              parsedHostKey,\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n        }\n\n        let hashAlgo;\n        // Check if we need to override the default hash algorithm\n        switch (this.negotiated.serverHostKey) {\n          case 'rsa-sha2-256': hashAlgo = 'sha256'; break;\n          case 'rsa-sha2-512': hashAlgo = 'sha512'; break;\n        }\n\n        this._protocol._debug\n          && this._protocol._debug('Verifying signature ...');\n\n        const verified = parsedHostKey.verify(exchangeHash, sigValue, hashAlgo);\n        if (verified !== true) {\n          if (verified instanceof Error) {\n            this._protocol._debug && this._protocol._debug(\n              `Signature verification failed: ${verified.stack}`\n            );\n          } else {\n            this._protocol._debug && this._protocol._debug(\n              'Signature verification failed'\n            );\n          }\n          return doFatalError(\n            this._protocol,\n            'Handshake failed: signature verification failed',\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n        this._protocol._debug && this._protocol._debug('Verified signature');\n      } else {\n        // Server\n\n        let hashAlgo;\n        // Check if we need to override the default hash algorithm\n        switch (this.negotiated.serverHostKey) {\n          case 'rsa-sha2-256': hashAlgo = 'sha256'; break;\n          case 'rsa-sha2-512': hashAlgo = 'sha512'; break;\n        }\n\n        this._protocol._debug && this._protocol._debug(\n          'Generating signature ...'\n        );\n\n        let signature = this._hostKey.sign(exchangeHash, hashAlgo);\n        if (signature instanceof Error) {\n          return doFatalError(\n            this._protocol,\n            'Handshake failed: signature generation failed for '\n              + `${this._hostKey.type} host key: ${signature.message}`,\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        signature = convertSignature(signature, this._hostKey.type);\n        if (signature === false) {\n          return doFatalError(\n            this._protocol,\n            'Handshake failed: signature conversion failed for '\n              + `${this._hostKey.type} host key`,\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n        }\n\n        // Send KEX reply\n        /*\n          byte      SSH_MSG_KEXDH_REPLY\n                      / SSH_MSG_KEX_DH_GEX_REPLY\n                      / SSH_MSG_KEX_ECDH_REPLY\n          string    server public host key and certificates (K_S)\n          string    <method-specific data>\n          string    signature of H\n        */\n        const sigType = this.negotiated.serverHostKey;\n        const sigTypeLen = Buffer.byteLength(sigType);\n        const sigLen = 4 + sigTypeLen + 4 + signature.length;\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet = this._protocol._packetRW.write.alloc(\n          1\n            + 4 + serverPublicHostKey.length\n            + 4 + serverPublicKey.length\n            + 4 + sigLen,\n          true\n        );\n\n        packet[p] = MESSAGE.KEXDH_REPLY;\n\n        writeUInt32BE(packet, serverPublicHostKey.length, ++p);\n        packet.set(serverPublicHostKey, p += 4);\n\n        writeUInt32BE(packet,\n                      serverPublicKey.length,\n                      p += serverPublicHostKey.length);\n        packet.set(serverPublicKey, p += 4);\n\n        writeUInt32BE(packet, sigLen, p += serverPublicKey.length);\n\n        writeUInt32BE(packet, sigTypeLen, p += 4);\n        packet.utf8Write(sigType, p += 4, sigTypeLen);\n\n        writeUInt32BE(packet, signature.length, p += sigTypeLen);\n        packet.set(signature, p += 4);\n\n        if (this._protocol._debug) {\n          let type;\n          switch (this.type) {\n            case 'group':\n              type = 'KEXDH_REPLY';\n              break;\n            case 'groupex':\n              type = 'KEXDH_GEX_REPLY';\n              break;\n            default:\n              type = 'KEXECDH_REPLY';\n          }\n          this._protocol._debug(`Outbound: Sending ${type}`);\n        }\n        this._protocol._cipher.encrypt(\n          this._protocol._packetRW.write.finalize(packet, true)\n        );\n      }\n      trySendNEWKEYS(this);\n\n      const completeHandshake = () => {\n        if (!this.sessionID)\n          this.sessionID = exchangeHash;\n\n        {\n          const newSecret = Buffer.allocUnsafe(4 + secret.length);\n          writeUInt32BE(newSecret, secret.length, 0);\n          newSecret.set(secret, 4);\n          secret = newSecret;\n        }\n\n        // Initialize new ciphers, deciphers, etc.\n\n        const csCipherInfo = CIPHER_INFO[negotiated.cs.cipher];\n        const scCipherInfo = CIPHER_INFO[negotiated.sc.cipher];\n\n        const csIV = generateKEXVal(csCipherInfo.ivLen,\n                                    this.hashName,\n                                    secret,\n                                    exchangeHash,\n                                    this.sessionID,\n                                    'A');\n        const scIV = generateKEXVal(scCipherInfo.ivLen,\n                                    this.hashName,\n                                    secret,\n                                    exchangeHash,\n                                    this.sessionID,\n                                    'B');\n        const csKey = generateKEXVal(csCipherInfo.keyLen,\n                                     this.hashName,\n                                     secret,\n                                     exchangeHash,\n                                     this.sessionID,\n                                     'C');\n        const scKey = generateKEXVal(scCipherInfo.keyLen,\n                                     this.hashName,\n                                     secret,\n                                     exchangeHash,\n                                     this.sessionID,\n                                     'D');\n        let csMacInfo;\n        let csMacKey;\n        if (!csCipherInfo.authLen) {\n          csMacInfo = MAC_INFO[negotiated.cs.mac];\n          csMacKey = generateKEXVal(csMacInfo.len,\n                                    this.hashName,\n                                    secret,\n                                    exchangeHash,\n                                    this.sessionID,\n                                    'E');\n        }\n        let scMacInfo;\n        let scMacKey;\n        if (!scCipherInfo.authLen) {\n          scMacInfo = MAC_INFO[negotiated.sc.mac];\n          scMacKey = generateKEXVal(scMacInfo.len,\n                                    this.hashName,\n                                    secret,\n                                    exchangeHash,\n                                    this.sessionID,\n                                    'F');\n        }\n\n        const config = {\n          inbound: {\n            onPayload: this._protocol._onPayload,\n            seqno: this._protocol._decipher.inSeqno,\n            decipherInfo: (!isServer ? scCipherInfo : csCipherInfo),\n            decipherIV: (!isServer ? scIV : csIV),\n            decipherKey: (!isServer ? scKey : csKey),\n            macInfo: (!isServer ? scMacInfo : csMacInfo),\n            macKey: (!isServer ? scMacKey : csMacKey),\n          },\n          outbound: {\n            onWrite: this._protocol._onWrite,\n            seqno: this._protocol._cipher.outSeqno,\n            cipherInfo: (isServer ? scCipherInfo : csCipherInfo),\n            cipherIV: (isServer ? scIV : csIV),\n            cipherKey: (isServer ? scKey : csKey),\n            macInfo: (isServer ? scMacInfo : csMacInfo),\n            macKey: (isServer ? scMacKey : csMacKey),\n          },\n        };\n        this._protocol._cipher && this._protocol._cipher.free();\n        this._protocol._decipher && this._protocol._decipher.free();\n        this._protocol._cipher = createCipher(config);\n        this._protocol._decipher = createDecipher(config);\n\n        const rw = {\n          read: undefined,\n          write: undefined,\n        };\n        switch (negotiated.cs.compress) {\n          case 'zlib': // starts immediately\n            if (isServer)\n              rw.read = new ZlibPacketReader();\n            else\n              rw.write = new ZlibPacketWriter(this._protocol);\n            break;\n          case 'zlib@openssh.com':\n            // Starts after successful user authentication\n\n            if (this._protocol._authenticated) {\n              // If a rekey happens and this compression method is selected and\n              // we already authenticated successfully, we need to start\n              // immediately instead\n              if (isServer)\n                rw.read = new ZlibPacketReader();\n              else\n                rw.write = new ZlibPacketWriter(this._protocol);\n              break;\n            }\n          // FALLTHROUGH\n          default:\n            // none -- never any compression/decompression\n\n            if (isServer)\n              rw.read = new PacketReader();\n            else\n              rw.write = new PacketWriter(this._protocol);\n        }\n        switch (negotiated.sc.compress) {\n          case 'zlib': // starts immediately\n            if (isServer)\n              rw.write = new ZlibPacketWriter(this._protocol);\n            else\n              rw.read = new ZlibPacketReader();\n            break;\n          case 'zlib@openssh.com':\n            // Starts after successful user authentication\n\n            if (this._protocol._authenticated) {\n              // If a rekey happens and this compression method is selected and\n              // we already authenticated successfully, we need to start\n              // immediately instead\n              if (isServer)\n                rw.write = new ZlibPacketWriter(this._protocol);\n              else\n                rw.read = new ZlibPacketReader();\n              break;\n            }\n          // FALLTHROUGH\n          default:\n            // none -- never any compression/decompression\n\n            if (isServer)\n              rw.write = new PacketWriter(this._protocol);\n            else\n              rw.read = new PacketReader();\n        }\n        this._protocol._packetRW.read.cleanup();\n        this._protocol._packetRW.write.cleanup();\n        this._protocol._packetRW = rw;\n\n        // Cleanup/reset various state\n        this._public = null;\n        this._dh = null;\n        this._kexinit = this._protocol._kexinit = undefined;\n        this._remoteKexinit = undefined;\n        this._identRaw = undefined;\n        this._remoteIdentRaw = undefined;\n        this._hostKey = undefined;\n        this._dhData = undefined;\n        this._sig = undefined;\n\n        this._protocol._onHandshakeComplete(negotiated);\n\n        return false;\n      };\n      if (!isServer)\n        return completeHandshake();\n      this.finish = completeHandshake;\n    }\n\n    start() {\n      if (!this._protocol._server) {\n        if (this._protocol._debug) {\n          let type;\n          switch (this.type) {\n            case 'group':\n              type = 'KEXDH_INIT';\n              break;\n            default:\n              type = 'KEXECDH_INIT';\n          }\n          this._protocol._debug(`Outbound: Sending ${type}`);\n        }\n\n        const pubKey = this.getPublicKey();\n\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet = this._protocol._packetRW.write.alloc(\n          1 + 4 + pubKey.length,\n          true\n        );\n        packet[p] = MESSAGE.KEXDH_INIT;\n        writeUInt32BE(packet, pubKey.length, ++p);\n        packet.set(pubKey, p += 4);\n        this._protocol._cipher.encrypt(\n          this._protocol._packetRW.write.finalize(packet, true)\n        );\n      }\n    }\n    getPublicKey() {\n      this.generateKeys();\n\n      const key = this._public;\n\n      if (key)\n        return this.convertPublicKey(key);\n    }\n    convertPublicKey(key) {\n      let newKey;\n      let idx = 0;\n      let len = key.length;\n      while (key[idx] === 0x00) {\n        ++idx;\n        --len;\n      }\n\n      if (key[idx] & 0x80) {\n        newKey = Buffer.allocUnsafe(1 + len);\n        newKey[0] = 0;\n        key.copy(newKey, 1, idx);\n        return newKey;\n      }\n\n      if (len !== key.length) {\n        newKey = Buffer.allocUnsafe(len);\n        key.copy(newKey, 0, idx);\n        key = newKey;\n      }\n      return key;\n    }\n    computeSecret(otherPublicKey) {\n      this.generateKeys();\n\n      try {\n        return convertToMpint(this._dh.computeSecret(otherPublicKey));\n      } catch (ex) {\n        return ex;\n      }\n    }\n    parse(payload) {\n      const type = payload[0];\n      switch (this._step) {\n        case 1:\n          if (this._protocol._server) {\n            // Server\n            if (type !== MESSAGE.KEXDH_INIT) {\n              return doFatalError(\n                this._protocol,\n                `Received packet ${type} instead of ${MESSAGE.KEXDH_INIT}`,\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            this._protocol._debug && this._protocol._debug(\n              'Received DH Init'\n            );\n            /*\n              byte     SSH_MSG_KEXDH_INIT\n                         / SSH_MSG_KEX_ECDH_INIT\n              string   <method-specific data>\n            */\n            bufferParser.init(payload, 1);\n            const dhData = bufferParser.readString();\n            bufferParser.clear();\n            if (dhData === undefined) {\n              return doFatalError(\n                this._protocol,\n                'Received malformed KEX*_INIT',\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n\n            // Client public key\n            this._dhData = dhData;\n\n            let hostKey =\n              this._protocol._hostKeys[this.negotiated.serverHostKey];\n            if (Array.isArray(hostKey))\n              hostKey = hostKey[0];\n            this._hostKey = hostKey;\n\n            this.finish();\n          } else {\n            // Client\n            if (type !== MESSAGE.KEXDH_REPLY) {\n              return doFatalError(\n                this._protocol,\n                `Received packet ${type} instead of ${MESSAGE.KEXDH_REPLY}`,\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            this._protocol._debug && this._protocol._debug(\n              'Received DH Reply'\n            );\n            /*\n              byte      SSH_MSG_KEXDH_REPLY\n                          / SSH_MSG_KEX_DH_GEX_REPLY\n                          / SSH_MSG_KEX_ECDH_REPLY\n              string    server public host key and certificates (K_S)\n              string    <method-specific data>\n              string    signature of H\n            */\n            bufferParser.init(payload, 1);\n            let hostPubKey;\n            let dhData;\n            let sig;\n            if ((hostPubKey = bufferParser.readString()) === undefined\n                || (dhData = bufferParser.readString()) === undefined\n                || (sig = bufferParser.readString()) === undefined) {\n              bufferParser.clear();\n              return doFatalError(\n                this._protocol,\n                'Received malformed KEX*_REPLY',\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            bufferParser.clear();\n\n            // Check that the host public key type matches what was negotiated\n            // during KEXINIT swap\n            bufferParser.init(hostPubKey, 0);\n            const hostPubKeyType = bufferParser.readString(true);\n            bufferParser.clear();\n            if (hostPubKeyType === undefined) {\n              return doFatalError(\n                this._protocol,\n                'Received malformed host public key',\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            if (hostPubKeyType !== this.negotiated.serverHostKey) {\n              // Check if we need to make an exception\n              switch (this.negotiated.serverHostKey) {\n                case 'rsa-sha2-256':\n                case 'rsa-sha2-512':\n                  if (hostPubKeyType === 'ssh-rsa')\n                    break;\n                // FALLTHROUGH\n                default:\n                  return doFatalError(\n                    this._protocol,\n                    'Host key does not match negotiated type',\n                    'handshake',\n                    DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n                  );\n              }\n            }\n\n            this._hostKey = hostPubKey;\n            this._dhData = dhData;\n            this._sig = sig;\n\n            let checked = false;\n            let ret;\n            if (this._protocol._hostVerifier === undefined) {\n              ret = true;\n              this._protocol._debug && this._protocol._debug(\n                'Host accepted by default (no verification)'\n              );\n            } else {\n              ret = this._protocol._hostVerifier(hostPubKey, (permitted) => {\n                if (checked)\n                  return;\n                checked = true;\n                if (permitted === false) {\n                  this._protocol._debug && this._protocol._debug(\n                    'Host denied (verification failed)'\n                  );\n                  return doFatalError(\n                    this._protocol,\n                    'Host denied (verification failed)',\n                    'handshake',\n                    DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n                  );\n                }\n                this._protocol._debug && this._protocol._debug(\n                  'Host accepted (verified)'\n                );\n                this._hostVerified = true;\n                if (this._receivedNEWKEYS)\n                  this.finish();\n                else\n                  trySendNEWKEYS(this);\n              });\n            }\n            if (ret === undefined) {\n              // Async host verification\n              ++this._step;\n              return;\n            }\n            checked = true;\n            if (ret === false) {\n              this._protocol._debug && this._protocol._debug(\n                'Host denied (verification failed)'\n              );\n              return doFatalError(\n                this._protocol,\n                'Host denied (verification failed)',\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            this._protocol._debug && this._protocol._debug(\n              'Host accepted (verified)'\n            );\n            this._hostVerified = true;\n            trySendNEWKEYS(this);\n          }\n          ++this._step;\n          break;\n        case 2:\n          if (type !== MESSAGE.NEWKEYS) {\n            return doFatalError(\n              this._protocol,\n              `Received packet ${type} instead of ${MESSAGE.NEWKEYS}`,\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n          this._protocol._debug && this._protocol._debug(\n            'Inbound: NEWKEYS'\n          );\n          this._receivedNEWKEYS = true;\n          ++this._step;\n          if (this._protocol._server || this._hostVerified)\n            return this.finish();\n\n          // Signal to current decipher that we need to change to a new decipher\n          // for the next packet\n          return false;\n        default:\n          return doFatalError(\n            this._protocol,\n            `Received unexpected packet ${type} after NEWKEYS`,\n            'handshake',\n            DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n          );\n      }\n    }\n  }\n\n  class Curve25519Exchange extends KeyExchange {\n    constructor(hashName, ...args) {\n      super(...args);\n\n      this.type = '25519';\n      this.hashName = hashName;\n      this._keys = null;\n    }\n    generateKeys() {\n      if (!this._keys)\n        this._keys = generateKeyPairSync('x25519');\n    }\n    getPublicKey() {\n      this.generateKeys();\n\n      const key = this._keys.publicKey.export({ type: 'spki', format: 'der' });\n      return key.slice(-32); // HACK: avoids parsing DER/BER header\n    }\n    convertPublicKey(key) {\n      let newKey;\n      let idx = 0;\n      let len = key.length;\n      while (key[idx] === 0x00) {\n        ++idx;\n        --len;\n      }\n\n      if (key.length === 32)\n        return key;\n\n      if (len !== key.length) {\n        newKey = Buffer.allocUnsafe(len);\n        key.copy(newKey, 0, idx);\n        key = newKey;\n      }\n      return key;\n    }\n    computeSecret(otherPublicKey) {\n      this.generateKeys();\n\n      try {\n        const asnWriter = new Ber.Writer();\n        asnWriter.startSequence();\n          // algorithm\n          asnWriter.startSequence();\n            asnWriter.writeOID('1.3.101.110'); // id-X25519\n          asnWriter.endSequence();\n\n          // PublicKey\n          asnWriter.startSequence(Ber.BitString);\n            asnWriter.writeByte(0x00);\n            // XXX: hack to write a raw buffer without a tag -- yuck\n            asnWriter._ensure(otherPublicKey.length);\n            otherPublicKey.copy(asnWriter._buf,\n                                asnWriter._offset,\n                                0,\n                                otherPublicKey.length);\n            asnWriter._offset += otherPublicKey.length;\n          asnWriter.endSequence();\n        asnWriter.endSequence();\n\n        return convertToMpint(diffieHellman({\n          privateKey: this._keys.privateKey,\n          publicKey: createPublicKey({\n            key: asnWriter.buffer,\n            type: 'spki',\n            format: 'der',\n          }),\n        }));\n      } catch (ex) {\n        return ex;\n      }\n    }\n  }\n\n  class ECDHExchange extends KeyExchange {\n    constructor(curveName, hashName, ...args) {\n      super(...args);\n\n      this.type = 'ecdh';\n      this.curveName = curveName;\n      this.hashName = hashName;\n    }\n    generateKeys() {\n      if (!this._dh) {\n        this._dh = createECDH(this.curveName);\n        this._public = this._dh.generateKeys();\n      }\n    }\n  }\n\n  class DHGroupExchange extends KeyExchange {\n    constructor(hashName, ...args) {\n      super(...args);\n\n      this.type = 'groupex';\n      this.hashName = hashName;\n      this._prime = null;\n      this._generator = null;\n      this._minBits = GEX_MIN_BITS;\n      this._prefBits = dhEstimate(this.negotiated);\n      if (this._protocol._compatFlags & COMPAT.BUG_DHGEX_LARGE)\n        this._prefBits = Math.min(this._prefBits, 4096);\n      this._maxBits = GEX_MAX_BITS;\n    }\n    start() {\n      if (this._protocol._server)\n        return;\n      this._protocol._debug && this._protocol._debug(\n        'Outbound: Sending KEXDH_GEX_REQUEST'\n      );\n      let p = this._protocol._packetRW.write.allocStartKEX;\n      const packet = this._protocol._packetRW.write.alloc(\n        1 + 4 + 4 + 4,\n        true\n      );\n      packet[p] = MESSAGE.KEXDH_GEX_REQUEST;\n      writeUInt32BE(packet, this._minBits, ++p);\n      writeUInt32BE(packet, this._prefBits, p += 4);\n      writeUInt32BE(packet, this._maxBits, p += 4);\n      this._protocol._cipher.encrypt(\n        this._protocol._packetRW.write.finalize(packet, true)\n      );\n    }\n    generateKeys() {\n      if (!this._dh && this._prime && this._generator) {\n        this._dh = createDiffieHellman(this._prime, this._generator);\n        this._public = this._dh.generateKeys();\n      }\n    }\n    setDHParams(prime, generator) {\n      if (!Buffer.isBuffer(prime))\n        throw new Error('Invalid prime value');\n      if (!Buffer.isBuffer(generator))\n        throw new Error('Invalid generator value');\n      this._prime = prime;\n      this._generator = generator;\n    }\n    getDHParams() {\n      if (this._dh) {\n        return {\n          prime: convertToMpint(this._dh.getPrime()),\n          generator: convertToMpint(this._dh.getGenerator()),\n        };\n      }\n    }\n    parse(payload) {\n      const type = payload[0];\n      switch (this._step) {\n        case 1:\n          if (this._protocol._server) {\n            if (type !== MESSAGE.KEXDH_GEX_REQUEST) {\n              return doFatalError(\n                this._protocol,\n                `Received packet ${type} instead of `\n                  + MESSAGE.KEXDH_GEX_REQUEST,\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            // TODO: allow user implementation to provide safe prime and\n            // generator on demand to support group exchange on server side\n            return doFatalError(\n              this._protocol,\n              'Group exchange not implemented for server',\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n\n          if (type !== MESSAGE.KEXDH_GEX_GROUP) {\n            return doFatalError(\n              this._protocol,\n              `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_GROUP}`,\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n\n          this._protocol._debug && this._protocol._debug(\n            'Received DH GEX Group'\n          );\n\n          /*\n            byte    SSH_MSG_KEX_DH_GEX_GROUP\n            mpint   p, safe prime\n            mpint   g, generator for subgroup in GF(p)\n          */\n          bufferParser.init(payload, 1);\n          let prime;\n          let gen;\n          if ((prime = bufferParser.readString()) === undefined\n              || (gen = bufferParser.readString()) === undefined) {\n            bufferParser.clear();\n            return doFatalError(\n              this._protocol,\n              'Received malformed KEXDH_GEX_GROUP',\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n          bufferParser.clear();\n\n          // TODO: validate prime\n          this.setDHParams(prime, gen);\n          this.generateKeys();\n          const pubkey = this.getPublicKey();\n\n          this._protocol._debug && this._protocol._debug(\n            'Outbound: Sending KEXDH_GEX_INIT'\n          );\n\n          let p = this._protocol._packetRW.write.allocStartKEX;\n          const packet =\n            this._protocol._packetRW.write.alloc(1 + 4 + pubkey.length, true);\n          packet[p] = MESSAGE.KEXDH_GEX_INIT;\n          writeUInt32BE(packet, pubkey.length, ++p);\n          packet.set(pubkey, p += 4);\n          this._protocol._cipher.encrypt(\n            this._protocol._packetRW.write.finalize(packet, true)\n          );\n\n          ++this._step;\n          break;\n        case 2:\n          if (this._protocol._server) {\n            if (type !== MESSAGE.KEXDH_GEX_INIT) {\n              return doFatalError(\n                this._protocol,\n                `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_INIT}`,\n                'handshake',\n                DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n              );\n            }\n            this._protocol._debug && this._protocol._debug(\n              'Received DH GEX Init'\n            );\n            return doFatalError(\n              this._protocol,\n              'Group exchange not implemented for server',\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          } else if (type !== MESSAGE.KEXDH_GEX_REPLY) {\n            return doFatalError(\n              this._protocol,\n              `Received packet ${type} instead of ${MESSAGE.KEXDH_GEX_REPLY}`,\n              'handshake',\n              DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n            );\n          }\n          this._protocol._debug && this._protocol._debug(\n            'Received DH GEX Reply'\n          );\n          this._step = 1;\n          payload[0] = MESSAGE.KEXDH_REPLY;\n          this.parse = KeyExchange.prototype.parse;\n          this.parse(payload);\n      }\n    }\n  }\n\n  class DHExchange extends KeyExchange {\n    constructor(groupName, hashName, ...args) {\n      super(...args);\n\n      this.type = 'group';\n      this.groupName = groupName;\n      this.hashName = hashName;\n    }\n    start() {\n      if (!this._protocol._server) {\n        this._protocol._debug && this._protocol._debug(\n          'Outbound: Sending KEXDH_INIT'\n        );\n        const pubKey = this.getPublicKey();\n        let p = this._protocol._packetRW.write.allocStartKEX;\n        const packet =\n          this._protocol._packetRW.write.alloc(1 + 4 + pubKey.length, true);\n        packet[p] = MESSAGE.KEXDH_INIT;\n        writeUInt32BE(packet, pubKey.length, ++p);\n        packet.set(pubKey, p += 4);\n        this._protocol._cipher.encrypt(\n          this._protocol._packetRW.write.finalize(packet, true)\n        );\n      }\n    }\n    generateKeys() {\n      if (!this._dh) {\n        this._dh = createDiffieHellmanGroup(this.groupName);\n        this._public = this._dh.generateKeys();\n      }\n    }\n    getDHParams() {\n      if (this._dh) {\n        return {\n          prime: convertToMpint(this._dh.getPrime()),\n          generator: convertToMpint(this._dh.getGenerator()),\n        };\n      }\n    }\n  }\n\n  return (negotiated, ...args) => {\n    if (typeof negotiated !== 'object' || negotiated === null)\n      throw new Error('Invalid negotiated argument');\n    const kexType = negotiated.kex;\n    if (typeof kexType === 'string') {\n      args = [negotiated, ...args];\n      switch (kexType) {\n        case 'curve25519-sha256':\n        case 'curve25519-sha256@libssh.org':\n          if (!curve25519Supported)\n            break;\n          return new Curve25519Exchange('sha256', ...args);\n\n        case 'ecdh-sha2-nistp256':\n          return new ECDHExchange('prime256v1', 'sha256', ...args);\n        case 'ecdh-sha2-nistp384':\n          return new ECDHExchange('secp384r1', 'sha384', ...args);\n        case 'ecdh-sha2-nistp521':\n          return new ECDHExchange('secp521r1', 'sha512', ...args);\n\n        case 'diffie-hellman-group1-sha1':\n          return new DHExchange('modp2', 'sha1', ...args);\n        case 'diffie-hellman-group14-sha1':\n          return new DHExchange('modp14', 'sha1', ...args);\n        case 'diffie-hellman-group14-sha256':\n          return new DHExchange('modp14', 'sha256', ...args);\n        case 'diffie-hellman-group15-sha512':\n          return new DHExchange('modp15', 'sha512', ...args);\n        case 'diffie-hellman-group16-sha512':\n          return new DHExchange('modp16', 'sha512', ...args);\n        case 'diffie-hellman-group17-sha512':\n          return new DHExchange('modp17', 'sha512', ...args);\n        case 'diffie-hellman-group18-sha512':\n          return new DHExchange('modp18', 'sha512', ...args);\n\n        case 'diffie-hellman-group-exchange-sha1':\n          return new DHGroupExchange('sha1', ...args);\n        case 'diffie-hellman-group-exchange-sha256':\n          return new DHGroupExchange('sha256', ...args);\n      }\n      throw new Error(`Unsupported key exchange algorithm: ${kexType}`);\n    }\n    throw new Error(`Invalid key exchange type: ${kexType}`);\n  };\n})();\n\nconst KexInit = (() => {\n  const KEX_PROPERTY_NAMES = [\n    'kex',\n    'serverHostKey',\n    ['cs', 'cipher' ],\n    ['sc', 'cipher' ],\n    ['cs', 'mac' ],\n    ['sc', 'mac' ],\n    ['cs', 'compress' ],\n    ['sc', 'compress' ],\n    ['cs', 'lang' ],\n    ['sc', 'lang' ],\n  ];\n  return class KexInit {\n    constructor(obj) {\n      if (typeof obj !== 'object' || obj === null)\n        throw new TypeError('Argument must be an object');\n\n      const lists = {\n        kex: undefined,\n        serverHostKey: undefined,\n        cs: {\n          cipher: undefined,\n          mac: undefined,\n          compress: undefined,\n          lang: undefined,\n        },\n        sc: {\n          cipher: undefined,\n          mac: undefined,\n          compress: undefined,\n          lang: undefined,\n        },\n\n        all: undefined,\n      };\n      let totalSize = 0;\n      for (const prop of KEX_PROPERTY_NAMES) {\n        let base;\n        let val;\n        let desc;\n        let key;\n        if (typeof prop === 'string') {\n          base = lists;\n          val = obj[prop];\n          desc = key = prop;\n        } else {\n          const parent = prop[0];\n          base = lists[parent];\n          key = prop[1];\n          val = obj[parent][key];\n          desc = `${parent}.${key}`;\n        }\n        const entry = { array: undefined, buffer: undefined };\n        if (Buffer.isBuffer(val)) {\n          entry.array = ('' + val).split(',');\n          entry.buffer = val;\n          totalSize += 4 + val.length;\n        } else {\n          if (typeof val === 'string')\n            val = val.split(',');\n          if (Array.isArray(val)) {\n            entry.array = val;\n            entry.buffer = Buffer.from(val.join(','));\n          } else {\n            throw new TypeError(`Invalid \\`${desc}\\` type: ${typeof val}`);\n          }\n          totalSize += 4 + entry.buffer.length;\n        }\n        base[key] = entry;\n      }\n\n      const all = Buffer.allocUnsafe(totalSize);\n      lists.all = all;\n\n      let allPos = 0;\n      for (const prop of KEX_PROPERTY_NAMES) {\n        let data;\n        if (typeof prop === 'string')\n          data = lists[prop].buffer;\n        else\n          data = lists[prop[0]][prop[1]].buffer;\n        allPos = writeUInt32BE(all, data.length, allPos);\n        all.set(data, allPos);\n        allPos += data.length;\n      }\n\n      this.totalSize = totalSize;\n      this.lists = lists;\n    }\n    copyAllTo(buf, offset) {\n      const src = this.lists.all;\n      if (typeof offset !== 'number')\n        throw new TypeError(`Invalid offset value: ${typeof offset}`);\n      if (buf.length - offset < src.length)\n        throw new Error('Insufficient space to copy list');\n      buf.set(src, offset);\n      return src.length;\n    }\n  };\n})();\n\nconst hashString = (() => {\n  const LEN = Buffer.allocUnsafe(4);\n  return (hash, buf) => {\n    writeUInt32BE(LEN, buf.length, 0);\n    hash.update(LEN);\n    hash.update(buf);\n  };\n})();\n\nfunction generateKEXVal(len, hashName, secret, exchangeHash, sessionID, char) {\n  let ret;\n  if (len) {\n    let digest = createHash(hashName)\n                   .update(secret)\n                   .update(exchangeHash)\n                   .update(char)\n                   .update(sessionID)\n                   .digest();\n    while (digest.length < len) {\n      const chunk = createHash(hashName)\n                      .update(secret)\n                      .update(exchangeHash)\n                      .update(digest)\n                      .digest();\n      const extended = Buffer.allocUnsafe(digest.length + chunk.length);\n      extended.set(digest, 0);\n      extended.set(chunk, digest.length);\n      digest = extended;\n    }\n    if (digest.length === len)\n      ret = digest;\n    else\n      ret = new FastBuffer(digest.buffer, digest.byteOffset, len);\n  } else {\n    ret = EMPTY_BUFFER;\n  }\n  return ret;\n}\n\nfunction onKEXPayload(state, payload) {\n  // XXX: move this to the Decipher implementations?\n  if (payload.length === 0) {\n    this._debug && this._debug('Inbound: Skipping empty packet payload');\n    return;\n  }\n\n  if (this._skipNextInboundPacket) {\n    this._skipNextInboundPacket = false;\n    return;\n  }\n\n  payload = this._packetRW.read.read(payload);\n\n  const type = payload[0];\n  switch (type) {\n    case MESSAGE.DISCONNECT:\n    case MESSAGE.IGNORE:\n    case MESSAGE.UNIMPLEMENTED:\n    case MESSAGE.DEBUG:\n      if (!MESSAGE_HANDLERS)\n        MESSAGE_HANDLERS = require('./handlers.js');\n      return MESSAGE_HANDLERS[type](this, payload);\n    case MESSAGE.KEXINIT:\n      if (!state.firstPacket) {\n        return doFatalError(\n          this,\n          'Received extra KEXINIT during handshake',\n          'handshake',\n          DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n        );\n      }\n      state.firstPacket = false;\n      return handleKexInit(this, payload);\n    default:\n      if (type < 20 || type > 49) {\n        return doFatalError(\n          this,\n          `Received unexpected packet type ${type}`,\n          'handshake',\n          DISCONNECT_REASON.KEY_EXCHANGE_FAILED\n        );\n      }\n  }\n\n  return this._kex.parse(payload);\n}\n\nfunction dhEstimate(neg) {\n  const csCipher = CIPHER_INFO[neg.cs.cipher];\n  const scCipher = CIPHER_INFO[neg.sc.cipher];\n  // XXX: if OpenSSH's `umac-*` MACs are ever supported, their key lengths will\n  // also need to be considered when calculating `bits`\n  const bits = Math.max(\n    0,\n    (csCipher.sslName === 'des-ede3-cbc' ? 14 : csCipher.keyLen),\n    csCipher.blockLen,\n    csCipher.ivLen,\n    (scCipher.sslName === 'des-ede3-cbc' ? 14 : scCipher.keyLen),\n    scCipher.blockLen,\n    scCipher.ivLen\n  ) * 8;\n  if (bits <= 112)\n    return 2048;\n  if (bits <= 128)\n    return 3072;\n  if (bits <= 192)\n    return 7680;\n  return 8192;\n}\n\nfunction trySendNEWKEYS(kex) {\n  if (!kex._sentNEWKEYS) {\n    kex._protocol._debug && kex._protocol._debug(\n      'Outbound: Sending NEWKEYS'\n    );\n    const p = kex._protocol._packetRW.write.allocStartKEX;\n    const packet = kex._protocol._packetRW.write.alloc(1, true);\n    packet[p] = MESSAGE.NEWKEYS;\n    kex._protocol._cipher.encrypt(\n      kex._protocol._packetRW.write.finalize(packet, true)\n    );\n    kex._sentNEWKEYS = true;\n  }\n}\n\nmodule.exports = {\n  KexInit,\n  kexinit,\n  onKEXPayload,\n  DEFAULT_KEXINIT: new KexInit({\n    kex: DEFAULT_KEX,\n    serverHostKey: DEFAULT_SERVER_HOST_KEY,\n    cs: {\n      cipher: DEFAULT_CIPHER,\n      mac: DEFAULT_MAC,\n      compress: DEFAULT_COMPRESSION,\n      lang: [],\n    },\n    sc: {\n      cipher: DEFAULT_CIPHER,\n      mac: DEFAULT_MAC,\n      compress: DEFAULT_COMPRESSION,\n      lang: [],\n    },\n  }),\n  HANDLERS: {\n    [MESSAGE.KEXINIT]: handleKexInit,\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n\nconst {\n  Duplex: DuplexStream,\n  Readable: ReadableStream,\n  Writable: WritableStream\n} = require('stream');\nconst {\n  CHANNEL_EXTENDED_DATATYPE: {\n    STDERR\n  }\n} = require('./protocol/constants.js');\nconst {\n  bufferSlice\n} = require('./protocol/utils.js');\nconst PACKET_SIZE = 32 * 1024;\nconst MAX_WINDOW = 2 * 1024 * 1024;\nconst WINDOW_THRESHOLD = MAX_WINDOW / 2;\nclass ClientStderr extends ReadableStream {\n  constructor(channel, streamOpts) {\n    super(streamOpts);\n    this._channel = channel;\n  }\n  _read(n) {\n    if (this._channel._waitChanDrain) {\n      this._channel._waitChanDrain = false;\n      if (this._channel.incoming.window <= WINDOW_THRESHOLD) windowAdjust(this._channel);\n    }\n  }\n}\nclass ServerStderr extends WritableStream {\n  constructor(channel) {\n    super({\n      highWaterMark: MAX_WINDOW\n    });\n    this._channel = channel;\n  }\n  _write(data, encoding, cb) {\n    const channel = this._channel;\n    const protocol = channel._client._protocol;\n    const outgoing = channel.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n    if (outgoing.state !== 'open') return;\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window) sliceLen = window;\n      if (sliceLen > packetSize) sliceLen = packetSize;\n      if (p === 0 && sliceLen === len) protocol.channelExtData(id, data, STDERR);else protocol.channelExtData(id, bufferSlice(data, p, p + sliceLen), STDERR);\n      p += sliceLen;\n      window -= sliceLen;\n    }\n    outgoing.window = window;\n    if (len - p > 0) {\n      if (window === 0) channel._waitWindow = true;\n      if (p > 0) channel._chunkErr = bufferSlice(data, p, len);else channel._chunkErr = data;\n      channel._chunkcbErr = cb;\n      return;\n    }\n    cb();\n  }\n}\nclass Channel extends DuplexStream {\n  constructor(client, info, opts) {\n    const streamOpts = {\n      highWaterMark: MAX_WINDOW,\n      allowHalfOpen: !opts || opts && opts.allowHalfOpen !== false,\n      emitClose: false\n    };\n    super(streamOpts);\n    this.allowHalfOpen = streamOpts.allowHalfOpen;\n    const server = !!(opts && opts.server);\n    this.server = server;\n    this.type = info.type;\n    this.subtype = undefined;\n\n    /*\n      incoming and outgoing contain these properties:\n      {\n        id: undefined,\n        window: undefined,\n        packetSize: undefined,\n        state: 'closed'\n      }\n    */\n    this.incoming = info.incoming;\n    this.outgoing = info.outgoing;\n    this._callbacks = [];\n    this._client = client;\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined\n    };\n    this.stdin = this.stdout = this;\n    if (server) this.stderr = new ServerStderr(this);else this.stderr = new ClientStderr(this, streamOpts);\n\n    // Outgoing data\n    this._waitWindow = false; // SSH-level backpressure\n\n    // Incoming data\n    this._waitChanDrain = false; // Channel Readable side backpressure\n\n    this._chunk = undefined;\n    this._chunkcb = undefined;\n    this._chunkErr = undefined;\n    this._chunkcbErr = undefined;\n    this.on('finish', onFinish).on('prefinish', onFinish); // For node v0.11+\n\n    this.on('end', onEnd).on('close', onEnd);\n  }\n  _read(n) {\n    if (this._waitChanDrain) {\n      this._waitChanDrain = false;\n      if (this.incoming.window <= WINDOW_THRESHOLD) windowAdjust(this);\n    }\n  }\n  _write(data, encoding, cb) {\n    const protocol = this._client._protocol;\n    const outgoing = this.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n    if (outgoing.state !== 'open') return;\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window) sliceLen = window;\n      if (sliceLen > packetSize) sliceLen = packetSize;\n      if (p === 0 && sliceLen === len) protocol.channelData(id, data);else protocol.channelData(id, bufferSlice(data, p, p + sliceLen));\n      p += sliceLen;\n      window -= sliceLen;\n    }\n    outgoing.window = window;\n    if (len - p > 0) {\n      if (window === 0) this._waitWindow = true;\n      if (p > 0) this._chunk = bufferSlice(data, p, len);else this._chunk = data;\n      this._chunkcb = cb;\n      return;\n    }\n    cb();\n  }\n  eof() {\n    if (this.outgoing.state === 'open') {\n      this.outgoing.state = 'eof';\n      this._client._protocol.channelEOF(this.outgoing.id);\n    }\n  }\n  close() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n      this._client._protocol.channelClose(this.outgoing.id);\n    }\n  }\n  destroy() {\n    this.end();\n    this.close();\n    return this;\n  }\n\n  // Session type-specific methods =============================================\n  setWindow(rows, cols, height, width) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (this.type === 'session' && (this.subtype === 'shell' || this.subtype === 'exec') && this.writable && this.outgoing.state === 'open') {\n      this._client._protocol.windowChange(this.outgoing.id, rows, cols, height, width);\n    }\n  }\n  signal(signalName) {\n    if (this.server) throw new Error('Client-only method called in server mode');\n    if (this.type === 'session' && this.writable && this.outgoing.state === 'open') {\n      this._client._protocol.signal(this.outgoing.id, signalName);\n    }\n  }\n  exit(statusOrSignal, coreDumped, msg) {\n    if (!this.server) throw new Error('Server-only method called in client mode');\n    if (this.type === 'session' && this.writable && this.outgoing.state === 'open') {\n      if (typeof statusOrSignal === 'number') {\n        this._client._protocol.exitStatus(this.outgoing.id, statusOrSignal);\n      } else {\n        this._client._protocol.exitSignal(this.outgoing.id, statusOrSignal, coreDumped, msg);\n      }\n    }\n  }\n}\nfunction onFinish() {\n  this.eof();\n  if (this.server || !this.allowHalfOpen) this.close();\n  this.writable = false;\n}\nfunction onEnd() {\n  this.readable = false;\n}\nfunction windowAdjust(self) {\n  if (self.outgoing.state === 'closed') return;\n  const amt = MAX_WINDOW - self.incoming.window;\n  if (amt <= 0) return;\n  self.incoming.window += amt;\n  self._client._protocol.channelWindowAdjust(self.outgoing.id, amt);\n}\nmodule.exports = {\n  Channel,\n  MAX_WINDOW,\n  PACKET_SIZE,\n  windowAdjust,\n  WINDOW_THRESHOLD\n};","map":{"version":3,"names":["Duplex","DuplexStream","Readable","ReadableStream","Writable","WritableStream","require","CHANNEL_EXTENDED_DATATYPE","STDERR","bufferSlice","PACKET_SIZE","MAX_WINDOW","WINDOW_THRESHOLD","ClientStderr","constructor","channel","streamOpts","_channel","_read","n","_waitChanDrain","incoming","window","windowAdjust","ServerStderr","highWaterMark","_write","data","encoding","cb","protocol","_client","_protocol","outgoing","packetSize","id","len","length","p","state","sliceLen","channelExtData","_waitWindow","_chunkErr","_chunkcbErr","Channel","client","info","opts","allowHalfOpen","emitClose","server","type","subtype","undefined","_callbacks","_hasX11","_exit","code","signal","dump","desc","stdin","stdout","stderr","_chunk","_chunkcb","on","onFinish","onEnd","channelData","eof","channelEOF","close","channelClose","destroy","end","setWindow","rows","cols","height","width","Error","writable","windowChange","signalName","exit","statusOrSignal","coreDumped","msg","exitStatus","exitSignal","readable","self","amt","channelWindowAdjust","module","exports"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/Channel.js"],"sourcesContent":["'use strict';\n\nconst {\n  Duplex: DuplexStream,\n  Readable: ReadableStream,\n  Writable: WritableStream,\n} = require('stream');\n\nconst {\n  CHANNEL_EXTENDED_DATATYPE: { STDERR },\n} = require('./protocol/constants.js');\nconst { bufferSlice } = require('./protocol/utils.js');\n\nconst PACKET_SIZE = 32 * 1024;\nconst MAX_WINDOW = 2 * 1024 * 1024;\nconst WINDOW_THRESHOLD = MAX_WINDOW / 2;\n\nclass ClientStderr extends ReadableStream {\n  constructor(channel, streamOpts) {\n    super(streamOpts);\n\n    this._channel = channel;\n  }\n  _read(n) {\n    if (this._channel._waitChanDrain) {\n      this._channel._waitChanDrain = false;\n      if (this._channel.incoming.window <= WINDOW_THRESHOLD)\n        windowAdjust(this._channel);\n    }\n  }\n}\n\nclass ServerStderr extends WritableStream {\n  constructor(channel) {\n    super({ highWaterMark: MAX_WINDOW });\n\n    this._channel = channel;\n  }\n\n  _write(data, encoding, cb) {\n    const channel = this._channel;\n    const protocol = channel._client._protocol;\n    const outgoing = channel.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n\n    if (outgoing.state !== 'open')\n      return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window)\n        sliceLen = window;\n      if (sliceLen > packetSize)\n        sliceLen = packetSize;\n\n      if (p === 0 && sliceLen === len)\n        protocol.channelExtData(id, data, STDERR);\n      else\n        protocol.channelExtData(id, bufferSlice(data, p, p + sliceLen), STDERR);\n\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0)\n        channel._waitWindow = true;\n      if (p > 0)\n        channel._chunkErr = bufferSlice(data, p, len);\n      else\n        channel._chunkErr = data;\n      channel._chunkcbErr = cb;\n      return;\n    }\n\n    cb();\n  }\n}\n\nclass Channel extends DuplexStream {\n  constructor(client, info, opts) {\n    const streamOpts = {\n      highWaterMark: MAX_WINDOW,\n      allowHalfOpen: (!opts || (opts && opts.allowHalfOpen !== false)),\n      emitClose: false,\n    };\n    super(streamOpts);\n    this.allowHalfOpen = streamOpts.allowHalfOpen;\n\n    const server = !!(opts && opts.server);\n\n    this.server = server;\n    this.type = info.type;\n    this.subtype = undefined;\n\n    /*\n      incoming and outgoing contain these properties:\n      {\n        id: undefined,\n        window: undefined,\n        packetSize: undefined,\n        state: 'closed'\n      }\n    */\n    this.incoming = info.incoming;\n    this.outgoing = info.outgoing;\n    this._callbacks = [];\n\n    this._client = client;\n    this._hasX11 = false;\n    this._exit = {\n      code: undefined,\n      signal: undefined,\n      dump: undefined,\n      desc: undefined,\n    };\n\n    this.stdin = this.stdout = this;\n\n    if (server)\n      this.stderr = new ServerStderr(this);\n    else\n      this.stderr = new ClientStderr(this, streamOpts);\n\n    // Outgoing data\n    this._waitWindow = false; // SSH-level backpressure\n\n    // Incoming data\n    this._waitChanDrain = false; // Channel Readable side backpressure\n\n    this._chunk = undefined;\n    this._chunkcb = undefined;\n    this._chunkErr = undefined;\n    this._chunkcbErr = undefined;\n\n    this.on('finish', onFinish)\n        .on('prefinish', onFinish); // For node v0.11+\n\n    this.on('end', onEnd).on('close', onEnd);\n  }\n\n  _read(n) {\n    if (this._waitChanDrain) {\n      this._waitChanDrain = false;\n      if (this.incoming.window <= WINDOW_THRESHOLD)\n        windowAdjust(this);\n    }\n  }\n\n  _write(data, encoding, cb) {\n    const protocol = this._client._protocol;\n    const outgoing = this.outgoing;\n    const packetSize = outgoing.packetSize;\n    const id = outgoing.id;\n    let window = outgoing.window;\n    const len = data.length;\n    let p = 0;\n\n    if (outgoing.state !== 'open')\n      return;\n\n    while (len - p > 0 && window > 0) {\n      let sliceLen = len - p;\n      if (sliceLen > window)\n        sliceLen = window;\n      if (sliceLen > packetSize)\n        sliceLen = packetSize;\n\n      if (p === 0 && sliceLen === len)\n        protocol.channelData(id, data);\n      else\n        protocol.channelData(id, bufferSlice(data, p, p + sliceLen));\n\n      p += sliceLen;\n      window -= sliceLen;\n    }\n\n    outgoing.window = window;\n\n    if (len - p > 0) {\n      if (window === 0)\n        this._waitWindow = true;\n      if (p > 0)\n        this._chunk = bufferSlice(data, p, len);\n      else\n        this._chunk = data;\n      this._chunkcb = cb;\n      return;\n    }\n\n    cb();\n  }\n\n  eof() {\n    if (this.outgoing.state === 'open') {\n      this.outgoing.state = 'eof';\n      this._client._protocol.channelEOF(this.outgoing.id);\n    }\n  }\n\n  close() {\n    if (this.outgoing.state === 'open' || this.outgoing.state === 'eof') {\n      this.outgoing.state = 'closing';\n      this._client._protocol.channelClose(this.outgoing.id);\n    }\n  }\n\n  destroy() {\n    this.end();\n    this.close();\n    return this;\n  }\n\n  // Session type-specific methods =============================================\n  setWindow(rows, cols, height, width) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session'\n        && (this.subtype === 'shell' || this.subtype === 'exec')\n        && this.writable\n        && this.outgoing.state === 'open') {\n      this._client._protocol.windowChange(this.outgoing.id,\n                                          rows,\n                                          cols,\n                                          height,\n                                          width);\n    }\n  }\n\n  signal(signalName) {\n    if (this.server)\n      throw new Error('Client-only method called in server mode');\n\n    if (this.type === 'session'\n        && this.writable\n        && this.outgoing.state === 'open') {\n      this._client._protocol.signal(this.outgoing.id, signalName);\n    }\n  }\n\n  exit(statusOrSignal, coreDumped, msg) {\n    if (!this.server)\n      throw new Error('Server-only method called in client mode');\n\n    if (this.type === 'session'\n        && this.writable\n        && this.outgoing.state === 'open') {\n      if (typeof statusOrSignal === 'number') {\n        this._client._protocol.exitStatus(this.outgoing.id, statusOrSignal);\n      } else {\n        this._client._protocol.exitSignal(this.outgoing.id,\n                                          statusOrSignal,\n                                          coreDumped,\n                                          msg);\n      }\n    }\n  }\n\n}\n\nfunction onFinish() {\n  this.eof();\n  if (this.server || !this.allowHalfOpen)\n    this.close();\n  this.writable = false;\n}\n\nfunction onEnd() {\n  this.readable = false;\n}\n\nfunction windowAdjust(self) {\n  if (self.outgoing.state === 'closed')\n    return;\n  const amt = MAX_WINDOW - self.incoming.window;\n  if (amt <= 0)\n    return;\n  self.incoming.window += amt;\n  self._client._protocol.channelWindowAdjust(self.outgoing.id, amt);\n}\n\nmodule.exports = {\n  Channel,\n  MAX_WINDOW,\n  PACKET_SIZE,\n  windowAdjust,\n  WINDOW_THRESHOLD,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
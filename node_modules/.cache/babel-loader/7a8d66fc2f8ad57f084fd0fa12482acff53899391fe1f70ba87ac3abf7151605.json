{"ast":null,"code":"'use strict';\n\nconst {\n  bufferSlice,\n  bufferParser,\n  doFatalError,\n  sigSSHToASN1,\n  writeUInt32BE\n} = require('./utils.js');\nconst {\n  CHANNEL_OPEN_FAILURE,\n  COMPAT,\n  MESSAGE,\n  TERMINAL_MODE\n} = require('./constants.js');\nconst {\n  parseKey\n} = require('./keyParser.js');\nconst TERMINAL_MODE_BY_VALUE = Array.from(Object.entries(TERMINAL_MODE)).reduce((obj, _ref) => {\n  let [key, value] = _ref;\n  return {\n    ...obj,\n    [key]: value\n  };\n}, {});\nmodule.exports = {\n  // Transport layer protocol ==================================================\n  [MESSAGE.DISCONNECT]: (self, payload) => {\n    /*\n      byte      SSH_MSG_DISCONNECT\n      uint32    reason code\n      string    description in ISO-10646 UTF-8 encoding\n      string    language tag\n    */\n    bufferParser.init(payload, 1);\n    const reason = bufferParser.readUInt32BE();\n    const desc = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n    if (lang === undefined) {\n      return doFatalError(self, 'Inbound: Malformed DISCONNECT packet');\n    }\n    self._debug && self._debug(`Inbound: Received DISCONNECT (${reason}, \"${desc}\")`);\n    const handler = self._handlers.DISCONNECT;\n    handler && handler(self, reason, desc);\n  },\n  [MESSAGE.IGNORE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_IGNORE\n      string    data\n    */\n    self._debug && self._debug('Inbound: Received IGNORE');\n  },\n  [MESSAGE.UNIMPLEMENTED]: (self, payload) => {\n    /*\n      byte      SSH_MSG_UNIMPLEMENTED\n      uint32    packet sequence number of rejected message\n    */\n    bufferParser.init(payload, 1);\n    const seqno = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (seqno === undefined) {\n      return doFatalError(self, 'Inbound: Malformed UNIMPLEMENTED packet');\n    }\n    self._debug && self._debug(`Inbound: Received UNIMPLEMENTED (seqno ${seqno})`);\n  },\n  [MESSAGE.DEBUG]: (self, payload) => {\n    /*\n      byte      SSH_MSG_DEBUG\n      boolean   always_display\n      string    message in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const display = bufferParser.readBool();\n    const msg = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n    if (lang === undefined) {\n      return doFatalError(self, 'Inbound: Malformed DEBUG packet');\n    }\n    self._debug && self._debug('Inbound: Received DEBUG');\n    const handler = self._handlers.DEBUG;\n    handler && handler(self, display, msg);\n  },\n  [MESSAGE.SERVICE_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_SERVICE_REQUEST\n      string    service name\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    bufferParser.clear();\n    if (name === undefined) {\n      return doFatalError(self, 'Inbound: Malformed SERVICE_REQUEST packet');\n    }\n    self._debug && self._debug(`Inbound: Received SERVICE_REQUEST (${name})`);\n    const handler = self._handlers.SERVICE_REQUEST;\n    handler && handler(self, name);\n  },\n  [MESSAGE.SERVICE_ACCEPT]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_SERVICE_ACCEPT\n      string    service name\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    bufferParser.clear();\n    if (name === undefined) {\n      return doFatalError(self, 'Inbound: Malformed SERVICE_ACCEPT packet');\n    }\n    self._debug && self._debug(`Inbound: Received SERVICE_ACCEPT (${name})`);\n    const handler = self._handlers.SERVICE_ACCEPT;\n    handler && handler(self, name);\n  },\n  // User auth protocol -- generic =============================================\n  [MESSAGE.USERAUTH_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string    user name in ISO-10646 UTF-8 encoding [RFC3629]\n      string    service name in US-ASCII\n      string    method name in US-ASCII\n      ....      method specific fields\n    */\n    bufferParser.init(payload, 1);\n    const user = bufferParser.readString(true);\n    const service = bufferParser.readString(true);\n    const method = bufferParser.readString(true);\n    let methodData;\n    let methodDesc;\n    switch (method) {\n      case 'none':\n        methodData = null;\n        break;\n      case 'password':\n        {\n          /*\n            boolean   <new password follows (old) plaintext password?>\n            string    plaintext password in ISO-10646 UTF-8 encoding [RFC3629]\n           [string    new password]\n          */\n          const isChange = bufferParser.readBool();\n          if (isChange !== undefined) {\n            methodData = bufferParser.readString(true);\n            if (methodData !== undefined && isChange) {\n              const newPassword = bufferParser.readString(true);\n              if (newPassword !== undefined) methodData = {\n                oldPassword: methodData,\n                newPassword\n              };else methodData = undefined;\n            }\n          }\n          break;\n        }\n      case 'publickey':\n        {\n          /*\n            boolean   <signature follows public key blob?>\n            string    public key algorithm name\n            string    public key blob\n           [string    signature]\n          */\n          const hasSig = bufferParser.readBool();\n          if (hasSig !== undefined) {\n            const keyAlgo = bufferParser.readString(true);\n            const key = bufferParser.readString();\n            if (hasSig) {\n              const blobEnd = bufferParser.pos();\n              let signature = bufferParser.readString();\n              if (signature !== undefined) {\n                if (signature.length > 4 + keyAlgo.length + 4 && signature.utf8Slice(4, 4 + keyAlgo.length) === keyAlgo) {\n                  // Skip algoLen + algo + sigLen\n                  signature = bufferSlice(signature, 4 + keyAlgo.length + 4);\n                }\n                signature = sigSSHToASN1(signature, keyAlgo);\n                if (signature) {\n                  const sessionID = self._kex.sessionID;\n                  const blob = Buffer.allocUnsafe(4 + sessionID.length + blobEnd);\n                  writeUInt32BE(blob, sessionID.length, 0);\n                  blob.set(sessionID, 4);\n                  blob.set(new Uint8Array(payload.buffer, payload.byteOffset, blobEnd), 4 + sessionID.length);\n                  methodData = {\n                    keyAlgo,\n                    key,\n                    signature,\n                    blob\n                  };\n                }\n              }\n            } else {\n              methodData = {\n                keyAlgo,\n                key\n              };\n              methodDesc = 'publickey -- check';\n            }\n          }\n          break;\n        }\n      case 'hostbased':\n        {\n          /*\n            string    public key algorithm for host key\n            string    public host key and certificates for client host\n            string    client host name expressed as the FQDN in US-ASCII\n            string    user name on the client host in ISO-10646 UTF-8 encoding\n                       [RFC3629]\n            string    signature\n          */\n          const keyAlgo = bufferParser.readString(true);\n          const key = bufferParser.readString();\n          const localHostname = bufferParser.readString(true);\n          const localUsername = bufferParser.readString(true);\n          const blobEnd = bufferParser.pos();\n          let signature = bufferParser.readString();\n          if (signature !== undefined) {\n            if (signature.length > 4 + keyAlgo.length + 4 && signature.utf8Slice(4, 4 + keyAlgo.length) === keyAlgo) {\n              // Skip algoLen + algo + sigLen\n              signature = bufferSlice(signature, 4 + keyAlgo.length + 4);\n            }\n            signature = sigSSHToASN1(signature, keyAlgo);\n            if (signature !== undefined) {\n              const sessionID = self._kex.sessionID;\n              const blob = Buffer.allocUnsafe(4 + sessionID.length + blobEnd);\n              writeUInt32BE(blob, sessionID.length, 0);\n              blob.set(sessionID, 4);\n              blob.set(new Uint8Array(payload.buffer, payload.byteOffset, blobEnd), 4 + sessionID.length);\n              methodData = {\n                keyAlgo,\n                key,\n                signature,\n                blob,\n                localHostname,\n                localUsername\n              };\n            }\n          }\n          break;\n        }\n      case 'keyboard-interactive':\n        /*\n          string    language tag (as defined in [RFC-3066])\n          string    submethods (ISO-10646 UTF-8)\n        */\n        // Skip/ignore language field -- it's deprecated in RFC 4256\n        bufferParser.skipString();\n        methodData = bufferParser.readList();\n        break;\n      default:\n        if (method !== undefined) methodData = bufferParser.readRaw();\n    }\n    bufferParser.clear();\n    if (methodData === undefined) {\n      return doFatalError(self, 'Inbound: Malformed USERAUTH_REQUEST packet');\n    }\n    if (methodDesc === undefined) methodDesc = method;\n    self._authsQueue.push(method);\n    self._debug && self._debug(`Inbound: Received USERAUTH_REQUEST (${methodDesc})`);\n    const handler = self._handlers.USERAUTH_REQUEST;\n    handler && handler(self, user, service, method, methodData);\n  },\n  [MESSAGE.USERAUTH_FAILURE]: (self, payload) => {\n    // S->C\n    /*\n      byte         SSH_MSG_USERAUTH_FAILURE\n      name-list    authentications that can continue\n      boolean      partial success\n    */\n    bufferParser.init(payload, 1);\n    const authMethods = bufferParser.readList();\n    const partialSuccess = bufferParser.readBool();\n    bufferParser.clear();\n    if (partialSuccess === undefined) {\n      return doFatalError(self, 'Inbound: Malformed USERAUTH_FAILURE packet');\n    }\n    self._debug && self._debug(`Inbound: Received USERAUTH_FAILURE (${authMethods})`);\n    self._authsQueue.shift();\n    const handler = self._handlers.USERAUTH_FAILURE;\n    handler && handler(self, authMethods, partialSuccess);\n  },\n  [MESSAGE.USERAUTH_SUCCESS]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_USERAUTH_SUCCESS\n    */\n    self._debug && self._debug('Inbound: Received USERAUTH_SUCCESS');\n    self._authsQueue.shift();\n    const handler = self._handlers.USERAUTH_SUCCESS;\n    handler && handler(self);\n  },\n  [MESSAGE.USERAUTH_BANNER]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_USERAUTH_BANNER\n      string    message in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const msg = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n    if (lang === undefined) {\n      return doFatalError(self, 'Inbound: Malformed USERAUTH_BANNER packet');\n    }\n    self._debug && self._debug('Inbound: Received USERAUTH_BANNER');\n    const handler = self._handlers.USERAUTH_BANNER;\n    handler && handler(self, msg);\n  },\n  // User auth protocol -- method-specific =====================================\n  60: (self, payload) => {\n    if (!self._authsQueue.length) {\n      self._debug && self._debug('Inbound: Received payload type 60 without auth');\n      return;\n    }\n    switch (self._authsQueue[0]) {\n      case 'password':\n        {\n          // S->C\n          /*\n            byte      SSH_MSG_USERAUTH_PASSWD_CHANGEREQ\n            string    prompt in ISO-10646 UTF-8 encoding [RFC3629]\n            string    language tag [RFC3066]\n          */\n          bufferParser.init(payload, 1);\n          const prompt = bufferParser.readString(true);\n          const lang = bufferParser.readString();\n          bufferParser.clear();\n          if (lang === undefined) {\n            return doFatalError(self, 'Inbound: Malformed USERAUTH_PASSWD_CHANGEREQ packet');\n          }\n          self._debug && self._debug('Inbound: Received USERAUTH_PASSWD_CHANGEREQ');\n          const handler = self._handlers.USERAUTH_PASSWD_CHANGEREQ;\n          handler && handler(self, prompt);\n          break;\n        }\n      case 'publickey':\n        {\n          // S->C\n          /*\n            byte      SSH_MSG_USERAUTH_PK_OK\n            string    public key algorithm name from the request\n            string    public key blob from the request\n          */\n          bufferParser.init(payload, 1);\n          const keyAlgo = bufferParser.readString(true);\n          const key = bufferParser.readString();\n          bufferParser.clear();\n          if (key === undefined) {\n            return doFatalError(self, 'Inbound: Malformed USERAUTH_PK_OK packet');\n          }\n          self._debug && self._debug('Inbound: Received USERAUTH_PK_OK');\n          self._authsQueue.shift();\n          const handler = self._handlers.USERAUTH_PK_OK;\n          handler && handler(self, keyAlgo, key);\n          break;\n        }\n      case 'keyboard-interactive':\n        {\n          // S->C\n          /*\n            byte      SSH_MSG_USERAUTH_INFO_REQUEST\n            string    name (ISO-10646 UTF-8)\n            string    instruction (ISO-10646 UTF-8)\n            string    language tag (as defined in [RFC-3066])\n            int       num-prompts\n            string    prompt[1] (ISO-10646 UTF-8)\n            boolean   echo[1]\n            ...\n            string    prompt[num-prompts] (ISO-10646 UTF-8)\n            boolean   echo[num-prompts]\n          */\n          bufferParser.init(payload, 1);\n          const name = bufferParser.readString(true);\n          const instructions = bufferParser.readString(true);\n          bufferParser.readString(); // skip lang\n          const numPrompts = bufferParser.readUInt32BE();\n          let prompts;\n          if (numPrompts !== undefined) {\n            prompts = new Array(numPrompts);\n            let i;\n            for (i = 0; i < numPrompts; ++i) {\n              const prompt = bufferParser.readString(true);\n              const echo = bufferParser.readBool();\n              if (echo === undefined) break;\n              prompts[i] = {\n                prompt,\n                echo\n              };\n            }\n            if (i !== numPrompts) prompts = undefined;\n          }\n          bufferParser.clear();\n          if (prompts === undefined) {\n            return doFatalError(self, 'Inbound: Malformed USERAUTH_INFO_REQUEST packet');\n          }\n          self._debug && self._debug('Inbound: Received USERAUTH_INFO_REQUEST');\n          const handler = self._handlers.USERAUTH_INFO_REQUEST;\n          handler && handler(self, name, instructions, prompts);\n          break;\n        }\n      default:\n        self._debug && self._debug('Inbound: Received unexpected payload type 60');\n    }\n  },\n  61: (self, payload) => {\n    if (!self._authsQueue.length) {\n      self._debug && self._debug('Inbound: Received payload type 61 without auth');\n      return;\n    }\n    /*\n      byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n      int       num-responses\n      string    response[1] (ISO-10646 UTF-8)\n      ...\n      string    response[num-responses] (ISO-10646 UTF-8)\n    */\n    if (self._authsQueue[0] !== 'keyboard-interactive') {\n      return doFatalError(self, 'Inbound: Received unexpected payload type 61');\n    }\n    bufferParser.init(payload, 1);\n    const numResponses = bufferParser.readUInt32BE();\n    let responses;\n    if (numResponses !== undefined) {\n      responses = new Array(numResponses);\n      let i;\n      for (i = 0; i < numResponses; ++i) {\n        const response = bufferParser.readString(true);\n        if (response === undefined) break;\n        responses[i] = response;\n      }\n      if (i !== numResponses) responses = undefined;\n    }\n    bufferParser.clear();\n    if (responses === undefined) {\n      return doFatalError(self, 'Inbound: Malformed USERAUTH_INFO_RESPONSE packet');\n    }\n    self._debug && self._debug('Inbound: Received USERAUTH_INFO_RESPONSE');\n    const handler = self._handlers.USERAUTH_INFO_RESPONSE;\n    handler && handler(self, responses);\n  },\n  // Connection protocol -- generic ============================================\n  [MESSAGE.GLOBAL_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_GLOBAL_REQUEST\n      string    request name in US-ASCII only\n      boolean   want reply\n      ....      request-specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    const wantReply = bufferParser.readBool();\n    let data;\n    if (wantReply !== undefined) {\n      switch (name) {\n        case 'tcpip-forward':\n        case 'cancel-tcpip-forward':\n          {\n            /*\n              string    address to bind (e.g., \"0.0.0.0\")\n              uint32    port number to bind\n            */\n            const bindAddr = bufferParser.readString(true);\n            const bindPort = bufferParser.readUInt32BE();\n            if (bindPort !== undefined) data = {\n              bindAddr,\n              bindPort\n            };\n            break;\n          }\n        case 'streamlocal-forward@openssh.com':\n        case 'cancel-streamlocal-forward@openssh.com':\n          {\n            /*\n              string    socket path\n            */\n            const socketPath = bufferParser.readString(true);\n            if (socketPath !== undefined) data = {\n              socketPath\n            };\n            break;\n          }\n        case 'no-more-sessions@openssh.com':\n          data = null;\n          break;\n        case 'hostkeys-00@openssh.com':\n          {\n            data = [];\n            while (bufferParser.avail() > 0) {\n              const keyRaw = bufferParser.readString();\n              if (keyRaw === undefined) {\n                data = undefined;\n                break;\n              }\n              const key = parseKey(keyRaw);\n              if (!(key instanceof Error)) data.push(key);\n            }\n            break;\n          }\n        default:\n          data = bufferParser.readRaw();\n      }\n    }\n    bufferParser.clear();\n    if (data === undefined) {\n      return doFatalError(self, 'Inbound: Malformed GLOBAL_REQUEST packet');\n    }\n    self._debug && self._debug(`Inbound: GLOBAL_REQUEST (${name})`);\n    const handler = self._handlers.GLOBAL_REQUEST;\n    if (handler) handler(self, name, wantReply, data);else self.requestFailure(); // Auto reject\n  },\n\n  [MESSAGE.REQUEST_SUCCESS]: (self, payload) => {\n    /*\n      byte      SSH_MSG_REQUEST_SUCCESS\n      ....     response specific data\n    */\n    const data = payload.length > 1 ? bufferSlice(payload, 1) : null;\n    self._debug && self._debug('Inbound: REQUEST_SUCCESS');\n    const handler = self._handlers.REQUEST_SUCCESS;\n    handler && handler(self, data);\n  },\n  [MESSAGE.REQUEST_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_REQUEST_FAILURE\n    */\n    self._debug && self._debug('Inbound: Received REQUEST_FAILURE');\n    const handler = self._handlers.REQUEST_FAILURE;\n    handler && handler(self);\n  },\n  // Connection protocol -- channel-related ====================================\n  [MESSAGE.CHANNEL_OPEN]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN\n      string    channel type in US-ASCII only\n      uint32    sender channel\n      uint32    initial window size\n      uint32    maximum packet size\n      ....      channel type specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const type = bufferParser.readString(true);\n    const sender = bufferParser.readUInt32BE();\n    const window = bufferParser.readUInt32BE();\n    const packetSize = bufferParser.readUInt32BE();\n    let channelInfo;\n    switch (type) {\n      case 'forwarded-tcpip': // S->C\n      case 'direct-tcpip':\n        {\n          // C->S\n          /*\n            string    address that was connected / host to connect\n            uint32    port that was connected / port to connect\n            string    originator IP address\n            uint32    originator port\n          */\n          const destIP = bufferParser.readString(true);\n          const destPort = bufferParser.readUInt32BE();\n          const srcIP = bufferParser.readString(true);\n          const srcPort = bufferParser.readUInt32BE();\n          if (srcPort !== undefined) {\n            channelInfo = {\n              type,\n              sender,\n              window,\n              packetSize,\n              data: {\n                destIP,\n                destPort,\n                srcIP,\n                srcPort\n              }\n            };\n          }\n          break;\n        }\n      case 'forwarded-streamlocal@openssh.com': // S->C\n      case 'direct-streamlocal@openssh.com':\n        {\n          // C->S\n          /*\n            string    socket path\n            string    reserved for future use\n             (direct-streamlocal@openssh.com additionally has:)\n            uint32    reserved\n          */\n          const socketPath = bufferParser.readString(true);\n          if (socketPath !== undefined) {\n            channelInfo = {\n              type,\n              sender,\n              window,\n              packetSize,\n              data: {\n                socketPath\n              }\n            };\n          }\n          break;\n        }\n      case 'x11':\n        {\n          // S->C\n          /*\n            string    originator address (e.g., \"192.168.7.38\")\n            uint32    originator port\n          */\n          const srcIP = bufferParser.readString(true);\n          const srcPort = bufferParser.readUInt32BE();\n          if (srcPort !== undefined) {\n            channelInfo = {\n              type,\n              sender,\n              window,\n              packetSize,\n              data: {\n                srcIP,\n                srcPort\n              }\n            };\n          }\n          break;\n        }\n      default:\n        // Includes:\n        //   'session' (C->S)\n        //   'auth-agent@openssh.com' (S->C)\n        channelInfo = {\n          type,\n          sender,\n          window,\n          packetSize,\n          data: {}\n        };\n    }\n    bufferParser.clear();\n    if (channelInfo === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_OPEN packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_OPEN (s:${sender}, ${type})`);\n    const handler = self._handlers.CHANNEL_OPEN;\n    if (handler) {\n      handler(self, channelInfo);\n    } else {\n      self.channelOpenFail(channelInfo.sender, CHANNEL_OPEN_FAILURE.ADMINISTRATIVELY_PROHIBITED, '', '');\n    }\n  },\n  [MESSAGE.CHANNEL_OPEN_CONFIRMATION]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN_CONFIRMATION\n      uint32    recipient channel\n      uint32    sender channel\n      uint32    initial window size\n      uint32    maximum packet size\n      ....      channel type specific data follows\n    */\n    // \"The 'recipient channel' is the channel number given in the\n    // original open request, and 'sender channel' is the channel number\n    // allocated by the other side.\"\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const sender = bufferParser.readUInt32BE();\n    const window = bufferParser.readUInt32BE();\n    const packetSize = bufferParser.readUInt32BE();\n    const data = bufferParser.avail() ? bufferParser.readRaw() : undefined;\n    bufferParser.clear();\n    if (packetSize === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_OPEN_CONFIRMATION packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_OPEN_CONFIRMATION (r:${recipient}, s:${sender})`);\n    const handler = self._handlers.CHANNEL_OPEN_CONFIRMATION;\n    if (handler) handler(self, {\n      recipient,\n      sender,\n      window,\n      packetSize,\n      data\n    });\n  },\n  [MESSAGE.CHANNEL_OPEN_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN_FAILURE\n      uint32    recipient channel\n      uint32    reason code\n      string    description in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const reason = bufferParser.readUInt32BE();\n    const description = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n    if (lang === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_OPEN_FAILURE packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_OPEN_FAILURE (r:${recipient})`);\n    const handler = self._handlers.CHANNEL_OPEN_FAILURE;\n    handler && handler(self, recipient, reason, description);\n  },\n  [MESSAGE.CHANNEL_WINDOW_ADJUST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_WINDOW_ADJUST\n      uint32    recipient channel\n      uint32    bytes to add\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const bytesToAdd = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (bytesToAdd === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_WINDOW_ADJUST packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_WINDOW_ADJUST (r:${recipient}, ${bytesToAdd})`);\n    const handler = self._handlers.CHANNEL_WINDOW_ADJUST;\n    handler && handler(self, recipient, bytesToAdd);\n  },\n  [MESSAGE.CHANNEL_DATA]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_DATA\n      uint32    recipient channel\n      string    data\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const data = bufferParser.readString();\n    bufferParser.clear();\n    if (data === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_DATA packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_DATA (r:${recipient}, ${data.length})`);\n    const handler = self._handlers.CHANNEL_DATA;\n    handler && handler(self, recipient, data);\n  },\n  [MESSAGE.CHANNEL_EXTENDED_DATA]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_EXTENDED_DATA\n      uint32    recipient channel\n      uint32    data_type_code\n      string    data\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const type = bufferParser.readUInt32BE();\n    const data = bufferParser.readString();\n    bufferParser.clear();\n    if (data === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_EXTENDED_DATA packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_EXTENDED_DATA (r:${recipient}, ${data.length})`);\n    const handler = self._handlers.CHANNEL_EXTENDED_DATA;\n    handler && handler(self, recipient, data, type);\n  },\n  [MESSAGE.CHANNEL_EOF]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_EOF\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (recipient === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_EOF packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_EOF (r:${recipient})`);\n    const handler = self._handlers.CHANNEL_EOF;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_CLOSE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_CLOSE\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (recipient === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_CLOSE packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_CLOSE (r:${recipient})`);\n    const handler = self._handlers.CHANNEL_CLOSE;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient channel\n      string    request type in US-ASCII characters only\n      boolean   want reply\n      ....      type-specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const type = bufferParser.readString(true);\n    const wantReply = bufferParser.readBool();\n    let data;\n    if (wantReply !== undefined) {\n      switch (type) {\n        case 'exit-status':\n          // S->C\n          /*\n            uint32    exit_status\n          */\n          data = bufferParser.readUInt32BE();\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`);\n          break;\n        case 'exit-signal':\n          {\n            // S->C\n            /*\n              string    signal name (without the \"SIG\" prefix)\n              boolean   core dumped\n              string    error message in ISO-10646 UTF-8 encoding\n              string    language tag\n            */\n            let signal;\n            let coreDumped;\n            if (self._compatFlags & COMPAT.OLD_EXIT) {\n              /*\n                Instead of `signal name` and `core dumped`, we have just:\n                  uint32  signal number\n              */\n              const num = bufferParser.readUInt32BE();\n              switch (num) {\n                case 1:\n                  signal = 'HUP';\n                  break;\n                case 2:\n                  signal = 'INT';\n                  break;\n                case 3:\n                  signal = 'QUIT';\n                  break;\n                case 6:\n                  signal = 'ABRT';\n                  break;\n                case 9:\n                  signal = 'KILL';\n                  break;\n                case 14:\n                  signal = 'ALRM';\n                  break;\n                case 15:\n                  signal = 'TERM';\n                  break;\n                default:\n                  if (num !== undefined) {\n                    // Unknown or OS-specific\n                    signal = `UNKNOWN (${num})`;\n                  }\n              }\n              coreDumped = false;\n            } else {\n              signal = bufferParser.readString(true);\n              coreDumped = bufferParser.readBool();\n              if (coreDumped === undefined) signal = undefined;\n            }\n            const errorMessage = bufferParser.readString(true);\n            if (bufferParser.skipString() !== undefined) data = {\n              signal,\n              coreDumped,\n              errorMessage\n            };\n            self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${signal})`);\n            break;\n          }\n        case 'pty-req':\n          {\n            // C->S\n            /*\n              string    TERM environment variable value (e.g., vt100)\n              uint32    terminal width, characters (e.g., 80)\n              uint32    terminal height, rows (e.g., 24)\n              uint32    terminal width, pixels (e.g., 640)\n              uint32    terminal height, pixels (e.g., 480)\n              string    encoded terminal modes\n            */\n            const term = bufferParser.readString(true);\n            const cols = bufferParser.readUInt32BE();\n            const rows = bufferParser.readUInt32BE();\n            const width = bufferParser.readUInt32BE();\n            const height = bufferParser.readUInt32BE();\n            const modesBinary = bufferParser.readString();\n            if (modesBinary !== undefined) {\n              bufferParser.init(modesBinary, 1);\n              let modes = {};\n              while (bufferParser.avail()) {\n                const opcode = bufferParser.readByte();\n                if (opcode === TERMINAL_MODE.TTY_OP_END) break;\n                const name = TERMINAL_MODE_BY_VALUE[opcode];\n                const value = bufferParser.readUInt32BE();\n                if (opcode === undefined || name === undefined || value === undefined) {\n                  modes = undefined;\n                  break;\n                }\n                modes[name] = value;\n              }\n              if (modes !== undefined) data = {\n                term,\n                cols,\n                rows,\n                width,\n                height,\n                modes\n              };\n            }\n            self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n            break;\n          }\n        case 'window-change':\n          {\n            // C->S\n            /*\n              uint32    terminal width, columns\n              uint32    terminal height, rows\n              uint32    terminal width, pixels\n              uint32    terminal height, pixels\n            */\n            const cols = bufferParser.readUInt32BE();\n            const rows = bufferParser.readUInt32BE();\n            const width = bufferParser.readUInt32BE();\n            const height = bufferParser.readUInt32BE();\n            if (height !== undefined) data = {\n              cols,\n              rows,\n              width,\n              height\n            };\n            self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n            break;\n          }\n        case 'x11-req':\n          {\n            // C->S\n            /*\n              boolean   single connection\n              string    x11 authentication protocol\n              string    x11 authentication cookie\n              uint32    x11 screen number\n            */\n            const single = bufferParser.readBool();\n            const protocol = bufferParser.readString(true);\n            const cookie = bufferParser.readString();\n            const screen = bufferParser.readUInt32BE();\n            if (screen !== undefined) data = {\n              single,\n              protocol,\n              cookie,\n              screen\n            };\n            self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n            break;\n          }\n        case 'env':\n          {\n            // C->S\n            /*\n              string    variable name\n              string    variable value\n            */\n            const name = bufferParser.readString(true);\n            const value = bufferParser.readString(true);\n            if (value !== undefined) data = {\n              name,\n              value\n            };\n            if (self._debug) {\n              self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ` + `${name}=${value})`);\n            }\n            break;\n          }\n        case 'shell':\n          // C->S\n          data = null; // No extra data\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n          break;\n        case 'exec':\n          // C->S\n          /*\n            string    command\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`);\n          break;\n        case 'subsystem':\n          // C->S\n          /*\n            string    subsystem name\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`);\n          break;\n        case 'signal':\n          // C->S\n          /*\n            string    signal name (without the \"SIG\" prefix)\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`);\n          break;\n        case 'xon-xoff':\n          // C->S\n          /*\n            boolean   client can do\n          */\n          data = bufferParser.readBool();\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`);\n          break;\n        case 'auth-agent-req@openssh.com':\n          // C-S\n          data = null; // No extra data\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n          break;\n        default:\n          data = bufferParser.avail() ? bufferParser.readRaw() : null;\n          self._debug && self._debug(`Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`);\n      }\n    }\n    bufferParser.clear();\n    if (data === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_REQUEST packet');\n    }\n    const handler = self._handlers.CHANNEL_REQUEST;\n    handler && handler(self, recipient, type, wantReply, data);\n  },\n  [MESSAGE.CHANNEL_SUCCESS]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_SUCCESS\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (recipient === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_SUCCESS packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_SUCCESS (r:${recipient})`);\n    const handler = self._handlers.CHANNEL_SUCCESS;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_FAILURE\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n    if (recipient === undefined) {\n      return doFatalError(self, 'Inbound: Malformed CHANNEL_FAILURE packet');\n    }\n    self._debug && self._debug(`Inbound: CHANNEL_FAILURE (r:${recipient})`);\n    const handler = self._handlers.CHANNEL_FAILURE;\n    handler && handler(self, recipient);\n  }\n};","map":{"version":3,"names":["bufferSlice","bufferParser","doFatalError","sigSSHToASN1","writeUInt32BE","require","CHANNEL_OPEN_FAILURE","COMPAT","MESSAGE","TERMINAL_MODE","parseKey","TERMINAL_MODE_BY_VALUE","Array","from","Object","entries","reduce","obj","_ref","key","value","module","exports","DISCONNECT","self","payload","init","reason","readUInt32BE","desc","readString","lang","clear","undefined","_debug","handler","_handlers","IGNORE","UNIMPLEMENTED","seqno","DEBUG","display","readBool","msg","SERVICE_REQUEST","name","SERVICE_ACCEPT","USERAUTH_REQUEST","user","service","method","methodData","methodDesc","isChange","newPassword","oldPassword","hasSig","keyAlgo","blobEnd","pos","signature","length","utf8Slice","sessionID","_kex","blob","Buffer","allocUnsafe","set","Uint8Array","buffer","byteOffset","localHostname","localUsername","skipString","readList","readRaw","_authsQueue","push","USERAUTH_FAILURE","authMethods","partialSuccess","shift","USERAUTH_SUCCESS","USERAUTH_BANNER","prompt","USERAUTH_PASSWD_CHANGEREQ","USERAUTH_PK_OK","instructions","numPrompts","prompts","i","echo","USERAUTH_INFO_REQUEST","numResponses","responses","response","USERAUTH_INFO_RESPONSE","GLOBAL_REQUEST","wantReply","data","bindAddr","bindPort","socketPath","avail","keyRaw","Error","requestFailure","REQUEST_SUCCESS","REQUEST_FAILURE","CHANNEL_OPEN","type","sender","window","packetSize","channelInfo","destIP","destPort","srcIP","srcPort","channelOpenFail","ADMINISTRATIVELY_PROHIBITED","CHANNEL_OPEN_CONFIRMATION","recipient","description","CHANNEL_WINDOW_ADJUST","bytesToAdd","CHANNEL_DATA","CHANNEL_EXTENDED_DATA","CHANNEL_EOF","CHANNEL_CLOSE","CHANNEL_REQUEST","signal","coreDumped","_compatFlags","OLD_EXIT","num","errorMessage","term","cols","rows","width","height","modesBinary","modes","opcode","readByte","TTY_OP_END","single","protocol","cookie","screen","CHANNEL_SUCCESS","CHANNEL_FAILURE"],"sources":["C:/Users/hummas/Desktop/React/food-ordering-app/node_modules/ssh2/lib/protocol/handlers.misc.js"],"sourcesContent":["'use strict';\n\nconst {\n  bufferSlice,\n  bufferParser,\n  doFatalError,\n  sigSSHToASN1,\n  writeUInt32BE,\n} = require('./utils.js');\n\nconst {\n  CHANNEL_OPEN_FAILURE,\n  COMPAT,\n  MESSAGE,\n  TERMINAL_MODE,\n} = require('./constants.js');\n\nconst {\n  parseKey,\n} = require('./keyParser.js');\n\nconst TERMINAL_MODE_BY_VALUE =\n  Array.from(Object.entries(TERMINAL_MODE))\n       .reduce((obj, [key, value]) => ({ ...obj, [key]: value }), {});\n\nmodule.exports = {\n  // Transport layer protocol ==================================================\n  [MESSAGE.DISCONNECT]: (self, payload) => {\n    /*\n      byte      SSH_MSG_DISCONNECT\n      uint32    reason code\n      string    description in ISO-10646 UTF-8 encoding\n      string    language tag\n    */\n    bufferParser.init(payload, 1);\n    const reason = bufferParser.readUInt32BE();\n    const desc = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n\n    if (lang === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed DISCONNECT packet'\n      );\n    }\n\n    self._debug && self._debug(\n      `Inbound: Received DISCONNECT (${reason}, \"${desc}\")`\n    );\n\n    const handler = self._handlers.DISCONNECT;\n    handler && handler(self, reason, desc);\n  },\n  [MESSAGE.IGNORE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_IGNORE\n      string    data\n    */\n    self._debug && self._debug('Inbound: Received IGNORE');\n  },\n  [MESSAGE.UNIMPLEMENTED]: (self, payload) => {\n    /*\n      byte      SSH_MSG_UNIMPLEMENTED\n      uint32    packet sequence number of rejected message\n    */\n    bufferParser.init(payload, 1);\n    const seqno = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (seqno === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed UNIMPLEMENTED packet'\n      );\n    }\n\n    self._debug\n      && self._debug(`Inbound: Received UNIMPLEMENTED (seqno ${seqno})`);\n  },\n  [MESSAGE.DEBUG]: (self, payload) => {\n    /*\n      byte      SSH_MSG_DEBUG\n      boolean   always_display\n      string    message in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const display = bufferParser.readBool();\n    const msg = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n\n    if (lang === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed DEBUG packet'\n      );\n    }\n\n    self._debug && self._debug('Inbound: Received DEBUG');\n\n    const handler = self._handlers.DEBUG;\n    handler && handler(self, display, msg);\n  },\n  [MESSAGE.SERVICE_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_SERVICE_REQUEST\n      string    service name\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (name === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed SERVICE_REQUEST packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: Received SERVICE_REQUEST (${name})`);\n\n    const handler = self._handlers.SERVICE_REQUEST;\n    handler && handler(self, name);\n  },\n  [MESSAGE.SERVICE_ACCEPT]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_SERVICE_ACCEPT\n      string    service name\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    bufferParser.clear();\n\n    if (name === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed SERVICE_ACCEPT packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: Received SERVICE_ACCEPT (${name})`);\n\n    const handler = self._handlers.SERVICE_ACCEPT;\n    handler && handler(self, name);\n  },\n\n  // User auth protocol -- generic =============================================\n  [MESSAGE.USERAUTH_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_USERAUTH_REQUEST\n      string    user name in ISO-10646 UTF-8 encoding [RFC3629]\n      string    service name in US-ASCII\n      string    method name in US-ASCII\n      ....      method specific fields\n    */\n    bufferParser.init(payload, 1);\n    const user = bufferParser.readString(true);\n    const service = bufferParser.readString(true);\n    const method = bufferParser.readString(true);\n    let methodData;\n    let methodDesc;\n    switch (method) {\n      case 'none':\n        methodData = null;\n        break;\n      case 'password': {\n        /*\n          boolean   <new password follows (old) plaintext password?>\n          string    plaintext password in ISO-10646 UTF-8 encoding [RFC3629]\n         [string    new password]\n        */\n        const isChange = bufferParser.readBool();\n        if (isChange !== undefined) {\n          methodData = bufferParser.readString(true);\n          if (methodData !== undefined && isChange) {\n            const newPassword = bufferParser.readString(true);\n            if (newPassword !== undefined)\n              methodData = { oldPassword: methodData, newPassword };\n            else\n              methodData = undefined;\n          }\n        }\n        break;\n      }\n      case 'publickey': {\n        /*\n          boolean   <signature follows public key blob?>\n          string    public key algorithm name\n          string    public key blob\n         [string    signature]\n        */\n        const hasSig = bufferParser.readBool();\n        if (hasSig !== undefined) {\n          const keyAlgo = bufferParser.readString(true);\n          const key = bufferParser.readString();\n          if (hasSig) {\n            const blobEnd = bufferParser.pos();\n            let signature = bufferParser.readString();\n            if (signature !== undefined) {\n              if (signature.length > (4 + keyAlgo.length + 4)\n                  && signature.utf8Slice(4, 4 + keyAlgo.length) === keyAlgo) {\n                // Skip algoLen + algo + sigLen\n                signature = bufferSlice(signature, 4 + keyAlgo.length + 4);\n              }\n\n              signature = sigSSHToASN1(signature, keyAlgo);\n              if (signature) {\n                const sessionID = self._kex.sessionID;\n                const blob = Buffer.allocUnsafe(4 + sessionID.length + blobEnd);\n                writeUInt32BE(blob, sessionID.length, 0);\n                blob.set(sessionID, 4);\n                blob.set(\n                  new Uint8Array(payload.buffer, payload.byteOffset, blobEnd),\n                  4 + sessionID.length\n                );\n                methodData = {\n                  keyAlgo,\n                  key,\n                  signature,\n                  blob,\n                };\n              }\n            }\n          } else {\n            methodData = { keyAlgo, key };\n            methodDesc = 'publickey -- check';\n          }\n        }\n        break;\n      }\n      case 'hostbased': {\n        /*\n          string    public key algorithm for host key\n          string    public host key and certificates for client host\n          string    client host name expressed as the FQDN in US-ASCII\n          string    user name on the client host in ISO-10646 UTF-8 encoding\n                     [RFC3629]\n          string    signature\n        */\n        const keyAlgo = bufferParser.readString(true);\n        const key = bufferParser.readString();\n        const localHostname = bufferParser.readString(true);\n        const localUsername = bufferParser.readString(true);\n\n        const blobEnd = bufferParser.pos();\n        let signature = bufferParser.readString();\n        if (signature !== undefined) {\n          if (signature.length > (4 + keyAlgo.length + 4)\n              && signature.utf8Slice(4, 4 + keyAlgo.length) === keyAlgo) {\n            // Skip algoLen + algo + sigLen\n            signature = bufferSlice(signature, 4 + keyAlgo.length + 4);\n          }\n\n          signature = sigSSHToASN1(signature, keyAlgo);\n          if (signature !== undefined) {\n            const sessionID = self._kex.sessionID;\n            const blob = Buffer.allocUnsafe(4 + sessionID.length + blobEnd);\n            writeUInt32BE(blob, sessionID.length, 0);\n            blob.set(sessionID, 4);\n            blob.set(\n              new Uint8Array(payload.buffer, payload.byteOffset, blobEnd),\n              4 + sessionID.length\n            );\n            methodData = {\n              keyAlgo,\n              key,\n              signature,\n              blob,\n              localHostname,\n              localUsername,\n            };\n          }\n        }\n        break;\n      }\n      case 'keyboard-interactive':\n        /*\n          string    language tag (as defined in [RFC-3066])\n          string    submethods (ISO-10646 UTF-8)\n        */\n        // Skip/ignore language field -- it's deprecated in RFC 4256\n        bufferParser.skipString();\n\n        methodData = bufferParser.readList();\n        break;\n      default:\n        if (method !== undefined)\n          methodData = bufferParser.readRaw();\n    }\n    bufferParser.clear();\n\n    if (methodData === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed USERAUTH_REQUEST packet'\n      );\n    }\n\n    if (methodDesc === undefined)\n      methodDesc = method;\n\n    self._authsQueue.push(method);\n\n    self._debug\n      && self._debug(`Inbound: Received USERAUTH_REQUEST (${methodDesc})`);\n\n    const handler = self._handlers.USERAUTH_REQUEST;\n    handler && handler(self, user, service, method, methodData);\n  },\n  [MESSAGE.USERAUTH_FAILURE]: (self, payload) => {\n    // S->C\n    /*\n      byte         SSH_MSG_USERAUTH_FAILURE\n      name-list    authentications that can continue\n      boolean      partial success\n    */\n    bufferParser.init(payload, 1);\n    const authMethods = bufferParser.readList();\n    const partialSuccess = bufferParser.readBool();\n    bufferParser.clear();\n\n    if (partialSuccess === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed USERAUTH_FAILURE packet'\n      );\n    }\n\n    self._debug\n      && self._debug(`Inbound: Received USERAUTH_FAILURE (${authMethods})`);\n\n    self._authsQueue.shift();\n    const handler = self._handlers.USERAUTH_FAILURE;\n    handler && handler(self, authMethods, partialSuccess);\n  },\n  [MESSAGE.USERAUTH_SUCCESS]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_USERAUTH_SUCCESS\n    */\n    self._debug && self._debug('Inbound: Received USERAUTH_SUCCESS');\n\n    self._authsQueue.shift();\n    const handler = self._handlers.USERAUTH_SUCCESS;\n    handler && handler(self);\n  },\n  [MESSAGE.USERAUTH_BANNER]: (self, payload) => {\n    // S->C\n    /*\n      byte      SSH_MSG_USERAUTH_BANNER\n      string    message in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const msg = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n\n    if (lang === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed USERAUTH_BANNER packet'\n      );\n    }\n\n    self._debug && self._debug('Inbound: Received USERAUTH_BANNER');\n\n    const handler = self._handlers.USERAUTH_BANNER;\n    handler && handler(self, msg);\n  },\n\n  // User auth protocol -- method-specific =====================================\n  60: (self, payload) => {\n    if (!self._authsQueue.length) {\n      self._debug\n        && self._debug('Inbound: Received payload type 60 without auth');\n      return;\n    }\n\n    switch (self._authsQueue[0]) {\n      case 'password': {\n        // S->C\n        /*\n          byte      SSH_MSG_USERAUTH_PASSWD_CHANGEREQ\n          string    prompt in ISO-10646 UTF-8 encoding [RFC3629]\n          string    language tag [RFC3066]\n        */\n        bufferParser.init(payload, 1);\n        const prompt = bufferParser.readString(true);\n        const lang = bufferParser.readString();\n        bufferParser.clear();\n\n        if (lang === undefined) {\n          return doFatalError(\n            self,\n            'Inbound: Malformed USERAUTH_PASSWD_CHANGEREQ packet'\n          );\n        }\n\n        self._debug\n          && self._debug('Inbound: Received USERAUTH_PASSWD_CHANGEREQ');\n\n        const handler = self._handlers.USERAUTH_PASSWD_CHANGEREQ;\n        handler && handler(self, prompt);\n        break;\n      }\n      case 'publickey': {\n        // S->C\n        /*\n          byte      SSH_MSG_USERAUTH_PK_OK\n          string    public key algorithm name from the request\n          string    public key blob from the request\n        */\n        bufferParser.init(payload, 1);\n        const keyAlgo = bufferParser.readString(true);\n        const key = bufferParser.readString();\n        bufferParser.clear();\n\n        if (key === undefined) {\n          return doFatalError(\n            self,\n            'Inbound: Malformed USERAUTH_PK_OK packet'\n          );\n        }\n\n        self._debug && self._debug('Inbound: Received USERAUTH_PK_OK');\n\n        self._authsQueue.shift();\n        const handler = self._handlers.USERAUTH_PK_OK;\n        handler && handler(self, keyAlgo, key);\n        break;\n      }\n      case 'keyboard-interactive': {\n        // S->C\n        /*\n          byte      SSH_MSG_USERAUTH_INFO_REQUEST\n          string    name (ISO-10646 UTF-8)\n          string    instruction (ISO-10646 UTF-8)\n          string    language tag (as defined in [RFC-3066])\n          int       num-prompts\n          string    prompt[1] (ISO-10646 UTF-8)\n          boolean   echo[1]\n          ...\n          string    prompt[num-prompts] (ISO-10646 UTF-8)\n          boolean   echo[num-prompts]\n        */\n        bufferParser.init(payload, 1);\n        const name = bufferParser.readString(true);\n        const instructions = bufferParser.readString(true);\n        bufferParser.readString(); // skip lang\n        const numPrompts = bufferParser.readUInt32BE();\n        let prompts;\n        if (numPrompts !== undefined) {\n          prompts = new Array(numPrompts);\n          let i;\n          for (i = 0; i < numPrompts; ++i) {\n            const prompt = bufferParser.readString(true);\n            const echo = bufferParser.readBool();\n            if (echo === undefined)\n              break;\n            prompts[i] = { prompt, echo };\n          }\n          if (i !== numPrompts)\n            prompts = undefined;\n        }\n        bufferParser.clear();\n\n        if (prompts === undefined) {\n          return doFatalError(\n            self,\n            'Inbound: Malformed USERAUTH_INFO_REQUEST packet'\n          );\n        }\n\n        self._debug && self._debug('Inbound: Received USERAUTH_INFO_REQUEST');\n\n        const handler = self._handlers.USERAUTH_INFO_REQUEST;\n        handler && handler(self, name, instructions, prompts);\n        break;\n      }\n      default:\n        self._debug\n          && self._debug('Inbound: Received unexpected payload type 60');\n    }\n  },\n  61: (self, payload) => {\n    if (!self._authsQueue.length) {\n      self._debug\n        && self._debug('Inbound: Received payload type 61 without auth');\n      return;\n    }\n    /*\n      byte      SSH_MSG_USERAUTH_INFO_RESPONSE\n      int       num-responses\n      string    response[1] (ISO-10646 UTF-8)\n      ...\n      string    response[num-responses] (ISO-10646 UTF-8)\n    */\n    if (self._authsQueue[0] !== 'keyboard-interactive') {\n      return doFatalError(\n        self,\n        'Inbound: Received unexpected payload type 61'\n      );\n    }\n    bufferParser.init(payload, 1);\n    const numResponses = bufferParser.readUInt32BE();\n    let responses;\n    if (numResponses !== undefined) {\n      responses = new Array(numResponses);\n      let i;\n      for (i = 0; i < numResponses; ++i) {\n        const response = bufferParser.readString(true);\n        if (response === undefined)\n          break;\n        responses[i] = response;\n      }\n      if (i !== numResponses)\n        responses = undefined;\n    }\n    bufferParser.clear();\n\n    if (responses === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed USERAUTH_INFO_RESPONSE packet'\n      );\n    }\n\n    self._debug && self._debug('Inbound: Received USERAUTH_INFO_RESPONSE');\n\n    const handler = self._handlers.USERAUTH_INFO_RESPONSE;\n    handler && handler(self, responses);\n  },\n\n  // Connection protocol -- generic ============================================\n  [MESSAGE.GLOBAL_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_GLOBAL_REQUEST\n      string    request name in US-ASCII only\n      boolean   want reply\n      ....      request-specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const name = bufferParser.readString(true);\n    const wantReply = bufferParser.readBool();\n    let data;\n    if (wantReply !== undefined) {\n      switch (name) {\n        case 'tcpip-forward':\n        case 'cancel-tcpip-forward': {\n          /*\n            string    address to bind (e.g., \"0.0.0.0\")\n            uint32    port number to bind\n          */\n          const bindAddr = bufferParser.readString(true);\n          const bindPort = bufferParser.readUInt32BE();\n          if (bindPort !== undefined)\n            data = { bindAddr, bindPort };\n          break;\n        }\n        case 'streamlocal-forward@openssh.com':\n        case 'cancel-streamlocal-forward@openssh.com': {\n          /*\n            string    socket path\n          */\n          const socketPath = bufferParser.readString(true);\n          if (socketPath !== undefined)\n            data = { socketPath };\n          break;\n        }\n        case 'no-more-sessions@openssh.com':\n          data = null;\n          break;\n        case 'hostkeys-00@openssh.com': {\n          data = [];\n          while (bufferParser.avail() > 0) {\n            const keyRaw = bufferParser.readString();\n            if (keyRaw === undefined) {\n              data = undefined;\n              break;\n            }\n            const key = parseKey(keyRaw);\n            if (!(key instanceof Error))\n              data.push(key);\n          }\n          break;\n        }\n        default:\n          data = bufferParser.readRaw();\n      }\n    }\n    bufferParser.clear();\n\n    if (data === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed GLOBAL_REQUEST packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: GLOBAL_REQUEST (${name})`);\n\n    const handler = self._handlers.GLOBAL_REQUEST;\n    if (handler)\n      handler(self, name, wantReply, data);\n    else\n      self.requestFailure(); // Auto reject\n  },\n  [MESSAGE.REQUEST_SUCCESS]: (self, payload) => {\n    /*\n      byte      SSH_MSG_REQUEST_SUCCESS\n      ....     response specific data\n    */\n    const data = (payload.length > 1 ? bufferSlice(payload, 1) : null);\n\n    self._debug && self._debug('Inbound: REQUEST_SUCCESS');\n\n    const handler = self._handlers.REQUEST_SUCCESS;\n    handler && handler(self, data);\n  },\n  [MESSAGE.REQUEST_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_REQUEST_FAILURE\n    */\n    self._debug && self._debug('Inbound: Received REQUEST_FAILURE');\n\n    const handler = self._handlers.REQUEST_FAILURE;\n    handler && handler(self);\n  },\n\n  // Connection protocol -- channel-related ====================================\n  [MESSAGE.CHANNEL_OPEN]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN\n      string    channel type in US-ASCII only\n      uint32    sender channel\n      uint32    initial window size\n      uint32    maximum packet size\n      ....      channel type specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const type = bufferParser.readString(true);\n    const sender = bufferParser.readUInt32BE();\n    const window = bufferParser.readUInt32BE();\n    const packetSize = bufferParser.readUInt32BE();\n    let channelInfo;\n\n    switch (type) {\n      case 'forwarded-tcpip': // S->C\n      case 'direct-tcpip': { // C->S\n        /*\n          string    address that was connected / host to connect\n          uint32    port that was connected / port to connect\n          string    originator IP address\n          uint32    originator port\n        */\n        const destIP = bufferParser.readString(true);\n        const destPort = bufferParser.readUInt32BE();\n        const srcIP = bufferParser.readString(true);\n        const srcPort = bufferParser.readUInt32BE();\n        if (srcPort !== undefined) {\n          channelInfo = {\n            type,\n            sender,\n            window,\n            packetSize,\n            data: { destIP, destPort, srcIP, srcPort }\n          };\n        }\n        break;\n      }\n      case 'forwarded-streamlocal@openssh.com': // S->C\n      case 'direct-streamlocal@openssh.com': { // C->S\n        /*\n          string    socket path\n          string    reserved for future use\n\n          (direct-streamlocal@openssh.com additionally has:)\n          uint32    reserved\n        */\n        const socketPath = bufferParser.readString(true);\n        if (socketPath !== undefined) {\n          channelInfo = {\n            type,\n            sender,\n            window,\n            packetSize,\n            data: { socketPath }\n          };\n        }\n        break;\n      }\n      case 'x11': { // S->C\n        /*\n          string    originator address (e.g., \"192.168.7.38\")\n          uint32    originator port\n        */\n        const srcIP = bufferParser.readString(true);\n        const srcPort = bufferParser.readUInt32BE();\n        if (srcPort !== undefined) {\n          channelInfo = {\n            type,\n            sender,\n            window,\n            packetSize,\n            data: { srcIP, srcPort }\n          };\n        }\n        break;\n      }\n      default:\n        // Includes:\n        //   'session' (C->S)\n        //   'auth-agent@openssh.com' (S->C)\n        channelInfo = {\n          type,\n          sender,\n          window,\n          packetSize,\n          data: {}\n        };\n    }\n    bufferParser.clear();\n\n    if (channelInfo === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_OPEN packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: CHANNEL_OPEN (s:${sender}, ${type})`);\n\n    const handler = self._handlers.CHANNEL_OPEN;\n    if (handler) {\n      handler(self, channelInfo);\n    } else {\n      self.channelOpenFail(\n        channelInfo.sender,\n        CHANNEL_OPEN_FAILURE.ADMINISTRATIVELY_PROHIBITED,\n        '',\n        ''\n      );\n    }\n  },\n  [MESSAGE.CHANNEL_OPEN_CONFIRMATION]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN_CONFIRMATION\n      uint32    recipient channel\n      uint32    sender channel\n      uint32    initial window size\n      uint32    maximum packet size\n      ....      channel type specific data follows\n    */\n    // \"The 'recipient channel' is the channel number given in the\n    // original open request, and 'sender channel' is the channel number\n    // allocated by the other side.\"\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const sender = bufferParser.readUInt32BE();\n    const window = bufferParser.readUInt32BE();\n    const packetSize = bufferParser.readUInt32BE();\n    const data = (bufferParser.avail() ? bufferParser.readRaw() : undefined);\n    bufferParser.clear();\n\n    if (packetSize === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_OPEN_CONFIRMATION packet'\n      );\n    }\n\n    self._debug && self._debug(\n      `Inbound: CHANNEL_OPEN_CONFIRMATION (r:${recipient}, s:${sender})`\n    );\n\n    const handler = self._handlers.CHANNEL_OPEN_CONFIRMATION;\n    if (handler)\n      handler(self, { recipient, sender, window, packetSize, data });\n  },\n  [MESSAGE.CHANNEL_OPEN_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_OPEN_FAILURE\n      uint32    recipient channel\n      uint32    reason code\n      string    description in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language tag [RFC3066]\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const reason = bufferParser.readUInt32BE();\n    const description = bufferParser.readString(true);\n    const lang = bufferParser.readString();\n    bufferParser.clear();\n\n    if (lang === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_OPEN_FAILURE packet'\n      );\n    }\n\n    self._debug\n      && self._debug(`Inbound: CHANNEL_OPEN_FAILURE (r:${recipient})`);\n\n    const handler = self._handlers.CHANNEL_OPEN_FAILURE;\n    handler && handler(self, recipient, reason, description);\n  },\n  [MESSAGE.CHANNEL_WINDOW_ADJUST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_WINDOW_ADJUST\n      uint32    recipient channel\n      uint32    bytes to add\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const bytesToAdd = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (bytesToAdd === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_WINDOW_ADJUST packet'\n      );\n    }\n\n    self._debug && self._debug(\n      `Inbound: CHANNEL_WINDOW_ADJUST (r:${recipient}, ${bytesToAdd})`\n    );\n\n    const handler = self._handlers.CHANNEL_WINDOW_ADJUST;\n    handler && handler(self, recipient, bytesToAdd);\n  },\n  [MESSAGE.CHANNEL_DATA]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_DATA\n      uint32    recipient channel\n      string    data\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const data = bufferParser.readString();\n    bufferParser.clear();\n\n    if (data === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_DATA packet'\n      );\n    }\n\n    self._debug\n      && self._debug(`Inbound: CHANNEL_DATA (r:${recipient}, ${data.length})`);\n\n    const handler = self._handlers.CHANNEL_DATA;\n    handler && handler(self, recipient, data);\n  },\n  [MESSAGE.CHANNEL_EXTENDED_DATA]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_EXTENDED_DATA\n      uint32    recipient channel\n      uint32    data_type_code\n      string    data\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const type = bufferParser.readUInt32BE();\n    const data = bufferParser.readString();\n    bufferParser.clear();\n\n    if (data === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_EXTENDED_DATA packet'\n      );\n    }\n\n    self._debug && self._debug(\n      `Inbound: CHANNEL_EXTENDED_DATA (r:${recipient}, ${data.length})`\n    );\n\n    const handler = self._handlers.CHANNEL_EXTENDED_DATA;\n    handler && handler(self, recipient, data, type);\n  },\n  [MESSAGE.CHANNEL_EOF]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_EOF\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (recipient === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_EOF packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: CHANNEL_EOF (r:${recipient})`);\n\n    const handler = self._handlers.CHANNEL_EOF;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_CLOSE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_CLOSE\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (recipient === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_CLOSE packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: CHANNEL_CLOSE (r:${recipient})`);\n\n    const handler = self._handlers.CHANNEL_CLOSE;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_REQUEST]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient channel\n      string    request type in US-ASCII characters only\n      boolean   want reply\n      ....      type-specific data follows\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    const type = bufferParser.readString(true);\n    const wantReply = bufferParser.readBool();\n    let data;\n    if (wantReply !== undefined) {\n      switch (type) {\n        case 'exit-status': // S->C\n          /*\n            uint32    exit_status\n          */\n          data = bufferParser.readUInt32BE();\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`\n          );\n          break;\n        case 'exit-signal': { // S->C\n          /*\n            string    signal name (without the \"SIG\" prefix)\n            boolean   core dumped\n            string    error message in ISO-10646 UTF-8 encoding\n            string    language tag\n          */\n          let signal;\n          let coreDumped;\n          if (self._compatFlags & COMPAT.OLD_EXIT) {\n            /*\n              Instead of `signal name` and `core dumped`, we have just:\n                uint32  signal number\n            */\n            const num = bufferParser.readUInt32BE();\n            switch (num) {\n              case 1:\n                signal = 'HUP';\n                break;\n              case 2:\n                signal = 'INT';\n                break;\n              case 3:\n                signal = 'QUIT';\n                break;\n              case 6:\n                signal = 'ABRT';\n                break;\n              case 9:\n                signal = 'KILL';\n                break;\n              case 14:\n                signal = 'ALRM';\n                break;\n              case 15:\n                signal = 'TERM';\n                break;\n              default:\n                if (num !== undefined) {\n                  // Unknown or OS-specific\n                  signal = `UNKNOWN (${num})`;\n                }\n            }\n            coreDumped = false;\n          } else {\n            signal = bufferParser.readString(true);\n            coreDumped = bufferParser.readBool();\n            if (coreDumped === undefined)\n              signal = undefined;\n          }\n          const errorMessage = bufferParser.readString(true);\n          if (bufferParser.skipString() !== undefined)\n            data = { signal, coreDumped, errorMessage };\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${signal})`\n          );\n          break;\n        }\n        case 'pty-req': { // C->S\n          /*\n            string    TERM environment variable value (e.g., vt100)\n            uint32    terminal width, characters (e.g., 80)\n            uint32    terminal height, rows (e.g., 24)\n            uint32    terminal width, pixels (e.g., 640)\n            uint32    terminal height, pixels (e.g., 480)\n            string    encoded terminal modes\n          */\n          const term = bufferParser.readString(true);\n          const cols = bufferParser.readUInt32BE();\n          const rows = bufferParser.readUInt32BE();\n          const width = bufferParser.readUInt32BE();\n          const height = bufferParser.readUInt32BE();\n          const modesBinary = bufferParser.readString();\n          if (modesBinary !== undefined) {\n            bufferParser.init(modesBinary, 1);\n            let modes = {};\n            while (bufferParser.avail()) {\n              const opcode = bufferParser.readByte();\n              if (opcode === TERMINAL_MODE.TTY_OP_END)\n                break;\n              const name = TERMINAL_MODE_BY_VALUE[opcode];\n              const value = bufferParser.readUInt32BE();\n              if (opcode === undefined\n                  || name === undefined\n                  || value === undefined) {\n                modes = undefined;\n                break;\n              }\n              modes[name] = value;\n            }\n            if (modes !== undefined)\n              data = { term, cols, rows, width, height, modes };\n          }\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n          break;\n        }\n        case 'window-change': { // C->S\n          /*\n            uint32    terminal width, columns\n            uint32    terminal height, rows\n            uint32    terminal width, pixels\n            uint32    terminal height, pixels\n          */\n          const cols = bufferParser.readUInt32BE();\n          const rows = bufferParser.readUInt32BE();\n          const width = bufferParser.readUInt32BE();\n          const height = bufferParser.readUInt32BE();\n          if (height !== undefined)\n            data = { cols, rows, width, height };\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n          break;\n        }\n        case 'x11-req': { // C->S\n          /*\n            boolean   single connection\n            string    x11 authentication protocol\n            string    x11 authentication cookie\n            uint32    x11 screen number\n          */\n          const single = bufferParser.readBool();\n          const protocol = bufferParser.readString(true);\n          const cookie = bufferParser.readString();\n          const screen = bufferParser.readUInt32BE();\n          if (screen !== undefined)\n            data = { single, protocol, cookie, screen };\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n          break;\n        }\n        case 'env': { // C->S\n          /*\n            string    variable name\n            string    variable value\n          */\n          const name = bufferParser.readString(true);\n          const value = bufferParser.readString(true);\n          if (value !== undefined)\n            data = { name, value };\n          if (self._debug) {\n            self._debug(\n              `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: `\n                + `${name}=${value})`\n            );\n          }\n          break;\n        }\n        case 'shell': // C->S\n          data = null; // No extra data\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n          break;\n        case 'exec': // C->S\n          /*\n            string    command\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`\n          );\n          break;\n        case 'subsystem': // C->S\n          /*\n            string    subsystem name\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`\n          );\n          break;\n        case 'signal': // C->S\n          /*\n            string    signal name (without the \"SIG\" prefix)\n          */\n          data = bufferParser.readString(true);\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`\n          );\n          break;\n        case 'xon-xoff': // C->S\n          /*\n            boolean   client can do\n          */\n          data = bufferParser.readBool();\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type}: ${data})`\n          );\n          break;\n        case 'auth-agent-req@openssh.com': // C-S\n          data = null; // No extra data\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n          break;\n        default:\n          data = (bufferParser.avail() ? bufferParser.readRaw() : null);\n          self._debug && self._debug(\n            `Inbound: CHANNEL_REQUEST (r:${recipient}, ${type})`\n          );\n      }\n    }\n    bufferParser.clear();\n\n    if (data === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_REQUEST packet'\n      );\n    }\n\n    const handler = self._handlers.CHANNEL_REQUEST;\n    handler && handler(self, recipient, type, wantReply, data);\n  },\n  [MESSAGE.CHANNEL_SUCCESS]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_SUCCESS\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (recipient === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_SUCCESS packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: CHANNEL_SUCCESS (r:${recipient})`);\n\n    const handler = self._handlers.CHANNEL_SUCCESS;\n    handler && handler(self, recipient);\n  },\n  [MESSAGE.CHANNEL_FAILURE]: (self, payload) => {\n    /*\n      byte      SSH_MSG_CHANNEL_FAILURE\n      uint32    recipient channel\n    */\n    bufferParser.init(payload, 1);\n    const recipient = bufferParser.readUInt32BE();\n    bufferParser.clear();\n\n    if (recipient === undefined) {\n      return doFatalError(\n        self,\n        'Inbound: Malformed CHANNEL_FAILURE packet'\n      );\n    }\n\n    self._debug && self._debug(`Inbound: CHANNEL_FAILURE (r:${recipient})`);\n\n    const handler = self._handlers.CHANNEL_FAILURE;\n    handler && handler(self, recipient);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}